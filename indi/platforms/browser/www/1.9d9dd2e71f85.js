webpackJsonp([1],{

/***/ 1186:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var RegistrationView = __webpack_require__(1236);\n    var CompleteRegistrationView = __webpack_require__(1249);\n    var CompleteRegistrationModel = __webpack_require__(1251);\n\n    module.exports = {\n        RegistrationView: RegistrationView,\n        CompleteRegistrationView: CompleteRegistrationView,\n        CompleteRegistrationModel: CompleteRegistrationModel\n    };\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/index.js\n// module id = 1186\n// module chunks = 1\n\n//# sourceURL=webpack:///./src/js/modules/registration/index.js?");

/***/ }),

/***/ 1205:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var Model = __webpack_require__(17);\n\n    var REGISTRATION_PREFIX = \"registration.\";\n    var FIELD_PREFIX = \"field.\";\n    var LABEL_PREFIX = REGISTRATION_PREFIX + FIELD_PREFIX + 'label.';\n    var FIELD_REQUIRED_KEY = 'registration.warning.this_field_is_required';\n    var FIELD_MAX_SIZE_LIMIT_KEY = 'registration.warning.field_max_size_limit';\n    var FIELD_MIN_SIZE_LIMIT_KEY = 'registration.warning.field_min_size_limit';\n    var FIELD_NOT_EMPTY_KEY = 'registration.warning.field_not_empty';\n    var FIELD_NUMBER_ONLY_KEY = 'registration.warning.field_number_only';\n    var DEFAULT_EMPTY = 'EMPTY';\n\n    var RegistrationFormValidations = Model.extend({\n\n        selectNotEmpty: function selectNotEmpty(fieldName) {\n            return {\n                rules: {\n                    // TODO - localize\n                    not_equals: [DEFAULT_EMPTY, __(fieldName ? 'registration.warning.field_is_required' : FIELD_REQUIRED_KEY, __(LABEL_PREFIX + fieldName))]\n                },\n                filters: []\n            };\n        },\n        countrySelectNotEmpty: function countrySelectNotEmpty(fieldName) {\n            return {\n                rules: {\n                    not_equals: [\"\", __(fieldName ? 'registration.warning.field_is_required' : FIELD_REQUIRED_KEY, __(LABEL_PREFIX + fieldName))]\n                },\n                filters: ['string']\n            };\n        },\n        multiSelectNotEmpty: function multiSelectNotEmpty(fieldName) {\n            return {\n                rules: {\n                    not_equals_array: [[DEFAULT_EMPTY], __(fieldName ? 'registration.warning.field_is_required' : FIELD_REQUIRED_KEY, __(LABEL_PREFIX + fieldName))]\n                },\n                filters: []\n            };\n        },\n        multiCheckBoxNotEmpty: function multiCheckBoxNotEmpty(fieldName) {\n            return {\n                rules: {\n                    // TODO - localize\n                    not_empty: __(FIELD_REQUIRED_KEY, __(fieldName ? LABEL_PREFIX + fieldName : FIELD_REQUIRED_KEY))\n                },\n                filters: []\n            };\n        },\n        radioNotEmpty: function radioNotEmpty(fieldName) {\n            return {\n                rules: {\n                    // TODO - localize\n                    not_empty: __(FIELD_REQUIRED_KEY, __(fieldName ? LABEL_PREFIX + fieldName : FIELD_REQUIRED_KEY))\n                },\n                filters: []\n            };\n        },\n        inputNotEqual: function inputNotEqual(val) {\n            return {\n                rules: {\n                    // TODO - localize\n                    not_equals: [val, 'Field should not be empty']\n                },\n                filters: []\n            };\n        },\n        notEmpty: function notEmpty(fieldName) {\n            return __(FIELD_NOT_EMPTY_KEY, __(fieldName ? LABEL_PREFIX + fieldName : FIELD_REQUIRED_KEY));\n        },\n        maxLength: function maxLength(num, fieldName) {\n            return [num, __(FIELD_MAX_SIZE_LIMIT_KEY, __(LABEL_PREFIX + fieldName), num)];\n        },\n        minLength: function minLength(num, fieldName) {\n            return [num, __(FIELD_MIN_SIZE_LIMIT_KEY, __(LABEL_PREFIX + fieldName), num)];\n        },\n        numeric: function numeric(fieldName) {\n            return __(FIELD_NUMBER_ONLY_KEY, __(LABEL_PREFIX + fieldName));\n        }\n\n    });\n\n    module.exports = new RegistrationFormValidations();\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/registration.form.validation.js\n// module id = 1205\n// module chunks = 1\n\n//# sourceURL=webpack:///./src/js/modules/registration/registration.form.validation.js?");

/***/ }),

/***/ 1206:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n\n    function checkDependentFieldOnBlur(dependentFieldName) {\n        this.value(this.value().trim());\n\n        if (!this.isEmpty()) {\n            this.validate();\n            return;\n        }\n\n        var dependent = this.getDependentFieldByName(dependentFieldName);\n        if (_.isEmpty(dependent)) {\n            this.fieldError();\n            return;\n        }\n\n        this.disable();\n\n        dependent.setDefaultValue();\n        dependent.enable();\n        dependent.validate();\n        if (dependent.$el.css('display') === 'none') {\n            dependent.$el.css('display', 'block');\n        }\n    }\n\n    function checkInputOnBlur() {\n        this.value(this.value().trim());\n\n        if (!this.isEmpty()) {\n            this.validate();\n        }\n    }\n\n    function validateFieldOnChange() {\n        this.validate();\n    }\n\n    function isFieldEquals(field, originalValues) {\n        var fieldValue = field.value();\n        var values = originalValues || [];\n\n        return _.any(values, function (value) {\n            return fieldValue === value;\n        });\n    }\n\n    module.exports.checkDependentFieldOnBlur = checkDependentFieldOnBlur;\n    module.exports.checkInputOnBlur = checkInputOnBlur;\n    module.exports.validateFieldOnChange = validateFieldOnChange;\n    module.exports.isFieldEquals = isFieldEquals;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/registration.form.fields.js\n// module id = 1206\n// module chunks = 1\n\n//# sourceURL=webpack:///./src/js/modules/registration/registration.form.fields.js?");

/***/ }),

/***/ 1230:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var Model = __webpack_require__(17);\n\n    module.exports = Model.extend({\n\n        before: function before(savedData) {\n            var updates = {};\n\n            if (savedData[\"fatca\"] === \"NO\" && _.isEmpty(savedData[\"employment_status\"])) {\n                updates[\"fatca\"] = \"EMPTY\";\n            }\n\n            return updates;\n        }\n\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/step/base/registration.step.financial.information.base.model.js\n// module id = 1230\n// module chunks = 1\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/step/base/registration.step.financial.information.base.model.js?");

/***/ }),

/***/ 1231:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var Model = __webpack_require__(17);\n    var server = __webpack_require__(9);\n\n    var RegistrationTinValidations = Model.extend({\n\n        // fallback if we don't take data from server\n        defaults: {\n            tinValidations: {\n                \"AD\": \"(^F[0-7][0-9]{5}[A-Z]$)|(^E[8-9][0-9]{5}[A-Z]$)\",\n                \"AR\": \"^2[0,3-7][0-9]{9}$\",\n                \"AW\": \"^[0-9]{8}$\",\n                \"AU\": \"(^[0-9]{8}$)|(^[0-9]{9}$)|(^[0-9]{11}$)\",\n                \"AT\": \"^[0-9]{9}$\",\n                \"BE\": \"^[0-9]{11}$\",\n                \"BZ\": \"^[0-9]{8}$\",\n                \"BR\": \"^[0-9]{11}$\",\n                \"BG\": \"^[0-9]{10}$\",\n                \"CA\": \"^[0-9]{9}$\",\n                \"CL\": \"(^[0-9]{7,8}K$)|(^[0-9]{8,9}$)\",\n                \"CN\": \"(^[a-zA-Z0-9]{15}$)|(^[a-zA-Z0-9]{18}$)\",\n                \"CO\": \"^[1-9][0-9]{9}$\",\n                \"CR\": \"^[0-9]{9}$\",\n                \"HR\": \"^[0-9]{11}$\",\n                \"CZ\": \"^[0-9]{9,10}$\",\n                \"DK\": \"^[0-9]{10}$\",\n                \"EE\": \"^[0-9]{11}$\",\n                \"FO\": \"^[0-9]{9}$\",\n                \"FI\": \"^[0-9]{10}$\",\n                \"FR\": \"^[0-3][0-9]{12}$\",\n                \"DE\": \"^[0-9]{11}$\",\n                \"GI\": \"^[0-9][0-9]{0,5}$\",\n                \"GR\": \"^[0-9]{9}$\",\n                \"GL\": \"^[0-9]{10}$\",\n                \"GG\": \"^GY[0-9]{6}$\",\n                \"HU\": \"^[0-9]{10,11}$\",\n                \"IS\": \"^[0-9]{10}$\",\n                \"IN\": \"^[a-zA-Z]{3}P[a-zA-Z]([1-9][0-9][0-9][0-9]|[0-9][1-9][0-9][0-9]|[0-9][0-9][1-9][0-9]|[0-9][0-9][0-9][1-9])[a-zA-Z]$\",\n                \"IE\": \"^[0-9]{7}[a-zA-Z]{1,2}$\",\n                \"IM\": \"(^H[0-9]{6}$)|(^H[0-9]{8}$)\",\n                \"IT\": \"^[a-zA-Z]{6}[a-zA-Z0-9]{10}$\",\n                \"JP\": \"^[0-9]{12}$\",\n                \"JE\": \"^JY[0-9]{6}[A-Da-d]$\",\n                \"KP\": \"^[0-9]{10}$\",\n                \"KW\": \"^[0-9]*$\",\n                \"LV\": \"^[0-3][0-9](0[1-9]|1[0-2])[0-9]{2}[0-2][0-9]{4}$\",\n                \"LI\": \"^[a-zA-Z][0-9]{5}$\",\n                \"LT\": \"^[0-9]{11}$\",\n                \"LU\": \"^[0-9]{11}$\",\n                \"MY\": \"^[a-zA-Z0-9]{12,13}$\",\n                \"MT\": \"(^[0-9]{7}[a-zA-Z]$)|(^[0-9]{9}$)\",\n                \"MH\": \"^[0-9]{5}04$\",\n                \"MU\": \"^[1,7,8][0-9]{7}$\",\n                \"MX\": \"^[a-zA-Z]{4}[0-9]{6}[a-zA-Z0-9]{3}$\",\n                \"NR\": \"^[0-9]{9}$\",\n                \"NL\": \"^[a-zA-Z0-9]{9}$\",\n                \"NZ\": \"^[0-9]{8,9}$\",\n                \"NO\": \"^[0-9]{11}$\",\n                \"PL\": \"^[0-9]{11}$\",\n                \"PT\": \"^[1-4][0-9]{8}$\",\n                \"RO\": \"^[1-9][0-9]{2}(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])(0[1-9]|[1-4][0-9]|5[0-2])[0-9]{4}$\",\n                \"RU\": \"^[0-9]{12}$\",\n                \"LC\": \"^[0-9]{1,6}$\",\n                \"WS\": \"^[0-9]{5,}$\",\n                \"SM\": \"(^[0-9]{9}$)|(^SM[0-9]{5}$)\",\n                \"SA\": \"^[0-9]{10}$\",\n                \"SC\": \"^[0-9]{2}2[0-9]{6}$\",\n                \"SG\": \"^[S,T,F,G][0-9]{7}[a-zA-Z0-9]$\",\n                \"SK\": \"^[0-9]{2}(0[1-9]|1[0-2]|5[1-9]|6[0-2])(0[1-9]|[1-2][0-9]|3[0-1])[0-9]{3,4}$\",\n                \"SI\": \"^[0-9]{13}$\",\n                \"ZA\": \"^[0,1,2,3,9][0-9]{9}$\",\n                \"ES\": \"^[a-zA-Z0-9][0-9]{7}[a-zA-Z]$\",\n                \"SE\": \"(^[0-9]{10}$)|(^[0-9]{12}$)\",\n                \"CH\": \"^[0-9]{13}$\",\n                \"GB\": \"^[A-C,E,G,H,J-P,R-T,W-Z][A-C,E,G,H,J-N,P,R-T,W-Z][0-9]{6}[A,B,C,D]$\",\n                \"UY\": \"(^[0-9]{9}$)|(^[0-9]{12}$)\"\n            }\n        },\n\n        load: function load() {\n            return server.getTinValidations().then(this.loadSuccess.bind(this)).catch(this.loadError.bind(this));\n        },\n\n        loadSuccess: function loadSuccess(res) {\n            if (!res.data) return Promise.reject();\n\n            this.set('tinValidations', res.data);\n\n            return Promise.resolve(res);\n        },\n\n        loadError: function loadError(res) {\n            return Promise.reject(res);\n        },\n\n        getFilters: function getFilters() {\n            return ['trim', 'string'];\n        },\n\n        getRulesByCountryCode: function getRulesByCountryCode(code, message) {\n            var rules = {\n                not_empty: message\n            };\n\n            var countryRules = this.get('tinValidations')[code];\n\n            if (countryRules) {\n                rules[\"regexp\"] = [new RegExp(countryRules), message];\n            }\n\n            return rules;\n        }\n\n    });\n\n    module.exports = new RegistrationTinValidations();\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/registration.tin.validation.js\n// module id = 1231\n// module chunks = 1\n\n//# sourceURL=webpack:///./src/js/modules/registration/registration.tin.validation.js?");

/***/ }),

/***/ 1232:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var EMPTY = 'EMPTY';\n    var LOADING = 'LOADING';\n    var SUCCESS = 'SUCCESS';\n    var ERROR = 'ERROR';\n\n    module.exports = {\n        EMPTY: EMPTY,\n        LOADING: LOADING,\n        SUCCESS: SUCCESS,\n        ERROR: ERROR\n    };\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/types.js\n// module id = 1232\n// module chunks = 1\n\n//# sourceURL=webpack:///./src/js/modules/registration/types.js?");

/***/ }),

/***/ 1236:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_, $) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var $ = __webpack_require__(5);\n    var user = __webpack_require__(7);\n    var stream = __webpack_require__(13);\n    var core = __webpack_require__(4);\n    var device = __webpack_require__(18);\n    var server = __webpack_require__(9);\n    var settings = __webpack_require__(10);\n    var PopupView = __webpack_require__(24);\n    var LoadingView = __webpack_require__(21);\n    var template = _.template(__webpack_require__(1237));\n    var registrationFormConfig = __webpack_require__(1238);\n\n    var FormRegistrationSteps = __webpack_require__(1246);\n\n    var _require = __webpack_require__(191),\n        STEP_IN_PROGRESS = _require.STEP_IN_PROGRESS,\n        STEP_PENDING = _require.STEP_PENDING;\n\n    var WizardStageModel = __webpack_require__(132);\n    var WizardStageView = __webpack_require__(133);\n    var StepsCollection = __webpack_require__(436);\n    var tinValidations = __webpack_require__(1231);\n    var conditions = __webpack_require__(60);\n    var eventTracker = __webpack_require__(435);\n\n    var REGISTRATION_FLOW_KEY = 0;\n    var LAST_ACTION_KEY = 1;\n    var COUNTRIES_KEY = 2;\n    var BONUSES_KEY = 3;\n\n    function Message(caption, text, handler) {\n        var MessageBox = __webpack_require__(27);\n\n        return new MessageBox({\n            parent: document.body,\n            caption: caption,\n            text: text,\n            onOK: handler,\n            actions: {\n                onClose: handler\n            }\n        });\n    }\n\n    var RegistrationView = PopupView.extend({\n        events: function events() {\n            return _.extend({}, _.result(PopupView.prototype, 'events'), {\n                'click .fn-next': 'onNext',\n                'click .fn-back': 'onBack',\n                'click .fn-finish': 'onRegistrationFinish'\n            });\n        },\n        stepsViews: [],\n        currentStepView: null,\n\n        initialize: function initialize(options) {\n            _.extend(options || {}, {\n                isHeaderShowed: true,\n                caption: __('registration.account.registration'),\n                previousCaption: __('actions.exit'),\n                headerStyle: 'wizard',\n                style: 'height: 100%;',\n                headerContent: '<span class=\"registration-bonus-steps-to-go\"><span class=\"steps-to-go-message\"></span></span>'\n            });\n            PopupView.prototype.initialize.apply(this, arguments);\n\n            var userInfo = user.getUserData().getCrmboCustomer();\n            Promise.all([this.getRegistrationFlow(), server.registrationGetAccount(userInfo), server.registrationGetCountries(userInfo), this.getUserAwards(stream), tinValidations.load()]).then(this.parseRegistrationFlow.bind(this)).then(this.afterParseRegistrationFlow.bind(this)).then(this.onDataLoaded.bind(this)).catch(this.handleError.bind(this));\n        },\n\n        afterParseRegistrationFlow: function afterParseRegistrationFlow(data) {\n            core.trigger('fullregistration:load:after');\n\n            this.stepsCollection = new StepsCollection();\n            this.stepsCollection.setData(_.map(data.steps, function (step) {\n                return new WizardStageModel(step);\n            }));\n        },\n\n        onDataLoaded: function onDataLoaded() {\n            this.render();\n            this.setContent(template());\n\n            this.stepsViews = this.stepsCollection.map(function (step) {\n                return new WizardStageView({\n                    $parent: this.$el.find('.content'),\n                    model: step\n                });\n            }, this);\n\n            this.showControlButtons();\n            this.formRegistrationSteps = new FormRegistrationSteps({\n                $parent: this.$el.find('.registration-steps'),\n                collection: this.stepsCollection,\n                bonuses: this._bonus\n            });\n\n            this.showCurrentRegistrationStep();\n\n            core.trigger('registration:start');\n        },\n\n        request: function request(action, in_data, flattenData) {\n            function transforms(data) {\n                var str = 'userId=' + data.userId + \"&password=\" + data.password + \"&hashedPassword=\" + data.hashedPassword;\n                if (flattenData) {\n                    str += '&' + _.map(data.data, function (value, key) {\n                        return key + '=' + value;\n                    }).join('&');\n                } else {\n                    str += \"&data=\" + JSON.stringify(data.data);\n                }\n\n                return window.encodeURI(str);\n            }\n\n            var userInfo = user.getUserData().getCrmboCustomer();\n            var data = {\n                userId: userInfo.id,\n                password: userInfo.password,\n                hashedPassword: userInfo.password,\n                data: in_data || {}\n            };\n\n            return server.actionPost(action, data, transforms).then(function (res) {\n                if (!res.data.success || res.data.error) return Promise.reject(res.data.error);\n                return res.data.body ? res.data.body : res.data;\n            });\n        },\n\n        getRegistrationFlow: function getRegistrationFlow() {\n            var registrationFlow = __webpack_require__(1248);\n\n            if (!_.isEmpty(registrationFlow)) {\n                try {\n                    return Promise.resolve(JSON.parse(registrationFlow));\n                } catch (e) {\n                    console.error(e);\n                }\n            }\n\n            return server.getRegistrationFlow().then(function (res) {\n                return res.data.error ? Promise.reject(res.data.error) : res.data;\n            });\n        },\n\n        parseRegistrationFlow: function parseRegistrationFlow(values) {\n            var registrationFlowData = values[REGISTRATION_FLOW_KEY];\n            var lastActionsData = values[LAST_ACTION_KEY];\n            // Fix input for unknown values\n            _.each(lastActionsData, function (v, k) {\n                if (v === \"UNKNOWN\") {\n                    lastActionsData[k] = \"\";\n                }\n            });\n\n            // TODO - this data should be constructed from lastActionsData\n            registrationFlowData.steps.forEach(function (step) {\n                return _.extend(step, {\n                    status: STEP_PENDING\n                });\n            });\n            _.extend(registrationFlowData.steps[0], { status: STEP_IN_PROGRESS });\n\n            var allCountries = _.filter(values[COUNTRIES_KEY], function (country) {\n                return country.code !== \"00\";\n            });\n            var allowedCountries = _.filter(allCountries, 'allowed');\n\n            var phoneToCountry = _.reduce(allowedCountries, function (object, value) {\n                if (value.phoneCode === 0 || value.phoneCode === 1) {\n                    return object;\n                }\n                object[value.phoneCode] = value.code;\n                return object;\n            }, {\n                // TODO - Currently server doesn't return the saved country values for \"0\", \"1\" so we just use US, AQ\n                \"0\": \"AQ\",\n                \"1\": \"US\"\n            });\n\n            var formConfig = registrationFormConfig.RegistrationFormConfig({\n                allCountries: allCountries,\n                allowedCountries: allowedCountries,\n                phoneToCountry: phoneToCountry,\n                savedData: lastActionsData\n            });\n\n            this._bonus = \"\";\n            if (values[BONUSES_KEY] && values[BONUSES_KEY].full_registration) {\n                this._bonus = user.getUserCurrencySymbol() + values[BONUSES_KEY].full_registration;\n            }\n\n            return {\n                steps: formConfig.getFormElements(registrationFlowData.steps)\n            };\n        },\n\n        close: function close() {\n            this.stopListening();\n            // this.formRegistrationSteps.remove();\n            _.each(this.stepsViews, function (step) {\n                step.remove();\n            });\n\n            PopupView.prototype.close.call(this);\n        },\n\n        showControlButtons: function showControlButtons() {\n            this.$el.find(\".allow-back\").css('display', this.stepsCollection.isFirstStep() ? 'none' : 'inline');\n            this.$el.find(\".allow-next\").css('display', this.stepsCollection.isLastStep() ? 'none' : 'block');\n            this.$el.find(\".allow-finish\").css('display', this.stepsCollection.isLastStep() ? 'block' : 'none');\n        },\n\n        changeStep: function changeStep(number) {\n            var status = this.stepsCollection.getNewStatus(number);\n            if (!status) {\n                return;\n            }\n\n            // Set status to current step\n            this.stepsCollection.setNewStatus(status);\n            // TODO - can move this to onStatus change in the view\n            this.currentStepView.remove();\n\n            this.stepsCollection.moveStep(number);\n\n            this.showCurrentRegistrationStep();\n            this.showControlButtons();\n\n            // TODO - is it only relevant in mobile ?\n            if (device.mobile()) {\n                this.$el.find('.registration').scrollTo({\n                    duration: 1000,\n                    complete: _.noop(),\n                    top: 0\n                });\n            }\n        },\n\n        showCurrentRegistrationStep: function showCurrentRegistrationStep() {\n            this.stepsCollection.getCurrentStep().set('status', STEP_IN_PROGRESS);\n            this.currentStepView = this.stepsViews[this.stepsCollection.getCurrentStepId()];\n\n            this.currentStepView.show();\n\n            var trackStepId = this.stepsCollection.getCurrentStepId() + 1;\n            eventTracker.trackDisplayRegistrationStep(trackStepId);\n        },\n\n        onNext: function onNext() {\n            var trackStepId = this.stepsCollection.getCurrentStepId() + 1;\n            eventTracker.trackNextRegistrationStep(trackStepId);\n\n            if (this.currentStepView.validate() !== false) {\n                if (device.mobile()) {\n                    var firstErrorField = this.currentStepView.getErrorFields()[0];\n                    if (!firstErrorField) {\n                        return;\n                    }\n\n                    this.$el.find('.registration').scrollTo({\n                        duration: 1000,\n                        complete: _.noop(),\n                        element: firstErrorField.$el\n                    });\n                }\n                return;\n            }\n\n            this.submitSteps().then(function () {\n                this.changeStep(1);\n            }.bind(this)).catch(this.handleError.bind(this));\n        },\n\n        onRegistrationFinish: function onRegistrationFinish() {\n            var _this = this;\n\n            if (this.currentStepView.validate() !== false) {\n                return;\n            }\n\n            this.currentStepView.saveData();\n            this.submitSteps().then(function (res) {\n                user.getUserData().set('scoreLevel', res.scoreLevel);\n                core.trigger('registration:filled');\n                _this.close();\n                if (settings.isGuaranteedStopLossEnabled()) {\n                    server.loadRegulationGslStatus().then(function (res) {\n                        user.setGuaranteedStopLoss(res.data);\n                    });\n                }\n            }).catch(this.handleError.bind(this));\n        },\n\n        getUserAwards: function getUserAwards(stream) {\n            if (!this.options.isBonus) {\n                return Promise.resolve(false);\n            }\n\n            var loginData = user.getUserData().getCrmboCustomer();\n            return server.loadAwards({\n                id: loginData.id,\n                password: loginData.password\n            }).then(function (res) {\n                if (_.has(res.data.bonuses, 'full_registration')) {\n                    return res.data.bonuses;\n                }\n\n                return { full_registration: '' };\n            });\n        },\n\n        onBack: function onBack() {\n            var trackStepId = this.stepsCollection.getCurrentStepId() + 1;\n            eventTracker.trackPreviousRegistrationStep(trackStepId);\n\n            this.currentStepView.saveData();\n            this.changeStep(-1);\n        },\n\n        injectAdditionalPhoneData: function injectAdditionalPhoneData(data) {\n            var phone = data['phone'];\n\n            if (!phone) return data;\n\n            var index = phone.indexOf('-');\n            var code = phone.slice(0, index);\n            var number = phone.slice(index + 1);\n\n            data['phoneCountryCode'] = code;\n            data['phoneNationalNumber'] = number;\n\n            return data;\n        },\n\n        submit: function submit(stepsData) {\n            this.showLoadingPopup();\n            console.log('updateAccount...');\n\n            if (!_.isUndefined(stepsData['phone'])) stepsData = this.injectAdditionalPhoneData(stepsData);\n\n            return this.request('v2/updateAccount', stepsData).then(function (res) {\n                this.hideLoadingPopup();\n                if (res && res.data && res.data.error) {\n                    console.log('updateAccount... FAIL');\n                    return Promise.reject(res.data.error);\n                }\n                if (stepsData.country) {\n                    user.setCountry(stepsData.country);\n                }\n                if (stepsData.citizenship) {\n                    user.setCitizenship(stepsData.citizenship);\n                }\n                if (!_.isUndefined(stepsData.nationalCountryIdentifier)) {\n                    user.setNationalCountryIdentifier(stepsData.nationalCountryIdentifier);\n                }\n\n                console.log('updateAccount... OK');\n                return res;\n            }.bind(this)).catch(function (res) {\n                this.hideLoadingPopup();\n                console.log('catch updateAccount... FAIL ' + res);\n                this.handleError(res);\n            }.bind(this));\n        },\n\n        submitSteps: function submitSteps() {\n            this.currentStepView.saveData();\n            return this.submit(_.chain(this.stepsViews).map(function (elem) {\n                return elem.model.getSavedData();\n            }).reduce(function (obj, item) {\n                // handled on server side\n                if (item['termsAndConditions']) {\n                    item = _.omit(item, 'termsAndConditions');\n                }\n                _.assign(obj, item);\n                return obj;\n            }, {}).value());\n        },\n\n        showLoadingPopup: function showLoadingPopup() {\n            if (this.fixedLoadingView) return;\n            this.fixedLoadingView = new LoadingView({\n                parent: this.$el,\n                position: 'fixed',\n                translucent: '2'\n            });\n        },\n\n        hideLoadingPopup: function hideLoadingPopup() {\n            if (!this.fixedLoadingView) return;\n            this.fixedLoadingView.destroy();\n            this.fixedLoadingView = null;\n        },\n\n        handleError: function handleError(e) {\n            console.log(\"Registration error:\", e);\n            new Message('Error', __('generic.error.message'), this.close.bind(this));\n        },\n\n        closePopup: function closePopup() {\n            PopupView.prototype.closePopup.call(this);\n            core.trigger('sm', 'registration_abort');\n            core.trigger('registration:abort');\n\n            var options = this.options;\n            var onAbort = options && options.onAbort;\n            _.isFunction(onAbort) && onAbort();\n\n            eventTracker.trackCloseRegistrationForm();\n        }\n    });\n\n    if (settings.isRegistrationAutocompleteEnabled()) {\n        RegistrationView.prototype.events = _.extend({}, _.result(RegistrationView.prototype, 'events'), {\n            'dblclick .content': '__doubleClick'\n        });\n\n        RegistrationView.prototype.__doubleClick = function (event) {\n            var generatedText = function generatedText() {\n                return _.sample('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 15).join('');\n            };\n            var generatedNumbers = function generatedNumbers() {\n                return _.sample('0123456789', 7).join('');\n            };\n            var getRandom = function getRandom(min, max) {\n                return Math.floor(Math.random() * (max - min) + min);\n            };\n\n            this.$('.input-field').forEach(function (el) {\n                return $(el).val(generatedText());\n            });\n            this.$('.field-type-phone [name=phone]').val(generatedNumbers());\n            this.$('.dk-select').forEach(function (el) {\n                var $options = $(el).find('.dk-select-options li');\n                var $selected = $(el).find('.dk-selected');\n\n                var index = event.shiftKey === true ? 0 : getRandom(0, $options.length - 1);\n                var $item = $($options.get(index));\n                var value = $item[0].textContent;\n\n                $options.removeClass('selected');\n                $item.addClass('selected').trigger('click');\n                $selected.html(value);\n            });\n\n            this.$(\".field-type-multi-select select\").forEach(function (el) {\n                _.each(el.options, function (option) {\n                    return option.selected = false;\n                });\n                for (var i = 0; i < 3; i++) {\n                    el.options[getRandom(0, el.options.length - 1)].selected = true;\n                }$(el).trigger('change');\n            });\n            this.$(\".field-type-multi-checkbox\").forEach(function (el) {\n                var elArr = $(el).find(\"input\");\n                _.each(elArr, function (input) {\n                    return input.removeAttribute(\"checked\");\n                });\n                elArr[getRandom(0, elArr.length)].setAttribute(\"checked\", true);\n                $(el).trigger('change');\n            });\n        };\n    }\n\n    module.exports = RegistrationView;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(5)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/registration.view.js\n// module id = 1236\n// module chunks = 1\n\n//# sourceURL=webpack:///./src/js/modules/registration/registration.view.js?");

/***/ }),

/***/ 1237:
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"registration-container\\\">\\n<div class=\\\"registration\\\">\\n    <div class=\\\"header\\\">\\n        <div class=\\\"registration-steps\\\"></div>\\n    </div>\\n\\n    <div class=\\\"content\\\">\\n    </div>\\n\\n    <div class=\\\"separator hidden-xs\\\"><span></span></div>\\n\\n    <div class=\\\"footer hidden-xs\\\">\\n        <div class=\\\"left\\\">\\n            <span><%=__('help.need_help')%></span>\\n            <a href=\\\"#\\\" class=\\\"fn-help-live-chat-link\\\">\\n                <span>\\n                    <%=__('help.right_here')%>\\n                </span>\\n            </a>\\n        </div>\\n        <div class=\\\"right allow-next\\\">\\n            <a url=\\\"#\\\" class=\\\"back allow-back fn-back\\\" style=\\\"display:none\\\"><%=__('actions.back')%></a><button class=\\\"btn btn-primary fn-next\\\"><%=__('actions.next')%></button>\\n        </div>\\n        <div class=\\\"right allow-finish\\\" style=\\\"display:none\\\">\\n            <a url=\\\"#\\\" class=\\\"back allow-back fn-back\\\" style=\\\"display:none\\\"><%=__('actions.back')%></a><button class=\\\"btn btn-primary fn-finish\\\"><%=__('actions.finish')%></button>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"footer hidden-sm hidden-md hidden-lg\\\">\\n        <div class=\\\"allow-next\\\">\\n            <div class=\\\"form-actions\\\">\\n                <button class=\\\"btn btn-link back allow-back fn-back col\\\" style=\\\"display:none\\\">&larr; <%=__('registration.button.previous')%></button>\\n                <button class=\\\"btn btn-primary fn-next col\\\"><%=__('registration.button.next')%> &rarr;</button>\\n            </div>\\n        </div>\\n        <div class=\\\"allow-finish\\\" style=\\\"display:none\\\">\\n            <div class=\\\"form-actions\\\">\\n                <button class=\\\"btn btn-link back allow-back fn-back col\\\" style=\\\"display:none\\\">&larr; <%=__('registration.button.previous')%></button>\\n                <button class=\\\"btn btn-primary fn-finish col\\\"><%=__('actions.finish')%></button>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n</div>\";\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/templates/registration.html\n// module id = 1237\n// module chunks = 1\n\n//# sourceURL=webpack:///./src/js/modules/registration/templates/registration.html?");

/***/ }),

/***/ 1238:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var device = __webpack_require__(18);\n    var getPhoneCodesByCountryCode = __webpack_require__(1239).getPhoneCodesByCountryCode;\n    var settings = __webpack_require__(10);\n    var templates = __webpack_require__(42);\n\n    var RegistrationStrategyBase = __webpack_require__(1240);\n    var RegistrationStrategyTradeV2 = __webpack_require__(1241);\n    var RegistrationStrategyMarkets = __webpack_require__(1242);\n    var RegistrationStrategyCFDGlobal = __webpack_require__(1244);\n\n    var DETAILS_FIELD_SUFFIX = '_details';\n\n    function RegistrationFormConfig(options) {\n        function _sortPredicate(a, b) {\n            if (a.key === 'EMPTY') {\n                return -1;\n            }\n\n            if (b.key === 'EMPTY') {\n                return 1;\n            }\n\n            return device.mobile() || device.tablet() ? a.value.localeCompare(b.value) : a.name.localeCompare(b.name);\n        }\n\n        function _sort(arr, pred) {\n            return arr.sort(pred);\n        }\n\n        var dictionary = function () {\n            function getCountriesPhoneCodes() {\n                var countriesPhoneCodes = _sort(_.map(options.allowedCountries, function (country) {\n                    return {\n                        name: __('country.name.' + country.code),\n                        code: country.code.toLowerCase(),\n                        value: country.phoneCode\n                    };\n                }), _sortPredicate);\n\n                if (device.mobile() || device.tablet()) {\n                    countriesPhoneCodes = _.uniq(countriesPhoneCodes, 'value');\n                }\n                return countriesPhoneCodes;\n            }\n\n            return {\n                getCountriesPhoneCodes: getCountriesPhoneCodes\n            };\n        }();\n\n        function provideBrandRegistration(options) {\n            var strategy = void 0;\n            options[\"countriesPhoneCodes\"] = dictionary.getCountriesPhoneCodes();\n\n            var brand = settings.getBrandName();\n            switch (brand) {\n                case \"trade\":\n                case \"finexo\":\n                    strategy = new RegistrationStrategyTradeV2(options);\n                    break;\n\n                case \"cfdglobal\":\n                    strategy = new RegistrationStrategyCFDGlobal(options);\n                    break;\n                case \"markets\":\n                    strategy = new RegistrationStrategyMarkets(options);\n                    break;\n\n                default:\n                    strategy = new RegistrationStrategyBase(options);\n                    break;\n            }\n\n            return strategy;\n        }\n\n        var registrationStrategy = provideBrandRegistration(options);\n        var formConfig = registrationStrategy.getFormConfig();\n        var stepModels = registrationStrategy.getStepModels();\n\n        function _updatePhoneValue(phoneElem) {\n            if (!_.isEmpty(phoneElem.savedData) || _.isEmpty(options.savedData[\"country\"])) {\n                return;\n            }\n            var countryCodes = getPhoneCodesByCountryCode(options.savedData[\"country\"]);\n\n            if (countryCodes) {\n                var code = _.find(options.allowedCountries, function (country) {\n                    return countryCodes.indexOf(country.phoneCode) >= 0;\n                });\n\n                if (code) {\n                    phoneElem.savedData = code.phoneCode + \"-\";\n                }\n            }\n        }\n\n        function _enrichDetailsFormElement(elem, config) {\n            if (config.template !== templates.yesNoDetails) {\n                return;\n            }\n\n            var savedData = options.savedData[elem.name + DETAILS_FIELD_SUFFIX];\n            if (savedData) {\n                config.details.value = savedData;\n            }\n        }\n\n        function _getElemDetails(elem) {\n            if (!formConfig[elem.name]) {\n                console.log(\"getElemDetails something gone wrong...\", elem.name);\n                return { name: elem.name };\n            }\n            var savedData = options.savedData[elem.name] ? { savedData: options.savedData[elem.name] } : {};\n\n            var details = _.extend({}, elem, savedData, formConfig[elem.name]);\n            if ((details.template === templates.selectBox || details.template === templates.selectBoxOverflowWidth) && !_.contains(details.options, 'EMPTY')) {\n                details.options.unshift('EMPTY');\n            }\n\n            if (elem.name === \"phone\") {\n                _updatePhoneValue(details);\n            }\n\n            _enrichDetailsFormElement(elem, details);\n\n            return details;\n        }\n\n        function getFormElements(pages) {\n            return _.map(pages, function (page) {\n                return {\n                    \"title\": page.groupName,\n                    \"status\": page.status,\n                    \"action\": stepModels[page.groupName],\n                    \"top\": _.map(page.top, _getElemDetails),\n                    \"form\": _.map(page.form, function (formColumn) {\n                        return _.map(formColumn, _getElemDetails);\n                    }),\n                    \"bottom\": _.map(page.bottom, _getElemDetails)\n                };\n            });\n        }\n\n        return {\n            getFormElements: getFormElements\n        };\n    }\n\n    module.exports.RegistrationFormConfig = RegistrationFormConfig;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/registration.form.config.js\n// module id = 1238\n// module chunks = 1\n\n//# sourceURL=webpack:///./src/js/modules/registration/registration.form.config.js?");

/***/ }),

/***/ 1239:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var countyCodeToPhoneCode = { \"AC\": [\"247\"], \"AD\": [\"376\"], \"AE\": [\"971\"], \"AF\": [\"93\"], \"AG\": [\"1268\"], \"AI\": [], \"AL\": [\"355\"], \"AM\": [\"374\"], \"AN\": [], \"AO\": [\"244\"], \"AQ\": [\"672\"], \"AR\": [\"54\"], \"AS\": [\"1684\"], \"AT\": [\"43\"], \"AU\": [\"61\"], \"AW\": [\"297\"], \"AX\": [\"358\"], \"AZ\": [\"994\"], \"BA\": [\"387\"], \"BB\": [\"1246\"], \"BD\": [\"880\"], \"BE\": [\"32\"], \"BF\": [\"226\"], \"BG\": [\"359\"], \"BH\": [\"973\"], \"BI\": [\"257\"], \"BJ\": [\"229\"], \"BL\": [\"590\"], \"BM\": [\"1441\"], \"BN\": [\"673\"], \"BO\": [\"591\"], \"BQ\": [], \"BR\": [\"55\"], \"BS\": [\"1242\"], \"BT\": [\"975\"], \"BU\": [], \"BV\": [], \"BW\": [\"267\"], \"BY\": [], \"BZ\": [\"501\"], \"CA\": [\"1\"], \"CC\": [\"61\"], \"CD\": [\"243\"], \"CF\": [\"236\"], \"CG\": [\"242\"], \"CH\": [\"41\"], \"CI\": [\"225\"], \"CK\": [\"682\"], \"CL\": [\"56\"], \"CM\": [\"237\"], \"CN\": [\"86\"], \"CO\": [\"57\"], \"CP\": [], \"CR\": [\"506\"], \"CS\": [], \"CT\": [], \"CU\": [\"53\"], \"CV\": [\"238\"], \"CW\": [\"599\"], \"CX\": [\"61\"], \"CY\": [\"357\"], \"CZ\": [\"420\"], \"DD\": [], \"DE\": [\"49\"], \"DG\": [], \"DJ\": [\"253\"], \"DK\": [\"45\"], \"DM\": [\"1767\"], \"DO\": [\"1809\", \"1829\", \"1849\"], \"DY\": [], \"DZ\": [\"213\"], \"EA\": [], \"EC\": [\"593\"], \"EE\": [\"372\"], \"EG\": [\"20\"], \"EH\": [\"212\"], \"ER\": [\"291\"], \"ES\": [\"34\"], \"ET\": [\"251\"], \"EU\": [\"388\"], \"FI\": [\"358\"], \"FJ\": [\"679\"], \"FK\": [\"500\"], \"FM\": [\"691\"], \"FO\": [\"298\"], \"FQ\": [], \"FR\": [\"33\"], \"FX\": [\"241\"], \"GA\": [\"241\"], \"GB\": [\"44\"], \"GD\": [\"473\"], \"GE\": [], \"GF\": [\"594\"], \"GG\": [\"44\"], \"GH\": [\"233\"], \"GI\": [\"350\"], \"GL\": [\"299\"], \"GM\": [\"220\"], \"GN\": [\"224\"], \"GP\": [\"590\"], \"GQ\": [\"240\"], \"GR\": [\"30\"], \"GS\": [], \"GT\": [\"502\"], \"GU\": [\"1671\"], \"GW\": [\"245\"], \"GY\": [\"592\"], \"HK\": [\"852\"], \"HM\": [], \"HN\": [\"504\"], \"HR\": [\"385\"], \"HT\": [\"509\"], \"HU\": [\"36\"], \"HV\": [], \"IC\": [], \"ID\": [\"62\"], \"IE\": [\"353\"], \"IL\": [\"972\"], \"IM\": [\"44\"], \"IN\": [\"91\"], \"IO\": [\"246\"], \"IQ\": [\"964\"], \"IR\": [\"98\"], \"IS\": [\"354\"], \"IT\": [\"39\"], \"JE\": [\"44\"], \"JM\": [\"1876\"], \"JO\": [\"962\"], \"JP\": [\"81\"], \"JT\": [], \"KE\": [\"254\"], \"KG\": [\"996\"], \"KH\": [\"855\"], \"KI\": [\"686\"], \"KM\": [\"269\"], \"KN\": [\"1869\"], \"KP\": [\"850\"], \"KR\": [\"82\"], \"KW\": [\"965\"], \"KY\": [\"1345\"], \"KZ\": [\"7\", \"76\", \"77\"], \"LA\": [\"856\"], \"LB\": [\"961\"], \"LC\": [\"1758\"], \"LI\": [\"423\"], \"LK\": [\"94\"], \"LR\": [\"231\"], \"LS\": [\"266\"], \"LT\": [\"370\"], \"LU\": [\"352\"], \"LV\": [\"371\"], \"LY\": [\"218\"], \"MA\": [\"212\"], \"MC\": [\"377\"], \"MD\": [\"373\"], \"ME\": [\"382\"], \"MF\": [\"590\"], \"MG\": [\"261\"], \"MH\": [\"692\"], \"MI\": [], \"MK\": [\"389\"], \"ML\": [\"223\"], \"MM\": [\"95\"], \"MN\": [\"976\"], \"MO\": [\"853\"], \"MP\": [\"1670\"], \"MQ\": [\"596\"], \"MR\": [\"222\"], \"MS\": [\"1664\"], \"MT\": [\"356\"], \"MU\": [\"230\"], \"MV\": [\"960\"], \"MW\": [\"265\"], \"MX\": [\"52\"], \"MY\": [\"60\"], \"MZ\": [\"258\"], \"NA\": [\"264\"], \"NC\": [\"687\"], \"NE\": [\"227\"], \"NF\": [\"672\"], \"NG\": [\"234\"], \"NH\": [], \"NI\": [\"505\"], \"NL\": [\"31\"], \"NO\": [\"47\"], \"NP\": [\"977\"], \"NQ\": [], \"NR\": [\"674\"], \"NT\": [], \"NU\": [\"683\"], \"NZ\": [\"64\"], \"OM\": [\"968\"], \"PA\": [\"507\"], \"PC\": [], \"PE\": [\"51\"], \"PF\": [\"689\"], \"PG\": [\"675\"], \"PH\": [\"63\"], \"PK\": [\"92\"], \"PL\": [\"48\"], \"PM\": [\"508\"], \"PN\": [\"872\"], \"PR\": [\"1787\", \"1939\"], \"PS\": [\"970\"], \"PT\": [\"351\"], \"PU\": [], \"PW\": [\"680\"], \"PY\": [\"595\"], \"PZ\": [], \"QA\": [\"974\"], \"RE\": [\"262\"], \"RH\": [], \"RO\": [\"40\"], \"RS\": [\"381\"], \"RU\": [\"7\", \"73\", \"74\", \"78\"], \"RW\": [\"250\"], \"SA\": [\"966\"], \"SB\": [\"677\"], \"SC\": [\"248\"], \"SD\": [\"249\"], \"SE\": [\"46\"], \"SG\": [\"65\"], \"SH\": [\"290\"], \"SI\": [\"386\"], \"SJ\": [\"47\"], \"SK\": [], \"SL\": [\"232\"], \"SM\": [\"378\"], \"SN\": [\"221\"], \"SO\": [\"252\"], \"SR\": [\"597\"], \"SS\": [\"211\"], \"ST\": [\"239\"], \"SU\": [], \"SV\": [\"503\"], \"SX\": [\"1721\"], \"SY\": [\"963\"], \"SZ\": [\"268\"], \"TA\": [\"290\"], \"TC\": [\"1649\"], \"TD\": [\"235\"], \"TF\": [], \"TG\": [\"228\"], \"TH\": [\"66\"], \"TJ\": [\"992\"], \"TK\": [\"690\"], \"TL\": [\"670\"], \"TM\": [\"993\"], \"TN\": [\"216\"], \"TO\": [\"676\"], \"TP\": [], \"TR\": [\"90\"], \"TT\": [\"1868\"], \"TV\": [\"688\"], \"TW\": [\"886\"], \"TZ\": [\"255\"], \"UA\": [\"380\"], \"UG\": [\"256\"], \"UK\": [], \"UM\": [\"1\"], \"US\": [\"1\"], \"UY\": [\"598\"], \"UZ\": [\"998\"], \"VA\": [\"379\", \"39\"], \"VC\": [\"1784\"], \"VD\": [], \"VE\": [\"58\"], \"VG\": [\"1284\"], \"VI\": [\"1340\"], \"VN\": [\"84\"], \"VU\": [\"678\"], \"WF\": [\"681\"], \"WK\": [], \"WS\": [\"685\"], \"XK\": [\"383\"], \"YD\": [], \"YE\": [\"967\"], \"YT\": [\"262\"], \"YU\": [], \"ZA\": [\"27\"], \"ZM\": [\"260\"], \"ZR\": [], \"ZW\": [\"263\"] };\n    module.exports.getPhoneCodesByCountryCode = function (countryCode) {\n        return countyCodeToPhoneCode[countryCode];\n    };\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/utils/country-data.js\n// module id = 1239\n// module chunks = 1\n\n//# sourceURL=webpack:///./src/js/utils/country-data.js?");

/***/ }),

/***/ 1240:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var Model = __webpack_require__(17);\n    var Moment = __webpack_require__(6);\n    var localization = __webpack_require__(20);\n    var settings = __webpack_require__(10);\n    var templates = __webpack_require__(42);\n    var validations = __webpack_require__(1205);\n    var Form = __webpack_require__(1206);\n\n    var RegistrationStepFinancialInformationBaseModel = __webpack_require__(1230);\n\n    var DEFAULT_EMPTY = 'EMPTY';\n\n    var lowScoreDisclaimerTemplate = settings.isRegistrationLowScoreDisclaimerEnabled() ? _.template('<div class=\"low-score-disclaimer\"><%=__(\"registration.step.disclaimer.financial_information\")%></div>') : _.template('');\n\n    var dependentFieldHandlers = {\n\n        inputOther: function inputOther(field) {\n            if (field.value() === \"OTHER\") {\n                field.disable();\n                this.enable();\n                this.focus();\n                return;\n            }\n\n            field.enable();\n            this.disable();\n        },\n\n        tradeKindNone: function tradeKindNone(field) {\n            this.$el.find('[value=tk_none]').removeAttr('disabled');\n            this.$el.find('[data-value=tk_none]').removeClass('hidden');\n            this.$el.find('[value=tk_my_own]').removeAttr('disabled');\n            this.$el.find('[data-value=tk_my_own]').removeClass('hidden');\n            this.$el.find('[value=tk_with_advice]').removeAttr('disabled');\n            this.$el.find('[data-value=tk_with_advice]').removeClass('hidden');\n\n            var formFields = field.options.form._fields;\n\n            if (Form.isFieldEquals(formFields[\"csb_experience\"], [DEFAULT_EMPTY]) || Form.isFieldEquals(formFields[\"fx_experience\"], [DEFAULT_EMPTY]) || Form.isFieldEquals(formFields[\"csb_volume_experience\"], [DEFAULT_EMPTY]) || Form.isFieldEquals(formFields[\"fx_volume_experience\"], [DEFAULT_EMPTY])) {\n\n                this.setDefaultValue();\n                this.disable();\n                return this.$el.addClass('select-disabled');\n            }\n            this.enable();\n            this.$el.removeClass('select-disabled');\n\n            if (!Form.isFieldEquals(formFields[\"csb_experience\"], [DEFAULT_EMPTY, \"ce_none\"]) || !Form.isFieldEquals(formFields[\"fx_experience\"], [DEFAULT_EMPTY, \"fe_none\"]) || !Form.isFieldEquals(formFields[\"csb_volume_experience\"], [DEFAULT_EMPTY, \"cve_none\"]) || !Form.isFieldEquals(formFields[\"fx_volume_experience\"], [DEFAULT_EMPTY, \"fve_none\"])) {\n\n                this.$el.find('[value=tk_none]').attr('disabled', 'disabled');\n                this.$el.find('[data-value=tk_none]').addClass('hidden');\n            }\n\n            if (Form.isFieldEquals(formFields[\"fx_volume_experience\"], [\"fve_none\"]) && Form.isFieldEquals(formFields[\"csb_volume_experience\"], [\"cve_none\"])) {\n                this.$el.find('[value=tk_my_own]').attr('disabled', 'disabled');\n                this.$el.find('[data-value=tk_my_own]').addClass('hidden');\n                this.$el.find('[value=tk_with_advice]').attr('disabled', 'disabled');\n                this.$el.find('[data-value=tk_with_advice]').addClass('hidden');\n            }\n        }\n\n    };\n\n    function countryCodeToOptions(countries) {\n        var options = _.pluck(countries, 'code').sort(function (a, b) {\n            return __('country.name.' + a).localeCompare(__('country.name.' + b));\n        });\n        options.unshift(\"EMPTY\");\n        return options;\n    }\n\n    module.exports = Model.extend({\n\n        getAllCountries: function getAllCountries() {\n            return this.get(\"allCountries\");\n        },\n\n        getAllCountryCodes: function getAllCountryCodes() {\n            return _.pluck(this.getAllCountries(), 'code');\n        },\n\n        getAllowedCountries: function getAllowedCountries() {\n            return this.get(\"allowedCountries\");\n        },\n\n        getCountriesPhoneCodes: function getCountriesPhoneCodes() {\n            return this.get(\"countriesPhoneCodes\");\n        },\n\n        getPhoneToCountry: function getPhoneToCountry() {\n            return this.get(\"phoneToCountry\");\n        },\n\n        getStepModels: function getStepModels() {\n            return {\n                \"financial_information\": new RegistrationStepFinancialInformationBaseModel()\n            };\n        },\n\n        getFormConfig: function getFormConfig() {\n\n            return {\n                // Personal Information Page:\n                firstName: {\n                    translationKey: \"first_name\",\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('first_name'),\n                            max_length: validations.maxLength(50, 'first_name')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                lastName: {\n                    translationKey: \"last_name\",\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('last_name'),\n                            max_length: validations.maxLength(50, 'last_name')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                phone: {\n                    translationKey: \"phone\",\n                    options: {\n                        countries: this.getCountriesPhoneCodes(),\n                        phoneToCountry: this.getPhoneToCountry()\n                    },\n                    template: templates.phoneBox,\n                    validation: {\n                        rules: {\n                            // TODO - localize\n                            not_empty: validations.notEmpty('phone'),\n                            numeric: validations.numeric('phone'),\n                            validateLength: function validateLength(data) {\n                                var min = 6;\n                                var max = 20;\n                                if (data.phone.length > max) {\n                                    return __('registration.phone.max', max);\n                                }\n                                if (data.phoneInput.length < min) {\n                                    return __('registration.phone.min', min);\n                                }\n                                if (_.isEmpty(data.phoneSelect)) {\n                                    return validations.notEmpty('phone');\n                                }\n                                return null;\n                            }\n                        },\n                        filters: []\n                    },\n                    disable: false\n                },\n                birthDate: {\n                    translationKey: \"date_of_birth\",\n                    // TODO - this could be moved to the date input view\n                    options: {\n                        minAge: 18,\n                        maxAge: 87,\n                        moment: Moment,\n                        splitByComma: localization.splitByComma\n                    },\n                    template: templates.dateBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('date_of_birth')\n                        },\n                        filters: []\n                    },\n                    disable: false\n                },\n                address: {\n                    translationKey: \"address\",\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('address'),\n                            max_length: validations.maxLength(50, 'address')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                zipCode: {\n                    translationKey: \"zip_code\",\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('zip_code'),\n                            max_length: validations.maxLength(50, 'zip_code')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                city: {\n                    translationKey: \"city\",\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('city')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                country: {\n                    translationKey: \"country\",\n                    translationGroupPrefix: 'country.name',\n                    options: countryCodeToOptions(this.getAllowedCountries()),\n                    template: templates.countriesSelectBox,\n                    validation: validations.selectNotEmpty('country'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                citizenship: {\n                    title: __(\"registration.field.label.citizenship\"),\n                    // EREZ _ THIS IS NOT A MISTAKE\n                    translationKey: \"country\",\n                    translationGroupPrefix: 'country.name',\n                    options: countryCodeToOptions(this.getAllCountries()),\n                    template: templates.countriesSelectBox,\n                    validation: validations.selectNotEmpty('citizenship'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n\n                // Financial Information Page:\n                employment_status: {\n                    translationKey: \"employment_status\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty('employment_status'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                profession: {\n                    title: __(\"reg.questionary.cysec.profession\"),\n                    translationKey: \"profession\",\n                    template: templates.selectBoxOverflowWidth,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: \"employment_status\",\n                        handler: function handler(field) {\n                            if (field.value() === \"EMPTY\") {\n                                this.disable();\n                                this.$el.addClass('select-disabled');\n                                return;\n                            }\n\n                            if (field.value() === \"es_employed\" || field.value() === \"es_self_employed\") {\n                                this.$el.removeClass('select-disabled');\n                                return this.enable();\n                            }\n\n                            this.setDefaultValue();\n                            this.disable();\n                            this.$el.addClass('select-disabled');\n                        }\n                    }],\n                    disable: 'select-disabled',\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                annual_income: {\n                    title: __(\"reg.questionary.cysec.annual_income\"),\n                    translationKey: \"annual_income\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                intend_invest: {\n                    title: __(\"reg.questionary.cysec.intend_invest\"),\n                    translationKey: \"intend_invest\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                trading_purpose: {\n                    title: __(\"reg.questionary.cysec.trading_purpose\"),\n                    translationKey: \"trading_purpose\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                trading_purpose_details: {\n                    title: __(\"reg.questionary.cysec.trading_purpose\"),\n                    translationKey: \"trading_purpose\",\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.industry_other')),\n                    options: {\n                        defaultValue: __('registration.field.label.industry_other')\n                    },\n                    dependent: [{\n                        name: \"trading_purpose\",\n                        handler: function handler(field) {\n                            if (field.value() === \"tp_other\") {\n                                // EREZ - Don't change disable state of field its changed in its handler\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n                                return;\n                            }\n\n                            // EREZ - Don't change disable state of field its changed in its handler\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'trading_purpose')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                savings_investments: {\n                    title: __(\"reg.questionary.cysec.savings_investments\"),\n                    translationKey: \"savings_investments\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                funds_source: {\n                    title: __(\"reg.questionary.cysec.funds_source\"),\n                    translationKey: \"funds_source\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                funds_source_details: {\n                    title: __(\"reg.questionary.cysec.funds_source\"),\n                    translationKey: \"trading_purpose\",\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.funds_source')),\n                    options: {\n                        defaultValue: __('registration.field.label.funds_source')\n                    },\n                    dependent: [{\n                        name: \"funds_source\",\n                        handler: function handler(field) {\n                            if (field.value() === \"fs_other\") {\n                                // EREZ - Don't change disable state of field its changed in its handler\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n                                return;\n                            }\n\n                            // EREZ - Don't change disable state of field its changed in its handler\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'funds_source')\n                    },\n                    disable: true\n                },\n                fatca: {\n                    translationKey: \"fatca\",\n                    options: [{\n                        value: 'NO',\n                        text: __('no')\n                    }, {\n                        value: 'YES',\n                        text: __('yes')\n                    }, {\n                        value: __('registration.field.fatca.link.href'),\n                        text: __('registration.field.label.fatca.learn_more')\n                    }],\n                    template: templates.fatcaBox,\n                    validation: validations.radioNotEmpty('fatca'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n\n                // Trading Experience Page:\n                education_level: {\n                    translationKey: \"education_level\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty('education_level'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                study_field: {\n                    title: __(\"registration.field.label.study_field\"),\n                    translationKey: \"study_field\",\n                    template: templates.selectBoxOverflowWidth,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: \"education_level\",\n                        handler: function handler(field) {\n                            if (['EMPTY', 'ed_no_edu', 'ed_prim_edu'].indexOf(field.value()) >= 0) {\n                                this.setDefaultValue();\n                                this.disable();\n                                return this.$el.addClass('select-disabled');\n                            }\n\n                            this.enable();\n                            return this.$el.removeClass('select-disabled');\n                        }\n                    }],\n                    disable: 'select-disabled',\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                study_field_details: {\n                    title: __(\"registration.field.label.study_field\"),\n                    translationKey: \"study_field_other\",\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.study_field_other')),\n                    options: {\n                        defaultValue: __('registration.field.label.study_field_other')\n                    },\n                    dependent: [{\n                        name: \"study_field\",\n                        handler: function handler(field) {\n                            if (field.value() === \"sf_other\") {\n                                field.disable();\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n                                return;\n                            }\n\n                            field.enable();\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }, {\n                        name: \"education_level\",\n                        handler: function handler(field) {\n                            if (this.isDisabled()) {\n                                return;\n                            }\n                            if (field.value() === 'ed_no_edu' || field.value() === 'ed_prim_edu') {\n                                this.disable();\n\n                                return;\n                            }\n\n                            this.enable();\n                            this.focus();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'study_field')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                fx_volume_experience: {\n                    title: __(\"reg.questionary.cysec.fx_volume_experience\"),\n                    translationKey: \"fx_volume_experience\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                csb_volume_experience: {\n                    title: __(\"reg.questionary.cysec.csb_volume_experience\"),\n                    translationKey: \"csb_volume_experience\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                fx_experience: {\n                    title: __(\"reg.questionary.cysec.fx_experience\"),\n                    translationKey: \"fx_experience\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                csb_experience: {\n                    title: __(\"reg.questionary.cysec.csb_experience\"),\n                    translationKey: \"csb_experience\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                trade_kind: {\n                    title: __(\"reg.questionary.cysec.trade_kind\"),\n                    translationKey: \"trade_kind\",\n                    template: templates.selectBoxOverflowWidth,\n                    validation: validations.selectNotEmpty(),\n                    disable: 'select-disabled',\n                    dependent: [{\n                        name: \"csb_experience\",\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }, {\n                        name: \"fx_experience\",\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }, {\n                        name: \"csb_volume_experience\",\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }, {\n                        name: \"fx_volume_experience\",\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }],\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                low_score_disclaimer: {\n                    title: '',\n                    translationKey: '',\n                    template: lowScoreDisclaimerTemplate,\n                    validation: {},\n                    disable: false,\n                    dependent: []\n                },\n\n                // Financial Knowledge Page:\n                termsAndConditions: {\n                    translationKey: \"terms_and_conditions\",\n                    options: {\n                        value: \"\",\n                        text: \"TRANS_OPTION_TEXT_KEY\",\n                        parseString: true\n                    },\n                    template: templates.checkBox,\n                    validation: {\n                        rules: {\n                            not_equals: [\"false\", __('registration.warning.this_field_is_required', __(\"registration.field.label.termsAndConditions\"))]\n                        },\n                        filters: []\n                    },\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                apple_drops: {\n                    title: __(\"reg.questionary.cysec.apple_drops\"),\n                    translationKey: \"apple_drops\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                facebook_buy_markets: {\n                    title: __(\"reg.questionary.cysec.facebook_buy_markets\"),\n                    translationKey: \"facebook_buy_markets\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                maximum_open_position: {\n                    title: __(\"reg.questionary.cysec.maximum_open_position\"),\n                    translationKey: \"maximum_open_position\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                trade_leverage: {\n                    title: __(\"reg.questionary.cysec.trade_leverage\"),\n                    translationKey: \"trade_leverage\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                cfd_trading: {\n                    title: __(\"reg.questionary.cysec.cfd_trading\"),\n                    translationKey: \"cfd_trading\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n\n                    /*\n                    industryDetails: {\n                        title: __(\"registration.field.label.industry\"),\n                        translationKey: \"industry_other\",\n                        template: templates.inputBox,\n                        validation: validations.inputNotEqual(__('registration.field.label.industry_other')),\n                        options: {\n                            defaultValue: __('registration.field.label.industry_other')\n                        },\n                        dependent: [{\n                            name: \"industry\",\n                            handler: function (field){\n                                if (field.value() === \"OTHER\") {\n                                    // EREZ - Don't change disable state of field its changed in its handler\n                                    field.$el.css('display', 'none');\n                                    this.enable();\n                                    this.focus();\n                                    return;\n                                }\n                                  // EREZ - Don't change disable state of field its changed in its handler\n                                field.$el.css('display', 'block');\n                                this.disable();\n                            }\n                        },{\n                            name: \"employmentStatus\",\n                            handler: function (field, form){\n                                if (this.isDisabled()){\n                                    return;\n                                }\n                                 if (field.value() !== \"SALARIED_EMPLOYEE\" && field.value() !== \"SELF_EMPLOYEE\"){\n                                    this.disable();\n                                    form.getField('industry').$el.css('display', 'block');\n                                     return;\n                                }\n                                 this.enable();\n                                this.focus();\n                            }\n                        }],\n                        events: {\n                            onblur: _.partial(Form.checkDependentFieldOnBlur, 'industry')\n                        },\n                        disable: true\n                    },\n                    sourceOfIncome: {\n                        translationKey: \"source_of_income\",\n                        template: templates.selectBox,\n                        validation: validations.selectNotEmpty('source_of_income'),\n                        dependent: [{\n                            name: \"employmentStatus\",\n                            handler: function (field){\n                                if (field.value() === \"EMPTY\"){\n                                    this.disable();\n                                    return this.$el.addClass('select-disabled');\n                                }\n                                 if (field.value() === \"SALARIED_EMPLOYEE\" || field.value() === \"SELF_EMPLOYEE\"){\n                                    this.setDefaultValue();\n                                    this.disable();\n                                    return this.$el.addClass('select-disabled');\n                                }\n                                 this.$el.removeClass('select-disabled');\n                                this.enable();\n                            }\n                        }],\n                        disable: true\n                    },\n                    sourceOfIncomeDetails: {\n                        title: __(\"registration.field.label.source_of_income\"),\n                        translationKey: \"source_of_income_other\",\n                        template: templates.inputBox,\n                        validation: validations.inputNotEqual(__('source_of_income_other')),\n                        options: {\n                            defaultValue: __('registration.field.label.source_of_income_other')\n                        },\n                        dependent: [{\n                            name: \"sourceOfIncome\",\n                            handler: function (field){\n                                if (field.value() === \"OTHER\") {\n                                    // EREZ - Don't change disable state of field its changed in its handler\n                                    field.$el.css('display', 'none');\n                                    this.enable();\n                                    this.focus();\n                                    return;\n                                }\n                                 // EREZ - Don't change disable state of field its changed in its handler\n                                field.$el.css('display', 'block');\n                                this.disable();\n                            }\n                        }, {\n                            name: \"employmentStatus\",\n                            handler: function (field, form){\n                                if (this.isDisabled()){\n                                    return;\n                                }\n                                 if (field.value() === \"SALARIED_EMPLOYEE\" || field.value() === \"SELF_EMPLOYEE\"){\n                                    this.disable();\n                                    // form.getField('sourceOfIncome').$el.css('display', 'block');\n                                    this.$el.addClass('input-disabled');\n                                     return;\n                                }\n                                 this.enable();\n                                this.focus();\n                            }\n                        }],\n                        events: {\n                            onblur: _.partial(Form.checkDependentFieldOnBlur, 'sourceOfIncome')\n                        },\n                        disable: true\n                    },\n                    grossIncome: {\n                        translationKey: \"gross_income\",\n                        template: templates.selectBox,\n                        validation: validations.selectNotEmpty('gross_income'),\n                        disable: false\n                    },\n                    netWorth: {\n                        translationKey: \"net_worth\",\n                        template: templates.selectBox,\n                        validation: validations.selectNotEmpty('net_worth'),\n                        disable: false\n                    },\n                    anticipatedTradingTurnover: {\n                        translationKey: \"account_turnover\",\n                        template: templates.selectBox,\n                        validation: validations.selectNotEmpty('account_turnover'),\n                        disable: false\n                    },\n                    registrationReason: {\n                        translationKey: \"purpose_and_reason\",\n                        template: templates.selectBox,\n                        validation: validations.selectNotEmpty('purpose_and_reason'),\n                        disable: false\n                    },\n                    registrationReasonDetails: {\n                        title: __(\"registration.field.label.purpose_and_reason\"),\n                        translationKey: \"purpose_and_reason_other\",\n                        template: templates.inputBox,\n                        validation: validations.inputNotEqual(__('purpose_and_reason_other')),\n                        options: {\n                            defaultValue: __('registration.field.label.purpose_and_reason_other')\n                        },\n                        dependent: [{\n                            name: \"registrationReason\",\n                            handler: dependentFieldHandlers.inputOther\n                        }],\n                        disable: true\n                    },\n                    natureOfTransactions: {\n                        translationKey: \"nature_of_transactions\",\n                        template: templates.selectBox,\n                        validation: validations.selectNotEmpty('nature_of_transactions'),\n                        disable: false\n                    },\n                    natureOfTransactionsDetails: {\n                        title: __(\"registration.field.label.nature_of_transactions\"),\n                        translationKey: \"nature_of_transactions_other\",\n                        template: templates.inputBox,\n                        validation: {},\n                        options: {\n                            defaultValue: __('nature_of_transactions_other')\n                        },\n                        dependent: [{\n                            name: \"natureOfTransactions\",\n                            handler: dependentFieldHandlers.inputOther\n                        }],\n                        disable: true\n                    },\n                    originOfFunds: {\n                        translationKey: \"originOfFunds\",\n                        translationGroupPrefix: \"registration.form.label\",\n                        template: templates.multiCheckBox,\n                        validation: validations.multiCheckBoxNotEmpty(),\n                        disable: false\n                    },\n                    allowMarketingEmails: {\n                        title: dictionary.getLabel(\".address\"),\n                        options: [{\n                            value: \"\",\n                            text: \"TRANS_OPTION_TEXT_KEY\"\n                        }],\n                        template: templates.selectBox,\n                        validation: {},\n                        dependent: \"ID_TO_DEPENDENT ITEM\"\n                    },\n                    anticipatedTradingTurnover: {\n                        translationKey: \"account_turnover\",\n                        template: templates.selectBox,\n                        validation: validations.selectNotEmpty('account_turnover'),\n                        disable: false\n                    },\n                    tradingExperience: {\n                        translationKey: \"forex_cfds_trading_experience\",\n                        template: templates.selectBox,\n                        validation: validations.selectNotEmpty(),\n                        disable: false\n                    },\n                    tradingFrequency: {\n                        translationKey: \"forex_cfds_trading_frequency\",\n                        template: templates.selectBox,\n                        validation: validations.selectNotEmpty(),\n                        dependent: [{\n                            name: \"tradingExperience\",\n                            handler: function (field){\n                                if (field.value() == 'EMPTY' || field.value() == 'NONE'){\n                                    this.disable();\n                                    this.setDefaultValue();\n                                    this.$el.addClass('select-disabled');\n                                    return;\n                                }\n                                 this.$el.removeClass('select-disabled');\n                                this.enable();\n                            }\n                        }],\n                        disable: true\n                    },\n                    tradingVolume: {\n                        translationKey: \"trading_volume_of_forex_cfds_transactions\",\n                        template: templates.selectBox,\n                        validation: validations.selectNotEmpty(),\n                        dependent: [{\n                            name: \"tradingExperience\",\n                            handler: function (field){\n                                if (field.value() == 'EMPTY' || field.value() == 'NONE'){\n                                    this.disable();\n                                    this.setDefaultValue();\n                                    this.$el.addClass('select-disabled');\n                                    return;\n                                }\n                                 this.$el.removeClass('select-disabled');\n                                this.enable();\n                            }\n                        }],\n                        disable: true\n                    },\n                    typesOfService: {\n                        translationKey: \"typesOfService\",\n                        translationGroupPrefix: 'registration.form.label',\n                        template: templates.multiCheckBox,\n                        validation: validations.multiCheckBoxNotEmpty(),\n                        disable: false,\n                        events: {\n                            click: function (e) {\n                                if (e.currentTarget.value === 'tsfNoneAbove'){\n                                    _.each(this.$el.find('input[type=checkbox]'), function (checkbox){\n                                        if(checkbox.value !== 'tsfNoneAbove'){\n                                            checkbox.checked = false;\n                                        }\n                                    });\n                                 } else {\n                                    this.$el.find('input[value=tsfNoneAbove]')[0].checked = false;\n                                }\n                            }\n                        }\n                    },\n                    financialExperience: {\n                        translationKey: \"financial_experience\",\n                        // TODO - Need to change value to server expected\n                        options: [{\n                            value: 'false',\n                            text: 'No'\n                        }, {\n                            value: 'true',\n                            text: 'Yes'\n                        }],\n                        template: templates.financialExpBox,\n                        validation: validations.radioNotEmpty(),\n                        disable: false\n                    }\n                    */\n                } };\n        }\n\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/registration.form.config.base.js\n// module id = 1240\n// module chunks = 1\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/registration.form.config.base.js?");

/***/ }),

/***/ 1241:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var Model = __webpack_require__(17);\n    var Moment = __webpack_require__(6);\n    var localization = __webpack_require__(20);\n    var settings = __webpack_require__(10);\n    var templates = __webpack_require__(42);\n    var validations = __webpack_require__(1205);\n    var user = __webpack_require__(7);\n    var Form = __webpack_require__(1206);\n\n    var DEFAULT_EMPTY = 'EMPTY';\n\n    var lowScoreDisclaimerTemplate = settings.isRegistrationLowScoreDisclaimerEnabled() ? _.template('<div class=\"low-score-disclaimer\"><%=__(\"registration.step.disclaimer.financial_information\")%></div>') : _.template('');\n\n    var dependentFieldHandlers = {\n\n        tradeKindNone: function tradeKindNone(field) {\n            this.$el.find('[value=tk_none]').removeAttr('disabled');\n            this.$el.find('[data-value=tk_none]').removeClass('hidden');\n            this.$el.find('[value=tk_my_own]').removeAttr('disabled');\n            this.$el.find('[data-value=tk_my_own]').removeClass('hidden');\n            this.$el.find('[value=tk_with_advice]').removeAttr('disabled');\n            this.$el.find('[data-value=tk_with_advice]').removeClass('hidden');\n\n            var formFields = field.options.form._fields;\n\n            if (Form.isFieldEquals(formFields[\"csb_experience\"], [DEFAULT_EMPTY]) || Form.isFieldEquals(formFields[\"fx_experience\"], [DEFAULT_EMPTY]) || Form.isFieldEquals(formFields[\"csb_volume_experience\"], [DEFAULT_EMPTY]) || Form.isFieldEquals(formFields[\"fx_volume_experience\"], [DEFAULT_EMPTY])) {\n\n                this.setDefaultValue();\n                this.disable();\n                return this.$el.addClass('select-disabled');\n            }\n            this.enable();\n            this.$el.removeClass('select-disabled');\n\n            if (!Form.isFieldEquals(formFields[\"csb_experience\"], [DEFAULT_EMPTY, \"ce_none\"]) || !Form.isFieldEquals(formFields[\"fx_experience\"], [DEFAULT_EMPTY, \"fe_none\"]) || !Form.isFieldEquals(formFields[\"csb_volume_experience\"], [DEFAULT_EMPTY, \"cve_none\"]) || !Form.isFieldEquals(formFields[\"fx_volume_experience\"], [DEFAULT_EMPTY, \"fve_none\"])) {\n\n                this.$el.find('[value=tk_none]').attr('disabled', 'disabled');\n                this.$el.find('[data-value=tk_none]').addClass('hidden');\n            }\n\n            if (Form.isFieldEquals(formFields[\"fx_volume_experience\"], [\"fve_none\"]) && Form.isFieldEquals(formFields[\"csb_volume_experience\"], [\"cve_none\"])) {\n                this.$el.find('[value=tk_my_own]').attr('disabled', 'disabled');\n                this.$el.find('[data-value=tk_my_own]').addClass('hidden');\n                this.$el.find('[value=tk_with_advice]').attr('disabled', 'disabled');\n                this.$el.find('[data-value=tk_with_advice]').addClass('hidden');\n            }\n        },\n\n        showHaveSecondTinCountry: function showHaveSecondTinCountry(field) {\n            var haveTin = this.getDependentFieldByName(\"have_tin\");\n            var haveSecondTin = this.getDependentFieldByName(\"have_second_tin\");\n\n            if (Form.isFieldEquals(haveTin, [\"have_tin_yes\"]) && Form.isFieldEquals(haveSecondTin, [\"have_second_tin_yes\"])) {\n                this.enable();\n                return;\n            }\n\n            this.setDefaultValueWithFireChangeEvent();\n            this.validate();\n            this.disable();\n        },\n\n        updateHaveSecondTinAfterChangeHaveTin: function updateHaveSecondTinAfterChangeHaveTin(field) {\n            var haveTin = this.getDependentFieldByName(\"have_tin\");\n\n            if (Form.isFieldEquals(haveTin, [\"have_tin_yes\"])) {\n                this.enable();\n                return;\n            }\n\n            this.disable();\n        },\n\n        showTinAbsenceReason: function showTinAbsenceReason(field) {\n            var haveTin = this.getDependentFieldByName(\"have_tin\");\n\n            if (Form.isFieldEquals(haveTin, [\"have_tin_no\"])) {\n                this.enable();\n                return;\n            }\n\n            this.disable();\n        },\n\n        updateTinAbsenceReasonDetailsAfterChangeTinAbsenceReason: function updateTinAbsenceReasonDetailsAfterChangeTinAbsenceReason(field) {\n            var haveTin = this.getDependentFieldByName(\"have_tin\");\n            var tinAbsenceReason = this.getDependentFieldByName(\"tin_absence_reason\");\n\n            if (Form.isFieldEquals(haveTin, [\"have_tin_no\"]) && Form.isFieldEquals(tinAbsenceReason, [\"tin_absence_reason_other\"])) {\n                tinAbsenceReason.disable();\n                this.enable();\n                this.$el.css('display', 'block');\n                this.focus();\n                return;\n            }\n\n            if (Form.isFieldEquals(haveTin, [\"have_tin_no\"])) {\n                tinAbsenceReason.enable();\n            }\n            this.$el.css('display', 'none');\n        },\n\n        updateTinAbsenceReasonDetailsAfterChangeHaveTin: function updateTinAbsenceReasonDetailsAfterChangeHaveTin(field) {\n            var haveTin = this.getDependentFieldByName(\"have_tin\");\n            var tinAbsenceReason = this.getDependentFieldByName(\"tin_absence_reason\");\n\n            if (!Form.isFieldEquals(haveTin, [\"have_tin_no\"])) {\n                this.disable();\n                this.setDefaultValueWithFireChangeEvent();\n                tinAbsenceReason.setDefaultValueWithFireChangeEvent();\n                this.$el.css('display', 'none');\n                return;\n            }\n\n            if (Form.isFieldEquals(tinAbsenceReason, [\"tin_absence_reason_other\"])) {\n                tinAbsenceReason.disable();\n                this.enable();\n                this.$el.css('display', 'block');\n            }\n        },\n\n        updateHaveSecondTinCountrySource: function updateHaveSecondTinCountrySource(countryCodes, field) {\n            var _this = this;\n\n            countryCodes.forEach(function (code) {\n                _this.$el.find('[value=\"' + code + '\"]').removeAttr('disabled');\n                _this.$el.find('[data-value=\"' + code + '\"]').removeClass('hidden');\n            });\n\n            var country = field.getValue().toLowerCase();\n            var tinCountry = this.getValue();\n\n            this.$el.find('[value=\"' + country + '\"]').attr('disabled', 'disabled');\n            this.$el.find('[data-value=\"' + country + '\"]').addClass('hidden');\n\n            if (tinCountry === country) {\n                this.setDefaultValueWithFireChangeEvent();\n            }\n        },\n\n        activateWorkCountriesOnlyIfEmployed: function activateWorkCountriesOnlyIfEmployed(field) {\n            if (Form.isFieldEquals(field, [\"es_employed\", \"es_self_employed\"])) {\n                var workCountries = this.getValue();\n                if (_.isEmpty(workCountries) || workCountries.length === 0 || workCountries[0] === DEFAULT_EMPTY) {\n                    this.setValue(user.getCountry().toLowerCase());\n                }\n\n                this.enable();\n                this.$el.removeClass('select-disabled');\n                return;\n            }\n\n            this.disable();\n            this.setDefaultValueWithFireChangeEvent();\n            this.$el.addClass('select-disabled');\n        },\n\n        activateOnlyIfEmployed: function activateOnlyIfEmployed(field) {\n            if (Form.isFieldEquals(field, [\"es_employed\", \"es_self_employed\"])) {\n                this.enable();\n                this.$el.removeClass('select-disabled');\n                return;\n            }\n\n            this.disable();\n            this.setDefaultValueWithFireChangeEvent();\n            this.$el.addClass('select-disabled');\n        }\n\n    };\n\n    function countriesToOptions(countries) {\n        var options = _.pluck(countries, 'code').sort(function (a, b) {\n            return __('country.name.' + a).localeCompare(__('country.name.' + b));\n        });\n        options.unshift(\"EMPTY\");\n        return options;\n    }\n\n    function lowerCaseOptions(options) {\n        return _.map(options, function (o) {\n            return o.toLowerCase();\n        });\n    }\n\n    module.exports = Model.extend({\n\n        getAllCountries: function getAllCountries() {\n            return this.get(\"allCountries\");\n        },\n\n        getAllowedCountries: function getAllowedCountries() {\n            return this.get(\"allowedCountries\");\n        },\n\n        getAllowedCountryCodes: function getAllowedCountryCodes() {\n            return _.pluck(this.getAllowedCountries(), 'code');\n        },\n\n        getSortedAllowedCountryCodes: function getSortedAllowedCountryCodes() {\n            return this.getAllowedCountryCodes().sort(function (a, b) {\n                return __('country.name.' + a).localeCompare(__('country.name.' + b));\n            });\n        },\n\n        getCountryCodes: function getCountryCodes() {\n            return this.getSortedAllowedCountryCodes().map(function (code) {\n                return code.toLowerCase();\n            });\n        },\n\n        getCountriesPhoneCodes: function getCountriesPhoneCodes() {\n            return this.get(\"countriesPhoneCodes\");\n        },\n\n        getPhoneToCountry: function getPhoneToCountry() {\n            return this.get(\"phoneToCountry\");\n        },\n\n        getStepModels: function getStepModels() {\n            return {};\n        },\n\n        getFormConfig: function getFormConfig() {\n\n            return {\n                // First Page:\n                firstName: {\n                    translationKey: \"first_name\",\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('first_name'),\n                            max_length: validations.maxLength(50, 'first_name')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                lastName: {\n                    translationKey: \"last_name\",\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('last_name'),\n                            max_length: validations.maxLength(50, 'last_name')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                phone: {\n                    translationKey: \"phone\",\n                    options: {\n                        countries: this.getCountriesPhoneCodes(),\n                        phoneToCountry: this.getPhoneToCountry()\n                    },\n                    template: templates.phoneBox,\n                    validation: {\n                        rules: {\n                            // TODO - localize\n                            not_empty: validations.notEmpty('phone'),\n                            numeric: validations.numeric('phone'),\n                            validateLength: function validateLength(data) {\n                                var min = 6;\n                                var max = 20;\n                                if (data.phone.length > max) {\n                                    return __('registration.phone.max', max);\n                                }\n                                if (data.phoneInput.length < min) {\n                                    return __('registration.phone.min', min);\n                                }\n                                if (_.isEmpty(data.phoneSelect)) {\n                                    return validations.notEmpty('phone');\n                                }\n                                return null;\n                            }\n                        },\n                        filters: []\n                    },\n                    disable: false\n                },\n                birthDate: {\n                    translationKey: \"date_of_birth\",\n                    // TODO - this could be moved to the date input view\n                    options: {\n                        minAge: 18,\n                        maxAge: 87,\n                        moment: Moment,\n                        splitByComma: localization.splitByComma\n                    },\n                    template: templates.dateBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('date_of_birth')\n                        },\n                        filters: []\n                    },\n                    disable: false\n                },\n                address: {\n                    translationKey: \"address\",\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('address'),\n                            max_length: validations.maxLength(50, 'address')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                zipCode: {\n                    translationKey: \"zip_code\",\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('zip_code'),\n                            max_length: validations.maxLength(50, 'zip_code')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                city: {\n                    translationKey: \"city\",\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('city')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                country: {\n                    translationKey: \"country\",\n                    translationGroupPrefix: 'country.name',\n                    options: countriesToOptions(this.getAllowedCountries()),\n                    template: templates.countriesSelectBox,\n                    validation: validations.countrySelectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                citizenship: {\n                    title: __(\"registration.field.label.citizenship\"),\n                    translationKey: \"country\",\n                    translationGroupPrefix: 'country.name',\n                    options: countriesToOptions(this.getAllCountries()),\n                    template: templates.countriesSelectBox,\n                    validation: validations.countrySelectNotEmpty('citizenship'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n\n                have_tin: {\n                    title: __(\"reg.questionary.cysec.have_tin\"),\n                    translationKey: \"have_tin\",\n                    link: {\n                        href: __('reg.questionary.cysec.have_tin.link.href'),\n                        text: __('reg.questionary.cysec.have_tin.learn_more')\n                    },\n                    options: [{ value: 'have_tin_no', text: __('no') }, { value: 'have_tin_yes', text: __('yes') }],\n                    details: {\n                        option: 'have_tin_yes',\n                        placeholder: __('reg.questionary.cysec.have_tin.tin'),\n                        max_length: 50\n                    },\n                    template: templates.yesNoDetails,\n                    disable: false\n                },\n                have_second_tin: {\n                    title: __(\"reg.questionary.cysec.have_second_tin\"),\n                    translationKey: \"have_second_tin\",\n                    options: [{ value: 'have_second_tin_no', text: __('no') }, { value: 'have_second_tin_yes', text: __('yes') }],\n                    details: {\n                        option: 'have_second_tin_yes',\n                        placeholder: __('reg.questionary.cysec.have_second_tin.tin'),\n                        max_length: 50\n                    },\n                    template: templates.yesNoDetails,\n                    dependent: [{\n                        name: \"have_tin\",\n                        handler: dependentFieldHandlers.updateHaveSecondTinAfterChangeHaveTin\n                    }],\n                    disable: true\n                },\n                have_second_tin_country: {\n                    title: __(\"reg.questionary.cysec.have_second_tin_country\"),\n                    translationKey: \"have_second_tin_country\",\n                    translationGroupPrefix: 'country.name',\n                    options: this.getCountryCodes(),\n                    template: templates.countriesSelectBox,\n                    validation: validations.countrySelectNotEmpty(),\n                    dependent: [{\n                        name: \"have_second_tin\",\n                        handler: dependentFieldHandlers.showHaveSecondTinCountry\n                    }, {\n                        name: \"have_tin\",\n                        handler: dependentFieldHandlers.showHaveSecondTinCountry\n                    }, {\n                        name: \"country\",\n                        handler: _.partial(dependentFieldHandlers.updateHaveSecondTinCountrySource, this.getCountryCodes())\n                    }],\n                    disable: true,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                tin_absence_reason: {\n                    title: __(\"reg.questionary.cysec.tin_absence_reason\"),\n                    translationKey: \"tin_absence_reason\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: \"have_tin\",\n                        handler: dependentFieldHandlers.showTinAbsenceReason\n                    }],\n                    disable: true,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                tin_absence_reason_details: {\n                    title: __(\"reg.questionary.cysec.tin_absence_reason\"),\n                    translationKey: \"tin_absence_reason\",\n                    template: templates.inputBox,\n                    dependent: [{\n                        name: \"tin_absence_reason\",\n                        handler: dependentFieldHandlers.updateTinAbsenceReasonDetailsAfterChangeTinAbsenceReason\n                    }, {\n                        name: \"have_tin\",\n                        handler: dependentFieldHandlers.updateTinAbsenceReasonDetailsAfterChangeHaveTin\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'tin_absence_reason')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n\n                us_resident: {\n                    title: __(\"reg.questionary.cysec.us_resident\"),\n                    translationKey: \"us_resident\",\n                    link: {\n                        href: __('reg.questionary.cysec.us_resident.link.href'),\n                        text: __('reg.questionary.cysec.us_resident.learn_more')\n                    },\n                    options: [{ value: 'ur_no', text: __('no') }, { value: 'ur_yes', text: __('yes') }],\n                    details: {\n                        option: 'ur_yes',\n                        placeholder: __('reg.questionary.cysec.us_resident.tin'),\n                        max_length: 50\n                    },\n                    template: templates.yesNoDetails,\n                    disable: false\n                },\n                pep: {\n                    title: __(\"reg.questionary.cysec.pep\"),\n                    translationKey: \"pep\",\n                    link: {\n                        href: __('reg.questionary.cysec.pep.link.href'),\n                        text: __('reg.questionary.cysec.pep.click_here')\n                    },\n                    options: [{ value: 'pep_no', text: __('no') }, { value: 'pep_yes', text: __('yes') }],\n                    details: {\n                        option: 'pep_yes',\n                        placeholder: __('reg.questionary.cysec.pep.provide'),\n                        max_length: 1000\n                    },\n                    template: templates.yesNoDetails,\n                    disable: false\n                },\n\n                // Second Page:\n                employment_status: {\n                    translationKey: \"employment_status\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty('employment_status'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                trading_purpose: {\n                    title: __(\"reg.questionary.cysec.trading_purpose\"),\n                    translationKey: \"trading_purpose\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                trading_purpose_details: {\n                    title: __(\"reg.questionary.cysec.trading_purpose\"),\n                    translationKey: \"trading_purpose\",\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.industry_other')),\n                    options: {\n                        defaultValue: __('registration.field.label.industry_other')\n                    },\n                    dependent: [{\n                        name: \"trading_purpose\",\n                        handler: function handler(field) {\n                            if (field.value() === \"tp_other\") {\n                                // EREZ - Don't change disable state of field its changed in its handler\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n                                return;\n                            }\n                            // EREZ - Don't change disable state of field its changed in its handler\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'trading_purpose')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                anticipated_turnover: {\n                    title: __(\"reg.questionary.cysec.anticipated_turnover\"),\n                    translationKey: \"anticipated_turnover\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                anticipated_turnover_details: {\n                    title: __(\"reg.questionary.cysec.anticipated_turnover\"),\n                    translationKey: \"anticipated_turnover\",\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            max_length: validations.maxLength(50, 'anticipated_turnover_details')\n                        },\n                        filters: ['string']\n                    },\n                    dependent: [{\n                        name: \"anticipated_turnover\",\n                        handler: function handler(field) {\n                            if (field.value() === \"at_o_1000000\") {\n                                field.disable();\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n                                return;\n                            }\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'anticipated_turnover')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                transactions_nature: {\n                    title: __(\"reg.questionary.cysec.transactions_nature\"),\n                    translationKey: \"transactions_nature\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                transactions_nature_details: {\n                    title: __(\"reg.questionary.cysec.transactions_nature\"),\n                    translationKey: \"transactions_nature\",\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.tn_other')),\n                    options: {\n                        defaultValue: __('registration.field.label.tn_other')\n                    },\n                    dependent: [{\n                        name: \"transactions_nature\",\n                        handler: function handler(field) {\n                            if (field.value() === \"tn_other\") {\n                                field.disable();\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n                                return;\n                            }\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'transactions_nature')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                industry: {\n                    title: __(\"reg.questionary.cysec.industry\"),\n                    translationKey: \"industry\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: \"employment_status\",\n                        handler: dependentFieldHandlers.activateOnlyIfEmployed\n                    }],\n                    disable: 'select-disabled',\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                industry_details: {\n                    title: __(\"reg.questionary.cysec.industry\"),\n                    translationKey: \"industry\",\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.i_other')),\n                    dependent: [{\n                        name: \"industry\",\n                        handler: function handler(field) {\n                            if (field.value() === \"i_other\") {\n                                field.disable();\n                                field.$el.css('visibility', 'hidden');\n                                this.enable();\n                                this.focus();\n                                return;\n                            }\n                            field.$el.css('visibility', 'visible');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'industry')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                work_countries: {\n                    title: __(\"reg.questionary.cysec.work_countries\"),\n                    translationKey: \"work_countries\",\n                    translationGroupPrefix: 'country.name',\n                    template: templates.multiSelect,\n                    validation: validations.multiSelectNotEmpty(),\n                    options: lowerCaseOptions(countriesToOptions(this.getAllCountries())),\n                    dependent: [{\n                        name: \"employment_status\",\n                        handler: dependentFieldHandlers.activateWorkCountriesOnlyIfEmployed\n                    }],\n                    disable: 'select-disabled'\n                },\n                work_position: {\n                    title: __(\"reg.questionary.cysec.work_position\"),\n                    translationKey: \"work_position\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: \"employment_status\",\n                        handler: dependentFieldHandlers.activateOnlyIfEmployed\n                    }],\n                    disable: 'select-disabled',\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                work_position_details: {\n                    title: __(\"reg.questionary.cysec.work_position\"),\n                    translationKey: \"work_position\",\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.work_position_other')),\n                    dependent: [{\n                        name: \"work_position\",\n                        handler: function handler(field) {\n                            if (field.value() === \"work_position_other\") {\n                                field.disable();\n                                field.$el.css('visibility', 'hidden');\n                                this.enable();\n                                this.focus();\n                                return;\n                            }\n                            field.$el.css('visibility', 'visible');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'work_position')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                source_of_income: {\n                    title: __(\"reg.questionary.cysec.source_of_income\"),\n                    translationKey: \"source_of_income\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                source_of_income_details: {\n                    title: __(\"reg.questionary.cysec.source_of_income\"),\n                    translationKey: \"source_of_income\",\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.so_other')),\n                    options: {\n                        defaultValue: __('registration.field.label.so_other')\n                    },\n                    dependent: [{\n                        name: \"source_of_income\",\n                        handler: function handler(field) {\n                            if (field.value() === \"so_other\") {\n                                field.disable();\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n                                return;\n                            }\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'source_of_income')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                estimated_gross_income: {\n                    title: __(\"reg.questionary.cysec.estimated_gross_income\"),\n                    translationKey: \"estimated_gross_income\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                estimated_gross_income_details: {\n                    title: __(\"reg.questionary.cysec.estimated_gross_income\"),\n                    translationKey: \"estimated_gross_income\",\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.egi_o_250000')),\n                    options: {\n                        defaultValue: __('registration.field.label.egi_o_250000')\n                    },\n                    dependent: [{\n                        name: \"estimated_gross_income\",\n                        handler: function handler(field) {\n                            if (field.value() === \"egi_o_250000\") {\n                                field.disable();\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n                                return;\n                            }\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'estimated_gross_income')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                net_worth: {\n                    title: __(\"reg.questionary.cysec.net_worth\"),\n                    translationKey: \"net_worth\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                net_worth_details: {\n                    title: __(\"reg.questionary.cysec.net_worth\"),\n                    translationKey: \"net_worth\",\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.nw_o_1000000')),\n                    options: {\n                        defaultValue: __('registration.field.label.nw_o_1000000')\n                    },\n                    dependent: [{\n                        name: \"net_worth\",\n                        handler: function handler(field) {\n                            if (field.value() === \"nw_o_1000000\") {\n                                field.disable();\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n                                return;\n                            }\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'net_worth')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                orin_of_funds: {\n                    title: __(\"reg.questionary.cysec.orin_of_funds\"),\n                    translationKey: \"orin_of_funds\",\n                    translationGroupPrefix: 'reg.questionary.cysec.orin_of_funds',\n                    template: templates.multiCheckBox,\n                    validation: validations.multiCheckBoxNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n\n                // Third Page:\n                education_level: {\n                    translationKey: \"education_level\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty('education_level'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                study_field: {\n                    title: __(\"registration.field.label.study_field\"),\n                    translationKey: \"study_field\",\n                    template: templates.selectBoxOverflowWidth,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: \"education_level\",\n                        handler: function handler(field) {\n                            if (['EMPTY', 'ed_no_edu', 'ed_prim_edu'].indexOf(field.value()) >= 0) {\n                                this.setDefaultValue();\n                                this.disable();\n                                return this.$el.addClass('select-disabled');\n                            }\n\n                            this.enable();\n                            return this.$el.removeClass('select-disabled');\n                        }\n                    }],\n                    disable: 'select-disabled',\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                study_field_details: {\n                    title: __(\"registration.field.label.study_field\"),\n                    translationKey: \"study_field_other\",\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.study_field_other')),\n                    options: {\n                        defaultValue: __('registration.field.label.study_field_other')\n                    },\n                    dependent: [{\n                        name: \"study_field\",\n                        handler: function handler(field) {\n                            if (field.value() === \"sf_other\") {\n                                field.disable();\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n                                return;\n                            }\n\n                            field.enable();\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }, {\n                        name: \"education_level\",\n                        handler: function handler(field) {\n                            if (this.isDisabled()) {\n                                return;\n                            }\n                            if (field.value() === 'ed_no_edu' || field.value() === 'ed_prim_edu') {\n                                this.disable();\n\n                                return;\n                            }\n\n                            this.enable();\n                            this.focus();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'study_field')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                fx_volume_experience: {\n                    title: __(\"reg.questionary.cysec.fx_volume_experience\"),\n                    translationKey: \"fx_volume_experience\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                csb_volume_experience: {\n                    title: __(\"reg.questionary.cysec.csb_volume_experience\"),\n                    translationKey: \"csb_volume_experience\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                fx_experience: {\n                    title: __(\"reg.questionary.cysec.fx_experience\"),\n                    translationKey: \"fx_experience\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                csb_experience: {\n                    title: __(\"reg.questionary.cysec.csb_experience\"),\n                    translationKey: \"csb_experience\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                trade_kind: {\n                    title: __(\"reg.questionary.cysec.trade_kind\"),\n                    translationKey: \"trade_kind\",\n                    template: templates.selectBoxOverflowWidth,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    dependent: [{\n                        name: \"csb_experience\",\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }, {\n                        name: \"fx_experience\",\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }, {\n                        name: \"csb_volume_experience\",\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }, {\n                        name: \"fx_volume_experience\",\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }],\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                low_score_disclaimer: {\n                    title: '',\n                    translationKey: '',\n                    template: lowScoreDisclaimerTemplate,\n                    validation: {},\n                    disable: false,\n                    dependent: []\n                },\n\n                // Forth Page:\n                termsAndConditions: {\n                    translationKey: \"terms_and_conditions\",\n                    options: {\n                        value: \"\",\n                        text: \"TRANS_OPTION_TEXT_KEY\",\n                        parseString: true\n                    },\n                    template: templates.checkBox,\n                    validation: {\n                        rules: {\n                            not_equals: [\"false\", __('registration.warning.this_field_is_required', __(\"registration.field.label.termsAndConditions\"))]\n                        },\n                        filters: []\n                    },\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                quiz_1: {\n                    title: __(\"reg.questionary.cysec.quiz_1\"),\n                    translationKey: \"quiz_1\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                quiz_2: {\n                    title: __(\"reg.questionary.cysec.quiz_2\"),\n                    translationKey: \"quiz_2\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                quiz_3: {\n                    title: __(\"reg.questionary.cysec.quiz_3\"),\n                    translationKey: \"quiz_3\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                quiz_4: {\n                    title: __(\"reg.questionary.cysec.quiz_4\"),\n                    translationKey: \"quiz_4\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                quiz_5: {\n                    title: __(\"reg.questionary.cysec.quiz_5\"),\n                    translationKey: \"quiz_5\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                }\n            };\n        }\n\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/registration.form.config.trade.v2.js\n// module id = 1241\n// module chunks = 1\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/registration.form.config.trade.v2.js?");

/***/ }),

/***/ 1242:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var Model = __webpack_require__(17);\n    var Moment = __webpack_require__(6);\n    var localization = __webpack_require__(20);\n    var settings = __webpack_require__(10);\n    var templates = __webpack_require__(42);\n    var validations = __webpack_require__(1205);\n    var tinValidations = __webpack_require__(1231);\n    var user = __webpack_require__(7);\n    var Form = __webpack_require__(1206);\n\n    var RegistrationStepTaxInformationMarketsModel = __webpack_require__(1243);\n\n    var DEFAULT_EMPTY = 'EMPTY';\n\n    var lowScoreDisclaimerTemplate = settings.isRegistrationLowScoreDisclaimerEnabled() ? _.template('<div class=\"low-score-disclaimer\"><%=__(\"registration.step.disclaimer.financial_information\")%></div>') : _.template('');\n\n    function userHasItalianNationalCountryIdentifier() {\n        return user.getCountry() === \"IT\" && user.getCitizenship() === \"IT\" && !_.isEmpty(user.getNationalCountryIdentifier());\n    }\n\n    var dependentFieldHandlers = {\n\n        tradeKindNone: function tradeKindNone(field) {\n            this.$el.find('[value=tk_none]').removeAttr('disabled');\n            this.$el.find('[data-value=tk_none]').removeClass('hidden');\n            this.$el.find('[value=tk_my_own]').removeAttr('disabled');\n            this.$el.find('[data-value=tk_my_own]').removeClass('hidden');\n            this.$el.find('[value=tk_with_advice]').removeAttr('disabled');\n            this.$el.find('[data-value=tk_with_advice]').removeClass('hidden');\n\n            var formFields = field.options.form._fields;\n\n            if (Form.isFieldEquals(formFields[\"csb_experience\"], [DEFAULT_EMPTY]) || Form.isFieldEquals(formFields[\"fx_experience\"], [DEFAULT_EMPTY]) || Form.isFieldEquals(formFields[\"csb_volume_experience\"], [DEFAULT_EMPTY]) || Form.isFieldEquals(formFields[\"fx_volume_experience\"], [DEFAULT_EMPTY])) {\n\n                this.setDefaultValue();\n                this.disable();\n                return this.$el.addClass('select-disabled');\n            }\n            this.enable();\n            this.$el.removeClass('select-disabled');\n\n            if (!Form.isFieldEquals(formFields[\"csb_experience\"], [DEFAULT_EMPTY, \"ce_none\"]) || !Form.isFieldEquals(formFields[\"fx_experience\"], [DEFAULT_EMPTY, \"fe_none\"]) || !Form.isFieldEquals(formFields[\"csb_volume_experience\"], [DEFAULT_EMPTY, \"cve_none\"]) || !Form.isFieldEquals(formFields[\"fx_volume_experience\"], [DEFAULT_EMPTY, \"fve_none\"])) {\n\n                this.$el.find('[value=tk_none]').attr('disabled', 'disabled');\n                this.$el.find('[data-value=tk_none]').addClass('hidden');\n            }\n\n            if (Form.isFieldEquals(formFields[\"fx_volume_experience\"], [\"fve_none\"]) && Form.isFieldEquals(formFields[\"csb_volume_experience\"], [\"cve_none\"])) {\n                this.$el.find('[value=tk_my_own]').attr('disabled', 'disabled');\n                this.$el.find('[data-value=tk_my_own]').addClass('hidden');\n                this.$el.find('[value=tk_with_advice]').attr('disabled', 'disabled');\n                this.$el.find('[data-value=tk_with_advice]').addClass('hidden');\n            }\n        },\n\n        showNationalCountryIdentifier: function showNationalCountryIdentifier(field) {\n            if (Form.isFieldEquals(field, [\"IT\"])) {\n                this.enable();\n                this.setTooltipMessage(__(\"registration.field.explanation.national_country_identifier\"));\n                this.showNotErrorTooltip();\n                return;\n            }\n\n            this.hideTooltip();\n            this.setDefaultValueWithFireChangeEvent();\n            this.validate();\n            this.disable();\n        },\n\n        afterChangeTinAbsenceReason: function afterChangeTinAbsenceReason(field) {\n            if (Form.isFieldEquals(field, [\"NOT_REQUIRED\"])) {\n                field.setTooltipMessage(__(\"reg.questionary.cysec.tin_absence_reason.not_required.tooltip\"));\n                field.showNotErrorTooltip();\n                return;\n            }\n\n            field.hideTooltip();\n        },\n\n        updatePrimaryTinAfterChangeHavePrimaryTin: function updatePrimaryTinAfterChangeHavePrimaryTin(field) {\n            if (userHasItalianNationalCountryIdentifier()) {\n                this.$el.addClass('input-disabled');\n                field.$el.addClass('select-disabled');\n            }\n\n            if (Form.isFieldEquals(field, [\"have_primary_tin_yes\"])) {\n                this.enable();\n                return;\n            }\n\n            this.setDefaultValueWithFireChangeEvent();\n            this.disable();\n        },\n\n        updatePrimaryTinAfterChangePrimaryTinTaxJurisdiction: function updatePrimaryTinAfterChangePrimaryTinTaxJurisdiction(field) {\n            var taxJurisdiction = field.getValue().toUpperCase();\n            var tinValidationRules = tinValidations.getRulesByCountryCode(taxJurisdiction, __(\"registration.warning.primary_tin\"));\n            this.setRules(tinValidationRules);\n        },\n\n        updatePrimaryTinAbsenceReasonAfterChangeHavePrimaryTin: function updatePrimaryTinAbsenceReasonAfterChangeHavePrimaryTin(field) {\n            if (Form.isFieldEquals(field, [\"have_primary_tin_no\"])) {\n                this.enable();\n                return;\n            }\n\n            this.setDefaultValueWithFireChangeEvent();\n            this.disable();\n        },\n\n        updateSecondaryTinTaxJurisdictionAfterChangeHavePrimaryTin: function updateSecondaryTinTaxJurisdictionAfterChangeHavePrimaryTin(field) {\n            if (Form.isFieldEquals(field, [\"have_primary_tin_yes\"])) {\n                this.enable();\n                return;\n            }\n\n            this.setDefaultValueWithFireChangeEvent();\n            this.disable();\n        },\n\n        updateSecondaryTinAfterChangeSecondaryTinTaxJurisdiction: function updateSecondaryTinAfterChangeSecondaryTinTaxJurisdiction(field) {\n            if (!Form.isFieldEquals(field, [\"EMPTY\", \"00\"])) {\n                var taxJurisdiction = field.getValue().toUpperCase();\n                var tinValidationRules = tinValidations.getRulesByCountryCode(taxJurisdiction, __(\"registration.warning.secondary_tin\"));\n                this.setRules(tinValidationRules);\n\n                this.enable();\n                this.setDefaultState();\n                return;\n            }\n\n            this.setDefaultValueWithFireChangeEvent();\n            this.disable();\n        },\n\n        updateSecondaryTinTaxJurisdictionSource: function updateSecondaryTinTaxJurisdictionSource(countryCodes) {\n            var _this = this;\n\n            countryCodes.forEach(function (code) {\n                _this.$el.find('[value=\"' + code + '\"]').removeAttr('disabled');\n                _this.$el.find('[data-value=\"' + code + '\"]').removeClass('hidden');\n            });\n\n            var userCountry = user.getCountry().toUpperCase();\n\n            this.$el.find('[value=\"' + userCountry + '\"]').attr('disabled', 'disabled');\n            this.$el.find('[data-value=\"' + userCountry + '\"]').addClass('hidden');\n        }\n\n    };\n\n    function countryCodeToOptions(countries) {\n        var options = _.pluck(countries, 'code').sort(function (a, b) {\n            return __('country.name.' + a).localeCompare(__('country.name.' + b));\n        });\n        options.unshift(\"EMPTY\");\n        return options;\n    }\n\n    function taxJurisdictionOptions(options) {\n        return [\"00\"].concat(options);\n    }\n\n    module.exports = Model.extend({\n\n        getAllCountries: function getAllCountries() {\n            return this.get(\"allCountries\");\n        },\n\n        getAllCountryCodes: function getAllCountryCodes() {\n            return _.pluck(this.getAllCountries(), 'code');\n        },\n\n        getAllowedCountries: function getAllowedCountries() {\n            return this.get(\"allowedCountries\");\n        },\n\n        getCountriesPhoneCodes: function getCountriesPhoneCodes() {\n            return this.get(\"countriesPhoneCodes\");\n        },\n\n        getPhoneToCountry: function getPhoneToCountry() {\n            return this.get(\"phoneToCountry\");\n        },\n\n        getStepModels: function getStepModels() {\n            return {\n                \"tax_information\": new RegistrationStepTaxInformationMarketsModel()\n            };\n        },\n\n        getFormConfig: function getFormConfig() {\n\n            return {\n                // Personal Information Page:\n                firstName: {\n                    translationKey: \"first_name\",\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('first_name'),\n                            max_length: validations.maxLength(50, 'first_name')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                lastName: {\n                    translationKey: \"last_name\",\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('last_name'),\n                            max_length: validations.maxLength(50, 'last_name')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                phone: {\n                    translationKey: \"phone\",\n                    options: {\n                        countries: this.getCountriesPhoneCodes(),\n                        phoneToCountry: this.getPhoneToCountry()\n                    },\n                    template: templates.phoneBox,\n                    validation: {\n                        rules: {\n                            // TODO - localize\n                            not_empty: validations.notEmpty('phone'),\n                            numeric: validations.numeric('phone'),\n                            validateLength: function validateLength(data) {\n                                var min = 6;\n                                var max = 20;\n                                if (data.phone.length > max) {\n                                    return __('registration.phone.max', max);\n                                }\n                                if (data.phoneInput.length < min) {\n                                    return __('registration.phone.min', min);\n                                }\n                                if (_.isEmpty(data.phoneSelect)) {\n                                    return validations.notEmpty('phone');\n                                }\n                                return null;\n                            }\n                        },\n                        filters: []\n                    },\n                    disable: false\n                },\n                birthDate: {\n                    translationKey: \"date_of_birth\",\n                    // TODO - this could be moved to the date input view\n                    options: {\n                        minAge: 18,\n                        maxAge: 87,\n                        moment: Moment,\n                        splitByComma: localization.splitByComma\n                    },\n                    template: templates.dateBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('date_of_birth')\n                        },\n                        filters: []\n                    },\n                    disable: false\n                },\n                address: {\n                    translationKey: \"address\",\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('address'),\n                            max_length: validations.maxLength(50, 'address')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                zipCode: {\n                    translationKey: \"zip_code\",\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('zip_code'),\n                            max_length: validations.maxLength(50, 'zip_code')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                city: {\n                    translationKey: \"city\",\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('city')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                country: {\n                    translationKey: \"country\",\n                    translationGroupPrefix: 'country.name',\n                    options: countryCodeToOptions(this.getAllowedCountries()),\n                    template: templates.countriesSelectBox,\n                    validation: validations.selectNotEmpty('country'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                citizenship: {\n                    title: __(\"registration.field.label.citizenship\"),\n                    // EREZ _ THIS IS NOT A MISTAKE\n                    translationKey: \"country\",\n                    translationGroupPrefix: 'country.name',\n                    options: countryCodeToOptions(this.getAllCountries()),\n                    template: templates.countriesSelectBox,\n                    validation: validations.selectNotEmpty('citizenship'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                nationalCountryIdentifier: {\n                    title: __(\"registration.field.label.national_country_identifier\"),\n                    template: templates.inputBox,\n                    dependent: [{\n                        name: \"citizenship\",\n                        handler: dependentFieldHandlers.showNationalCountryIdentifier\n                    }],\n                    validation: {\n                        rules: {\n                            regexp: [/^$|^[a-zA-Z]{6}[a-zA-Z0-9]{10}$/, __(\"registration.warning.national_country_identifier\")]\n                        },\n                        filters: ['string']\n                    },\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    },\n                    disable: true\n                },\n\n                // Tax information Page:\n                primaryTinTaxJurisdiction: {\n                    title: __(\"registration.field.label.primary_tin_tax_jurisdiction\"),\n                    translationKey: \"primary_tin_tax_jurisdiction\",\n                    translationGroupPrefix: 'tax_jurisdiction',\n                    options: countryCodeToOptions(this.getAllCountries()),\n                    template: templates.countriesSelectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: 'select-disabled',\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                have_primary_tin: {\n                    title: __(\"registration.field.label.have_primary_tin\"),\n                    translationKey: \"have_primary_tin\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: \"tinAbsenceReason\",\n                        handler: dependentFieldHandlers.afterChangeTinAbsenceReason\n                    }],\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                primaryTin: {\n                    title: __(\"registration.field.label.primary_tin\"),\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {},\n                        filters: tinValidations.getFilters\n                    },\n                    dependent: [{\n                        name: \"have_primary_tin\",\n                        handler: dependentFieldHandlers.updatePrimaryTinAfterChangeHavePrimaryTin\n                    }, {\n                        name: \"primaryTinTaxJurisdiction\",\n                        handler: dependentFieldHandlers.updatePrimaryTinAfterChangePrimaryTinTaxJurisdiction\n                    }],\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    },\n                    disable: true\n                },\n                tinAbsenceReason: {\n                    title: __(\"registration.field.label.tin_absence_reason\"),\n                    translationKey: \"tin_absence_reason\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: \"have_primary_tin\",\n                        handler: dependentFieldHandlers.updatePrimaryTinAbsenceReasonAfterChangeHavePrimaryTin\n                    }],\n                    disable: true,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                secondaryTinTaxJurisdiction: {\n                    title: __(\"registration.field.label.secondary_tin_tax_jurisdiction\"),\n                    translationKey: \"country\",\n                    translationGroupPrefix: 'tax_jurisdiction',\n                    options: taxJurisdictionOptions(countryCodeToOptions(this.getAllCountries())),\n                    template: templates.countriesSelectBox,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: \"have_primary_tin\",\n                        handler: dependentFieldHandlers.updateSecondaryTinTaxJurisdictionAfterChangeHavePrimaryTin\n                    }, {\n                        name: \"primaryTinTaxJurisdiction\",\n                        handler: _.partial(dependentFieldHandlers.updateSecondaryTinTaxJurisdictionSource, this.getAllCountryCodes())\n                    }],\n                    disable: true,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                secondaryTin: {\n                    title: __(\"registration.field.label.secondary_tin\"),\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {},\n                        filters: tinValidations.getFilters\n                    },\n                    dependent: [{\n                        name: \"secondaryTinTaxJurisdiction\",\n                        handler: dependentFieldHandlers.updateSecondaryTinAfterChangeSecondaryTinTaxJurisdiction\n                    }],\n                    disable: true,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                fatca: {\n                    translationKey: \"fatca\",\n                    options: [{\n                        value: 'NO',\n                        text: __('no')\n                    }, {\n                        value: 'YES',\n                        text: __('yes')\n                    }, {\n                        value: __('registration.field.fatca.link.href'),\n                        text: __('registration.field.label.fatca.learn_more')\n                    }],\n                    template: templates.fatcaBox,\n                    validation: validations.radioNotEmpty('fatca'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                tax_information_disclaimer: {\n                    template: _.template('<div class=\"disclaimer\"><%=__(\"registration.step.disclaimer.tax_information\")%></div>'),\n                    disable: false\n                },\n\n                // Financial Information Page:\n                employment_status: {\n                    translationKey: \"employment_status\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty('employment_status'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                profession: {\n                    title: __(\"reg.questionary.cysec.profession\"),\n                    translationKey: \"profession\",\n                    template: templates.selectBoxOverflowWidth,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: \"employment_status\",\n                        handler: function handler(field) {\n                            if (field.value() === \"EMPTY\") {\n                                this.disable();\n                                this.$el.addClass('select-disabled');\n                                return;\n                            }\n\n                            if (field.value() === \"es_employed\" || field.value() === \"es_self_employed\") {\n                                this.$el.removeClass('select-disabled');\n                                return this.enable();\n                            }\n\n                            this.setDefaultValue();\n                            this.disable();\n                            this.$el.addClass('select-disabled');\n                        }\n                    }],\n                    disable: 'select-disabled',\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                annual_income: {\n                    title: __(\"reg.questionary.cysec.annual_income\"),\n                    translationKey: \"annual_income\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                intend_invest: {\n                    title: __(\"reg.questionary.cysec.intend_invest\"),\n                    translationKey: \"intend_invest\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                trading_purpose: {\n                    title: __(\"reg.questionary.cysec.trading_purpose\"),\n                    translationKey: \"trading_purpose\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                trading_purpose_details: {\n                    title: __(\"reg.questionary.cysec.trading_purpose\"),\n                    translationKey: \"trading_purpose\",\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.industry_other')),\n                    options: {\n                        defaultValue: __('registration.field.label.industry_other')\n                    },\n                    dependent: [{\n                        name: \"trading_purpose\",\n                        handler: function handler(field) {\n                            if (field.value() === \"tp_other\") {\n                                // EREZ - Don't change disable state of field its changed in its handler\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n                                return;\n                            }\n\n                            // EREZ - Don't change disable state of field its changed in its handler\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'trading_purpose')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                savings_investments: {\n                    title: __(\"reg.questionary.cysec.savings_investments\"),\n                    translationKey: \"savings_investments\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                funds_source: {\n                    title: __(\"reg.questionary.cysec.funds_source\"),\n                    translationKey: \"funds_source\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                funds_source_details: {\n                    title: __(\"reg.questionary.cysec.funds_source\"),\n                    translationKey: \"trading_purpose\",\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.funds_source')),\n                    options: {\n                        defaultValue: __('registration.field.label.funds_source')\n                    },\n                    dependent: [{\n                        name: \"funds_source\",\n                        handler: function handler(field) {\n                            if (field.value() === \"fs_other\") {\n                                // EREZ - Don't change disable state of field its changed in its handler\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n                                return;\n                            }\n\n                            // EREZ - Don't change disable state of field its changed in its handler\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'funds_source')\n                    },\n                    disable: true\n                },\n\n                // Trading Experience Page:\n                education_level: {\n                    translationKey: \"education_level\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty('education_level'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                study_field: {\n                    title: __(\"registration.field.label.study_field\"),\n                    translationKey: \"study_field\",\n                    template: templates.selectBoxOverflowWidth,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: \"education_level\",\n                        handler: function handler(field) {\n                            if (['EMPTY', 'ed_no_edu', 'ed_prim_edu'].indexOf(field.value()) >= 0) {\n                                this.setDefaultValue();\n                                this.disable();\n                                return this.$el.addClass('select-disabled');\n                            }\n\n                            this.enable();\n                            return this.$el.removeClass('select-disabled');\n                        }\n                    }],\n                    disable: 'select-disabled',\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                study_field_details: {\n                    title: __(\"registration.field.label.study_field\"),\n                    translationKey: \"study_field_other\",\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.study_field_other')),\n                    options: {\n                        defaultValue: __('registration.field.label.study_field_other')\n                    },\n                    dependent: [{\n                        name: \"study_field\",\n                        handler: function handler(field) {\n                            if (field.value() === \"sf_other\") {\n                                field.disable();\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n                                return;\n                            }\n\n                            field.enable();\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }, {\n                        name: \"education_level\",\n                        handler: function handler(field) {\n                            if (this.isDisabled()) {\n                                return;\n                            }\n                            if (field.value() === 'ed_no_edu' || field.value() === 'ed_prim_edu') {\n                                this.disable();\n\n                                return;\n                            }\n\n                            this.enable();\n                            this.focus();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'study_field')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                fx_volume_experience: {\n                    title: __(\"reg.questionary.cysec.fx_volume_experience\"),\n                    translationKey: \"fx_volume_experience\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                csb_volume_experience: {\n                    title: __(\"reg.questionary.cysec.csb_volume_experience\"),\n                    translationKey: \"csb_volume_experience\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                fx_experience: {\n                    title: __(\"reg.questionary.cysec.fx_experience\"),\n                    translationKey: \"fx_experience\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                csb_experience: {\n                    title: __(\"reg.questionary.cysec.csb_experience\"),\n                    translationKey: \"csb_experience\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                trade_kind: {\n                    title: __(\"reg.questionary.cysec.trade_kind\"),\n                    translationKey: \"trade_kind\",\n                    template: templates.selectBoxOverflowWidth,\n                    validation: validations.selectNotEmpty(),\n                    disable: 'select-disabled',\n                    dependent: [{\n                        name: \"csb_experience\",\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }, {\n                        name: \"fx_experience\",\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }, {\n                        name: \"csb_volume_experience\",\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }, {\n                        name: \"fx_volume_experience\",\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }],\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                low_score_disclaimer: {\n                    title: '',\n                    translationKey: '',\n                    template: lowScoreDisclaimerTemplate,\n                    validation: {},\n                    disable: false,\n                    dependent: []\n                },\n\n                // Financial Knowledge Page:\n                termsAndConditions: {\n                    translationKey: \"terms_and_conditions\",\n                    options: {\n                        value: \"\",\n                        text: \"TRANS_OPTION_TEXT_KEY\",\n                        parseString: true\n                    },\n                    template: templates.checkBox,\n                    validation: {\n                        rules: {\n                            not_equals: [\"false\", __('registration.warning.this_field_is_required', __(\"registration.field.label.termsAndConditions\"))]\n                        },\n                        filters: []\n                    },\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                apple_drops: {\n                    title: __(\"reg.questionary.cysec.apple_drops\"),\n                    translationKey: \"apple_drops\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                facebook_buy_markets: {\n                    title: __(\"reg.questionary.cysec.facebook_buy_markets\"),\n                    translationKey: \"facebook_buy_markets\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                maximum_open_position: {\n                    title: __(\"reg.questionary.cysec.maximum_open_position\"),\n                    translationKey: \"maximum_open_position\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                trade_leverage: {\n                    title: __(\"reg.questionary.cysec.trade_leverage\"),\n                    translationKey: \"trade_leverage\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                cfd_trading: {\n                    title: __(\"reg.questionary.cysec.cfd_trading\"),\n                    translationKey: \"cfd_trading\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                }\n\n            };\n        }\n\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/registration.form.config.markets.js\n// module id = 1242\n// module chunks = 1\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/registration.form.config.markets.js?");

/***/ }),

/***/ 1243:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var Model = __webpack_require__(17);\n    var user = __webpack_require__(7);\n\n    module.exports = Model.extend({\n\n        before: function before(savedData) {\n            var updates = {};\n\n            updates[\"primaryTinTaxJurisdiction\"] = user.getCountry().toUpperCase();\n\n            if (savedData[\"primaryTinTaxJurisdiction\"] === \"00\" && savedData[\"secondaryTinTaxJurisdiction\"] === \"00\") {\n                updates[\"secondaryTinTaxJurisdiction\"] = \"EMPTY\";\n                updates[\"fatca\"] = \"EMPTY\";\n            }\n\n            if (savedData[\"tinAbsenceReason\"] === \"NOT_RELEVANT\") {\n                updates[\"tinAbsenceReason\"] = \"EMPTY\";\n            }\n\n            if (_.isEmpty(savedData[\"primaryTin\"])) {\n                if (savedData[\"primaryTinTaxJurisdiction\"] === \"00\" || savedData[\"tinAbsenceReason\"] === \"EMPTY\") {\n                    updates[\"have_primary_tin\"] = \"EMPTY\";\n                } else {\n                    updates[\"have_primary_tin\"] = \"have_primary_tin_no\";\n                }\n            } else {\n                updates[\"have_primary_tin\"] = \"have_primary_tin_yes\";\n            }\n\n            if (user.getCountry() === \"IT\" && user.getCitizenship() === \"IT\" && !_.isEmpty(user.getNationalCountryIdentifier())) {\n                updates[\"have_primary_tin\"] = \"have_primary_tin_yes\";\n                updates[\"primaryTin\"] = user.getNationalCountryIdentifier();\n            }\n\n            return updates;\n        }\n\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/step/markets/registration.step.tax.information.markets.model.js\n// module id = 1243\n// module chunks = 1\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/step/markets/registration.step.tax.information.markets.model.js?");

/***/ }),

/***/ 1244:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var Model = __webpack_require__(17);\n    var Moment = __webpack_require__(6);\n    var localization = __webpack_require__(20);\n    var settings = __webpack_require__(10);\n    var templates = __webpack_require__(42);\n    var validations = __webpack_require__(1205);\n    var user = __webpack_require__(7);\n    var Form = __webpack_require__(1206);\n\n    var RegistrationStepFinancialInformationModel = __webpack_require__(1245);\n\n    var DEFAULT_EMPTY = 'EMPTY';\n\n    var lowScoreDisclaimerTemplate = settings.isRegistrationLowScoreDisclaimerEnabled() ? _.template('<div class=\"low-score-disclaimer\"><%=__(\"registration.step.disclaimer.financial_information\")%></div>') : _.template('');\n\n    var dependentFieldHandlers = {\n\n        tradeKindNone: function tradeKindNone(field) {\n            this.$el.find('[value=tk_none]').removeAttr('disabled');\n            this.$el.find('[data-value=tk_none]').removeClass('hidden');\n            this.$el.find('[value=tk_my_own]').removeAttr('disabled');\n            this.$el.find('[data-value=tk_my_own]').removeClass('hidden');\n            this.$el.find('[value=tk_with_advice]').removeAttr('disabled');\n            this.$el.find('[data-value=tk_with_advice]').removeClass('hidden');\n\n            var formFields = field.options.form._fields;\n\n            if (Form.isFieldEquals(formFields[\"csb_experience\"], [DEFAULT_EMPTY]) || Form.isFieldEquals(formFields[\"fx_experience\"], [DEFAULT_EMPTY]) || Form.isFieldEquals(formFields[\"csb_volume_experience\"], [DEFAULT_EMPTY]) || Form.isFieldEquals(formFields[\"fx_volume_experience\"], [DEFAULT_EMPTY])) {\n\n                this.setDefaultValue();\n                this.disable();\n                return this.$el.addClass('select-disabled');\n            }\n            this.enable();\n            this.$el.removeClass('select-disabled');\n\n            if (!Form.isFieldEquals(formFields[\"csb_experience\"], [DEFAULT_EMPTY, \"ce_none\"]) || !Form.isFieldEquals(formFields[\"fx_experience\"], [DEFAULT_EMPTY, \"fe_none\"]) || !Form.isFieldEquals(formFields[\"csb_volume_experience\"], [DEFAULT_EMPTY, \"cve_none\"]) || !Form.isFieldEquals(formFields[\"fx_volume_experience\"], [DEFAULT_EMPTY, \"fve_none\"])) {\n\n                this.$el.find('[value=tk_none]').attr('disabled', 'disabled');\n                this.$el.find('[data-value=tk_none]').addClass('hidden');\n            }\n\n            if (Form.isFieldEquals(formFields[\"fx_volume_experience\"], [\"fve_none\"]) && Form.isFieldEquals(formFields[\"csb_volume_experience\"], [\"cve_none\"])) {\n                this.$el.find('[value=tk_my_own]').attr('disabled', 'disabled');\n                this.$el.find('[data-value=tk_my_own]').addClass('hidden');\n                this.$el.find('[value=tk_with_advice]').attr('disabled', 'disabled');\n                this.$el.find('[data-value=tk_with_advice]').addClass('hidden');\n            }\n        },\n\n        activateWorkCountriesOnlyIfEmployed: function activateWorkCountriesOnlyIfEmployed(field) {\n            if (Form.isFieldEquals(field, [\"es_employed\", \"es_self_employed\"])) {\n                var workCountries = this.getValue();\n                if (_.isEmpty(workCountries) || workCountries.length === 0 || workCountries[0] === DEFAULT_EMPTY) {\n                    this.setValue(user.getCountry().toLowerCase());\n                }\n\n                this.enable();\n                this.$el.removeClass('select-disabled');\n                return;\n            }\n\n            this.disable();\n            this.setDefaultValueWithFireChangeEvent();\n            this.$el.addClass('select-disabled');\n        },\n\n        activateOnlyIfEmployed: function activateOnlyIfEmployed(field) {\n            if (Form.isFieldEquals(field, [\"es_employed\", \"es_self_employed\"])) {\n                this.enable();\n                this.$el.removeClass('select-disabled');\n                return;\n            }\n\n            this.disable();\n            this.setDefaultValueWithFireChangeEvent();\n            this.$el.addClass('select-disabled');\n        },\n        activateOnlyIfNotEmployed: function activateOnlyIfNotEmployed(field) {\n            if (Form.isFieldEquals(field, [\"es_retired\", \"es_student\", \"es_unemployed\"])) {\n                this.enable();\n                this.$el.removeClass('select-disabled');\n                return;\n            }\n\n            this.disable();\n            this.setDefaultValueWithFireChangeEvent();\n            this.$el.addClass('select-disabled');\n        }\n    };\n\n    function countriesToOptions(countries) {\n        var options = _.pluck(countries, 'code').sort(function (a, b) {\n            return __('country.name.' + a).localeCompare(__('country.name.' + b));\n        });\n        options.unshift(\"EMPTY\");\n        return options;\n    }\n\n    function lowerCaseOptions(options) {\n        return _.map(options, function (o) {\n            return o.toLowerCase();\n        });\n    }\n\n    module.exports = Model.extend({\n\n        getAllCountries: function getAllCountries() {\n            return this.get(\"allCountries\");\n        },\n\n        getAllowedCountries: function getAllowedCountries() {\n            return this.get(\"allowedCountries\");\n        },\n\n        getAllowedCountryCodes: function getAllowedCountryCodes() {\n            return _.pluck(this.getAllowedCountries(), 'code');\n        },\n\n        getSortedAllowedCountryCodes: function getSortedAllowedCountryCodes() {\n            return this.getAllowedCountryCodes().sort(function (a, b) {\n                return __('country.name.' + a).localeCompare(__('country.name.' + b));\n            });\n        },\n\n        getCountryCodes: function getCountryCodes() {\n            return this.getSortedAllowedCountryCodes().map(function (code) {\n                return code.toLowerCase();\n            });\n        },\n\n        getCountriesPhoneCodes: function getCountriesPhoneCodes() {\n            return this.get(\"countriesPhoneCodes\");\n        },\n\n        getPhoneToCountry: function getPhoneToCountry() {\n            return this.get(\"phoneToCountry\");\n        },\n\n        getStepModels: function getStepModels() {\n            return {\n                \"financial_information\": new RegistrationStepFinancialInformationModel()\n            };\n        },\n\n        getFormConfig: function getFormConfig() {\n\n            return {\n                // First Page:\n                firstName: {\n                    translationKey: \"first_name\",\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('first_name'),\n                            max_length: validations.maxLength(50, 'first_name')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                lastName: {\n                    translationKey: \"last_name\",\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('last_name'),\n                            max_length: validations.maxLength(50, 'last_name')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                phone: {\n                    translationKey: \"phone\",\n                    options: {\n                        countries: this.getCountriesPhoneCodes(),\n                        phoneToCountry: this.getPhoneToCountry()\n                    },\n                    template: templates.phoneBox,\n                    validation: {\n                        rules: {\n                            // TODO - localize\n                            not_empty: validations.notEmpty('phone'),\n                            numeric: validations.numeric('phone'),\n                            validateLength: function validateLength(data) {\n                                var min = 6;\n                                var max = 20;\n                                if (data.phone.length > max) {\n                                    return __('registration.phone.max', max);\n                                }\n                                if (data.phoneInput.length < min) {\n                                    return __('registration.phone.min', min);\n                                }\n                                if (_.isEmpty(data.phoneSelect)) {\n                                    return validations.notEmpty('phone');\n                                }\n                                return null;\n                            }\n                        },\n                        filters: []\n                    },\n                    disable: false\n                },\n                birthDate: {\n                    translationKey: \"date_of_birth\",\n                    // TODO - this could be moved to the date input view\n                    options: {\n                        minAge: 18,\n                        maxAge: 87,\n                        moment: Moment,\n                        splitByComma: localization.splitByComma\n                    },\n                    template: templates.dateBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('date_of_birth')\n                        },\n                        filters: []\n                    },\n                    disable: false\n                },\n                address: {\n                    translationKey: \"address\",\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('address'),\n                            max_length: validations.maxLength(50, 'address')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                zipCode: {\n                    translationKey: \"zip_code\",\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('zip_code'),\n                            max_length: validations.maxLength(50, 'zip_code')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                city: {\n                    translationKey: \"city\",\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('city')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                country: {\n                    translationKey: \"country\",\n                    translationGroupPrefix: 'country.name',\n                    options: countriesToOptions(this.getAllowedCountries()),\n                    template: templates.countriesSelectBox,\n                    validation: validations.countrySelectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                citizenship: {\n                    title: __(\"registration.field.label.citizenship\"),\n                    translationKey: \"country\",\n                    translationGroupPrefix: 'country.name',\n                    options: countriesToOptions(this.getAllCountries()),\n                    template: templates.countriesSelectBox,\n                    validation: validations.countrySelectNotEmpty('citizenship'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n\n                fatca: {\n                    translationKey: \"fatca\",\n                    options: [{\n                        value: 'NO',\n                        text: __('no')\n                    }, {\n                        value: 'YES',\n                        text: __('yes')\n                    }, {\n                        value: __('registration.field.fatca.link.href'),\n                        text: __('registration.field.label.fatca.learn_more')\n                    }],\n                    template: templates.fatcaBox,\n                    validation: validations.radioNotEmpty('fatca'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n\n                // Second Page:\n                employment_status: {\n                    translationKey: \"employment_status\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty('employment_status'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                trading_purpose: {\n                    title: __(\"reg.questionary.cysec.trading_purpose\"),\n                    translationKey: \"trading_purpose\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                trading_purpose_details: {\n                    title: __(\"reg.questionary.cysec.trading_purpose\"),\n                    translationKey: \"trading_purpose\",\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.industry_other')),\n                    options: {\n                        defaultValue: __('registration.field.label.industry_other')\n                    },\n                    dependent: [{\n                        name: \"trading_purpose\",\n                        handler: function handler(field) {\n                            if (field.value() === \"tp_other\") {\n                                // EREZ - Don't change disable state of field its changed in its handler\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n                                return;\n                            }\n                            // EREZ - Don't change disable state of field its changed in its handler\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'trading_purpose')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                anticipated_turnover: {\n                    title: __(\"reg.questionary.cysec.anticipated_turnover\"),\n                    translationKey: \"anticipated_turnover\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                transactions_nature: {\n                    title: __(\"reg.questionary.cysec.transactions_nature\"),\n                    translationKey: \"transactions_nature\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                transactions_nature_details: {\n                    title: __(\"reg.questionary.cysec.transactions_nature\"),\n                    translationKey: \"transactions_nature\",\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.tn_other')),\n                    options: {\n                        defaultValue: __('registration.field.label.tn_other')\n                    },\n                    dependent: [{\n                        name: \"transactions_nature\",\n                        handler: function handler(field) {\n                            if (field.value() === \"tn_other\") {\n                                field.disable();\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n                                return;\n                            }\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'transactions_nature')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                industry: {\n                    title: __(\"reg.questionary.cysec.industry\"),\n                    translationKey: \"industry\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: \"employment_status\",\n                        handler: dependentFieldHandlers.activateOnlyIfEmployed\n                    }],\n                    disable: 'select-disabled',\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                industry_details: {\n                    title: __(\"reg.questionary.cysec.industry\"),\n                    translationKey: \"industry\",\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.i_other')),\n                    dependent: [{\n                        name: \"industry\",\n                        handler: function handler(field) {\n                            if (field.value() === \"i_other\") {\n                                field.disable();\n                                field.$el.css('visibility', 'hidden');\n                                this.enable();\n                                this.focus();\n                                return;\n                            }\n                            field.$el.css('visibility', 'visible');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'industry')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n\n                source_of_income: {\n                    title: __(\"reg.questionary.cysec.source_of_income\"),\n                    translationKey: \"source_of_income\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: \"employment_status\",\n                        handler: dependentFieldHandlers.activateOnlyIfNotEmployed\n                    }],\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                source_of_income_details: {\n                    title: __(\"reg.questionary.cysec.source_of_income\"),\n                    translationKey: \"source_of_income\",\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.so_other')),\n                    options: {\n                        defaultValue: __('registration.field.label.so_other')\n                    },\n                    dependent: [{\n                        name: \"source_of_income\",\n                        handler: function handler(field) {\n                            if (field.value() === \"so_other\") {\n                                field.disable();\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n                                return;\n                            }\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'source_of_income')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                estimated_gross_income: {\n                    title: __(\"reg.questionary.cysec.estimated_gross_income\"),\n                    translationKey: \"estimated_gross_income\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                net_worth: {\n                    title: __(\"reg.questionary.cysec.net_worth\"),\n                    translationKey: \"net_worth\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                orin_of_funds: {\n                    title: __(\"reg.questionary.cysec.orin_of_funds\"),\n                    translationKey: \"orin_of_funds\",\n                    translationGroupPrefix: 'reg.questionary.cysec.orin_of_funds',\n                    template: templates.multiCheckBox,\n                    validation: validations.multiCheckBoxNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n\n                // Third Page:\n                education_level: {\n                    translationKey: \"education_level\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty('education_level'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                study_field: {\n                    title: __(\"registration.field.label.study_field\"),\n                    translationKey: \"study_field\",\n                    template: templates.selectBoxOverflowWidth,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: \"education_level\",\n                        handler: function handler(field) {\n                            if (['EMPTY', 'ed_no_edu', 'ed_prim_edu'].indexOf(field.value()) >= 0) {\n                                this.setDefaultValue();\n                                this.disable();\n                                return this.$el.addClass('select-disabled');\n                            }\n\n                            this.enable();\n                            return this.$el.removeClass('select-disabled');\n                        }\n                    }],\n                    disable: 'select-disabled',\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                study_field_details: {\n                    title: __(\"registration.field.label.study_field\"),\n                    translationKey: \"study_field_other\",\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.study_field_other')),\n                    options: {\n                        defaultValue: __('registration.field.label.study_field_other')\n                    },\n                    dependent: [{\n                        name: \"study_field\",\n                        handler: function handler(field) {\n                            if (field.value() === \"sf_other\") {\n                                field.disable();\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n                                return;\n                            }\n\n                            field.enable();\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }, {\n                        name: \"education_level\",\n                        handler: function handler(field) {\n                            if (this.isDisabled()) {\n                                return;\n                            }\n                            if (field.value() === 'ed_no_edu' || field.value() === 'ed_prim_edu') {\n                                this.disable();\n\n                                return;\n                            }\n\n                            this.enable();\n                            this.focus();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'study_field')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                fx_volume_experience: {\n                    title: __(\"reg.questionary.cysec.fx_volume_experience\"),\n                    translationKey: \"fx_volume_experience\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                csb_volume_experience: {\n                    title: __(\"reg.questionary.cysec.csb_volume_experience\"),\n                    translationKey: \"csb_volume_experience\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                fx_experience: {\n                    title: __(\"reg.questionary.cysec.fx_experience\"),\n                    translationKey: \"fx_experience\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                csb_experience: {\n                    title: __(\"reg.questionary.cysec.csb_experience\"),\n                    translationKey: \"csb_experience\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                trade_kind: {\n                    title: __(\"reg.questionary.cysec.trade_kind\"),\n                    translationKey: \"trade_kind\",\n                    template: templates.selectBoxOverflowWidth,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    dependent: [{\n                        name: \"csb_experience\",\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }, {\n                        name: \"fx_experience\",\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }, {\n                        name: \"csb_volume_experience\",\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }, {\n                        name: \"fx_volume_experience\",\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }],\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                low_score_disclaimer: {\n                    title: '',\n                    translationKey: '',\n                    template: lowScoreDisclaimerTemplate,\n                    validation: {},\n                    disable: false,\n                    dependent: []\n                },\n\n                // Forth Page:\n                allowMarketingEmails: {\n                    translationKey: \"allow_marketing_emails\",\n                    options: {\n                        value: \"\",\n                        parseString: false\n                    },\n                    template: templates.checkBox,\n                    disable: false\n                },\n                termsAndConditions: {\n                    translationKey: \"terms_and_conditions\",\n                    options: {\n                        value: \"\",\n                        text: \"TRANS_OPTION_TEXT_KEY\",\n                        parseString: true\n                    },\n                    template: templates.checkBox,\n                    validation: {\n                        rules: {\n                            not_equals: [\"false\", __('registration.warning.this_field_is_required', __(\"registration.field.label.termsAndConditions\"))]\n                        },\n                        filters: []\n                    },\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                quiz_1: {\n                    title: __(\"reg.questionary.cysec.quiz_1\"),\n                    translationKey: \"quiz_1\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                quiz_2: {\n                    title: __(\"reg.questionary.cysec.quiz_2\"),\n                    translationKey: \"quiz_2\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                quiz_3: {\n                    title: __(\"reg.questionary.cysec.quiz_3\"),\n                    translationKey: \"quiz_3\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                quiz_4: {\n                    title: __(\"reg.questionary.cysec.quiz_4\"),\n                    translationKey: \"quiz_4\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                quiz_5: {\n                    title: __(\"reg.questionary.cysec.quiz_5\"),\n                    translationKey: \"quiz_5\",\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                }\n            };\n        }\n\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/registration.form.config.cfdglobal.js\n// module id = 1244\n// module chunks = 1\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/registration.form.config.cfdglobal.js?");

/***/ }),

/***/ 1245:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var BaseModel = __webpack_require__(1230);\n\n    module.exports = BaseModel.extend({\n\n        after: function after(data) {\n\n            var fatca = data[\"fatca\"];\n            if (fatca) {\n                switch (fatca) {\n                    case \"NO\":\n                        data[\"us_resident\"] = \"ur_no\";break;\n                    case \"YES\":\n                        data[\"us_resident\"] = \"ur_yes\";break;\n                }\n            }\n\n            return data;\n        }\n\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/step/cfdglobal/registration.step.financial.information.cfdglobal.model.js\n// module id = 1245\n// module chunks = 1\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/step/cfdglobal/registration.step.financial.information.cfdglobal.model.js?");

/***/ }),

/***/ 1246:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_, $) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var View = __webpack_require__(11);\n    var $ = __webpack_require__(5);\n    var template = _.template(__webpack_require__(1247));\n\n    var _require = __webpack_require__(191),\n        STEP_IN_PROGRESS = _require.STEP_IN_PROGRESS;\n\n    var StepsHeadline = View.extend({\n        initialize: function initialize(options) {\n            View.prototype.initialize.apply(this, arguments);\n            this.options = options;\n            this.$parent = options.$parent;\n            this.stepsModel = options.stepsModel;\n            this.render();\n            this.listenTo(this.collection, 'steps:change', this.render);\n        },\n        render: function render() {\n            View.prototype.render.call(this);\n            this.$parent.html(template({ steps: this.collection }));\n            if (this.options.bonuses) {\n                $('.responsive-header-content .registration-bonus-steps-to-go .steps-to-go-message').html(__('registration.gift.general.format', this.getNumberStepsToFinish(), this.options.bonuses));\n            } else {\n                $('.responsive-header-content .registration-bonus-steps-to-go').css('display', 'none');\n            }\n        },\n        // TODO - change to listen on a collection update event\n        move: function move(steps) {\n            this.render(steps);\n        },\n        getNumberStepsToFinish: function getNumberStepsToFinish() {\n            var idx = void 0;\n            var found = this.collection.some(function (step, i) {\n                if (step.get('status') === STEP_IN_PROGRESS) {\n                    idx = i;\n                    return true;\n                }\n            });\n\n            return found ? this.collection.length - idx : 0;\n        }\n    });\n\n    module.exports = StepsHeadline;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(5)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/steps/form.steps.view.js\n// module id = 1246\n// module chunks = 1\n\n//# sourceURL=webpack:///./src/js/modules/registration/steps/form.steps.view.js?");

/***/ }),

/***/ 1247:
/***/ (function(module, exports) {

eval("module.exports = \"<% steps.each(function (step, i){ %>\\n<div class=\\\"step hidden-xs\\\">\\n    <% if (step.get('status') === 'in-progress'){ %>\\n    <i class=\\\"icon-registration-step\\\">\\n        <span style=\\\"color:#ffffff;\\\"><%= i + 1 %></span>\\n    </i>\\n    <% } else if (step.get('status') === 'pending'){ %>\\n    <i class=\\\"icon-registration-step-gray\\\">\\n        <span style=\\\"color:#aaafb4;\\\"><%= i + 1 %></span>\\n    </i>\\n    <% } else { %>\\n    <i class=\\\"icon-registration-step\\\">\\n        <i class=\\\"icon-registration-step-complete\\\"></i>\\n    </i>\\n    <% } %>\\n\\n    <span style=\\\"<%= step.get('status') === 'pending' ? 'color:#979797' : ''%>\\\"><%= __('registration.step.title.' + step.get('title')) %></span>\\n    <% if (i +1 !== steps.length) { %>\\n    <i class=\\\"icon-registration-next-arrow\\\"></i>\\n    <% } %>\\n</div>\\n<% }) %>\\n\\n<div class=\\\"container progress-container hidden-sm hidden-md hidden-lg\\\">\\n    <div class=\\\"progress no-color\\\">\\n        <div class=\\\"steps-container\\\">\\n            <% steps.each(function (step, i){ %>\\n            <div class=\\\"step <%=step.get('status') === 'pending' ? 'no-color' : 'primary-color'%>\\\">\\n                <label><%=i+1%></label>\\n            </div>\\n            <% }) %>\\n        </div>\\n        <div class=\\\"progress-bar primary-color\\\" style=\\\"width:<%=steps.getProgressBarWidth()%>%\\\"></div>\\n    </div>\\n</div>\";\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/templates/registration.steps.html\n// module id = 1247\n// module chunks = 1\n\n//# sourceURL=webpack:///./src/js/modules/registration/templates/registration.steps.html?");

/***/ }),

/***/ 1248:
/***/ (function(module, exports) {

eval("module.exports = \"\"\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/registrationFlow.json\n// module id = 1248\n// module chunks = 1\n\n//# sourceURL=webpack:///./src/js/modules/registration/registrationFlow.json?");

/***/ }),

/***/ 1249:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var core = __webpack_require__(4);\n    var PopupView = __webpack_require__(47);\n    var settings = __webpack_require__(10);\n    var CompleteRegistrationTemplate = _.template(__webpack_require__(1250));\n    var LoadingView = __webpack_require__(21);\n\n    var _require = __webpack_require__(1232),\n        EMPTY = _require.EMPTY,\n        LOADING = _require.LOADING,\n        SUCCESS = _require.SUCCESS,\n        ERROR = _require.ERROR;\n\n    var CompleteRegistrationView = PopupView.extend({\n        className: 'complete-registration',\n\n        events: function events() {\n            return _.extend({}, _.result(PopupView.prototype, 'events'), {\n                'click .fn-finish': 'onFinish'\n            });\n        },\n\n        initialize: function initialize() {\n            PopupView.prototype.initialize.apply(this, arguments);\n            this.listenTo(this.model, 'change:statusOfLeverages', this.onStatusOfLeveragesChanged);\n            this.render();\n            this.onStatusOfLeveragesChanged();\n        },\n        render: function render() {\n            PopupView.prototype.render.call(this);\n            this.renderContent();\n        },\n        renderContent: function renderContent() {\n            this.setContent(CompleteRegistrationTemplate({\n                leverage: this.model.getCurrentLeverageValue()\n            }));\n        },\n        onFinish: function onFinish(event) {\n            event.preventDefault();\n            this.close();\n        },\n        onStatusOfLeveragesChanged: function onStatusOfLeveragesChanged() {\n            var status = this.model.get('statusOfLeverages');\n            var uiContent = '.popup-body';\n\n            switch (status) {\n                case EMPTY:\n                case LOADING:\n                    this.hideContent();\n                    this.addChildView(uiContent, LoadingView, { parent: this.$el });\n                    break;\n                case SUCCESS:\n                    this.removeChildView(uiContent);\n                    this.renderContent();\n                    break;\n                case ERROR:\n                    this.removeChildView(uiContent);\n                    core.trigger('ui:message-box', { text: __('indigo.generic.error.message') });\n                    break;\n            }\n        },\n        hideContent: function hideContent() {\n            this.$('.leverage').css('visibility', 'hidden');\n            this.$('.leverage-mobile').css('visibility', 'hidden');\n        },\n        showContent: function showContent() {\n            this.$('.leverage').css('visibility', 'visible');\n            this.$('.leverage-mobile').css('visibility', 'visible');\n        }\n    });\n\n    module.exports = CompleteRegistrationView;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/complete.registration.view.js\n// module id = 1249\n// module chunks = 1\n\n//# sourceURL=webpack:///./src/js/modules/registration/complete.registration.view.js?");

/***/ }),

/***/ 1250:
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"leverage hidden-xs\\\">\\n    <div class=\\\"leverage-top finished\\\">\\n        <div class=\\\"bold\\\">\\n            <div class=\\\"completed-msg\\\"></div>\\n            <%= __('leverage.popup.set.message',leverage)%>\\n        </div>\\n    </div>\\n    <div class=\\\"leverage-content finished\\\">\\n        <%=__('leverage.popup.set.notes')%>\\n    </div>\\n    <div class=\\\"line\\\"></div>\\n    <div class=\\\"leverage-bottom leverage-finish\\\">\\n        <a class=\\\"btn btn-primary btn-block fn-finish\\\" href=\\\"#\\\">\\n            <div class=\\\"button-container\\\">\\n                <span>\\n                    <%=__('actions.finish')%>\\n                </span>\\n            </div>\\n        </a>\\n    </div>\\n    <div class=\\\"leverage-bottom leverage-description\\\">\\n        <%=__('leverage.popup.footer.description')%><br />\\n        <%=__('leverage.popup.footer.description.notes')%><br />\\n        <%=__('leverage.popup.footer.description.links')%><br />\\n    </div>\\n</div>\\n\\n<!-- MOBILE -->\\n<div class=\\\"leverage-mobile hidden-sm hidden-md hidden-lg\\\">\\n    <div class=\\\"mobile-content\\\">\\n        <div class=\\\"leverage-mobile-finished\\\">\\n            <span class=\\\"icon-complete-reg\\\"></span>\\n            <div class=\\\"text\\\"><%= __('leverage.popup.set.title.no_bonus')%></div>\\n        </div>\\n        <div class=\\\"line\\\"></div>\\n        <div class=\\\"leverage-top\\\">\\n            <div class=\\\"completed-msg\\\"></div>\\n            <%= __('leverage.popup.set.message',leverage)%>\\n        </div>\\n        <div class=\\\"leverage-content\\\">\\n            <%=__('leverage.popup.set.notes')%>\\n        </div>\\n        <div class=\\\"leverage-bottom leverage-description\\\">\\n            <%=__('leverage.popup.footer.description')%><br />\\n            <%=__('leverage.popup.footer.description.notes')%><br />\\n            <%=__('leverage.popup.footer.description.links')%><br />\\n        </div>\\n    </div>\\n    <div class=\\\"mobile-actions\\\">\\n        <a class=\\\"btn btn-primary btn-block fn-finish\\\" href=\\\"#\\\">\\n            <%=__('actions.finish')%>\\n        </a>\\n    </div>\\n</div>\";\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/templates/complete.registration.html\n// module id = 1250\n// module chunks = 1\n\n//# sourceURL=webpack:///./src/js/modules/registration/templates/complete.registration.html?");

/***/ }),

/***/ 1251:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var Model = __webpack_require__(17);\n    var settings = __webpack_require__(10);\n    var LeverageModel = __webpack_require__(190);\n\n    var _require = __webpack_require__(1232),\n        EMPTY = _require.EMPTY,\n        LOADING = _require.LOADING,\n        SUCCESS = _require.SUCCESS,\n        ERROR = _require.ERROR;\n\n    var CompleteRegistrationModel = LeverageModel.extend({\n        defaults: function defaults() {\n            return {\n                statusOfLeverages: EMPTY\n            };\n        },\n        initialize: function initialize() {\n            this.loadLeverages();\n        },\n        loadLeverages: function loadLeverages() {\n            var status = this.control('statusOfLeverages');\n\n            status(LOADING);\n\n            this.load().then(function (res) {\n                return status(SUCCESS);\n            }).catch(function (err) {\n                return status(ERROR);\n            });\n        }\n    });\n\n    module.exports = CompleteRegistrationModel;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/complete.registration.model.js\n// module id = 1251\n// module chunks = 1\n\n//# sourceURL=webpack:///./src/js/modules/registration/complete.registration.model.js?");

/***/ })

});