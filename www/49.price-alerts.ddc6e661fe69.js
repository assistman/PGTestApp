webpackJsonp([49],{

/***/ 2063:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_components_BackboneView__ = __webpack_require__(849);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_components_BackboneView___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_components_BackboneView__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_modules_price_alerts_priceAlerts_view__ = __webpack_require__(2973);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_modules_price_alerts_priceAlerts_view___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_modules_price_alerts_priceAlerts_view__);\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n\n\n\n\nvar PriceAlerts = function PriceAlerts(props) {\n    return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1_components_BackboneView___default.a, _extends({ name: __WEBPACK_IMPORTED_MODULE_2_modules_price_alerts_priceAlerts_view___default.a }, props));\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (PriceAlerts);\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/price-alerts/components/PriceAlerts.jsx\n// module id = 2063\n// module chunks = 49\n\n//# sourceURL=webpack:///./src/js/modules/price-alerts/components/PriceAlerts.jsx?");

/***/ }),

/***/ 2193:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var React = __webpack_require__(4);\n    var PriceAlert = __webpack_require__(221);\n    var PriceAlertsPopupView = __webpack_require__(224);\n    var user = __webpack_require__(10);\n    var core = __webpack_require__(5);\n    var settings = __webpack_require__(12);\n\n    var PriceAlertInfoButton = React.createClass({\n        displayName: 'PriceAlertInfoButton',\n\n        getDefaultProps: function getDefaultProps() {\n            return {\n                model: '',\n                onClick: function onClick() {}\n            };\n        },\n\n        getInstrumentId: function getInstrumentId() {\n            return parseInt(this.props.model.get('instrumentId') || this.props.model.get('id'));\n        },\n\n        getSavedPriceAlerts: function getSavedPriceAlerts() {\n            return this.props.model.get('priceAlerts').filter(function (item) {\n                return item.isAvailableOnServer();\n            });\n        },\n\n        getInitialState: function getInitialState() {\n            var priceAlerts = this.getSavedPriceAlerts();\n\n            return {\n                isSet: !!priceAlerts.length\n            };\n        },\n\n        update: function update() {\n            var priceAlerts = this.getSavedPriceAlerts();\n\n            this.setState({\n                isSet: !!priceAlerts.length\n            });\n        },\n\n        componentDidMount: function componentDidMount() {\n            var priceAlerts = this.props.model.get('priceAlerts');\n\n            priceAlerts.on('add change:id delete reset', this.update, this);\n        },\n\n        componentWillUnmount: function componentWillUnmount() {\n            var priceAlerts = this.props.model.get('priceAlerts');\n\n            priceAlerts.off('add change:id delete reset', this.update, this);\n        },\n\n        onClick: function onClick(e) {\n            e.stopPropagation();\n\n            if (this.state.isSet) {\n                core.trigger('ui:price-alerts', this.props.model.get('instrumentSymbol'));\n            } else {\n                var priceAlertPopup = new PriceAlertsPopupView({\n                    parent: document.body,\n                    model: new PriceAlert({ instrumentId: this.getInstrumentId() })\n                });\n\n                this.props.onClick();\n            }\n        },\n\n        render: function render() {\n            ///@TODO will be turned on in future\n            if (!settings.isLive() || !settings.isPriceAlertsEnabled()) {\n                return null;\n            }\n\n            var className = [this.state.isSet ? 'icon-bell-filled' : 'icon-bell'];\n\n            return React.createElement(\n                'div',\n                { onClick: this.onClick, className: 'btn btn-icon' },\n                React.createElement('div', { className: className.join(' ') })\n            );\n        }\n    });\n\n    module.exports = PriceAlertInfoButton;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/grid/jsx/price.alerts.info.button.jsx\n// module id = 2193\n// module chunks = 2 4 5 49\n\n//# sourceURL=webpack:///./src/js/modules/grid/jsx/price.alerts.info.button.jsx?");

/***/ }),

/***/ 2973:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var BaseView = __webpack_require__(15);\n    var Collection = __webpack_require__(50);\n    var Grid = __webpack_require__(864);\n    var GridConfig = __webpack_require__(292);\n    var GridCellInstrumentActions = __webpack_require__(2974);\n\n    var _ = __webpack_require__(0);\n    var core = __webpack_require__(5);\n    var empty = __webpack_require__(2976).default;\n    var user = __webpack_require__(10);\n    var priceAlertsCollection = __webpack_require__(230);\n    var subscriptions = __webpack_require__(62);\n\n    var PriceAlertsView = BaseView.extend({\n        collection: new Collection(),\n        tagName: 'div',\n\n        className: 'price-alerts-grid',\n\n        gridColumns: {\n            actions: {\n                type: GridCellInstrumentActions\n            }\n        },\n\n        events: function events() {\n            return this.addEvents(BaseView)({\n                'click .goto-trading': 'gotoTrading'\n            });\n        },\n\n\n        createCollection: function createCollection() {\n            var items = {};\n\n            priceAlertsCollection.each(function (priceAlert) {\n                items[priceAlert.getInstrument().getSymbol()] = priceAlert.getInstrument();\n            }, this);\n            items = _.values(items);\n            subscriptions.add(items);\n            this.collection.reset(items, { silent: false, merge: false, sort: true });\n        },\n\n        updateChartVisibility: function updateChartVisibility() {\n            var isAdvancedTradingView = user.getUserCommonData().isAdvancedTradingView();\n\n            if (isAdvancedTradingView) {\n                return;\n            }\n\n            var chartVisibilityTriggerName = this.collection.isEmpty() ? 'chart:display:hide' : 'chart:display:show';\n\n            core.trigger(chartVisibilityTriggerName);\n        },\n\n        initialize: function initialize(options) {\n            user.getAlertsStorage().loadAllAlertsData();\n            BaseView.prototype.initialize.apply(this, arguments);\n            priceAlertsCollection.on('add reset', this.priceAlertsUpdated, this);\n            this.collection.on('change:priceAlertsAvailability', this.priceAlertsUpdated, this);\n\n            this.createCollection();\n            this.updateChartVisibility();\n            this.render();\n        },\n\n        getColumnConfig: function getColumnConfig(columnName) {\n            return this.gridColumns[columnName] || GridConfig.getColumnConfig(columnName);\n        },\n\n        priceAlertsUpdated: function priceAlertsUpdated() {\n            this.createCollection();\n            this.selectInstrument();\n            this.updateChartVisibility();\n        },\n\n        getSelectedInstrument: function getSelectedInstrument() {\n            var appSettings = user.getApplicationSettings();\n\n            var selectedInstrument = this.collection.findWhere({ symbol: appSettings.get('tabs:alerts:selectedInstrumentSymbol') });\n\n            if (!selectedInstrument) {\n                selectedInstrument = this.collection.first();\n            }\n\n            if (selectedInstrument) {\n                appSettings.set('tabs:alerts:selectedInstrumentSymbol', selectedInstrument.get('symbol'));\n            }\n\n            return selectedInstrument;\n        },\n\n        selectInstrument: function selectInstrument() {\n            var selectedInstrument = this.getSelectedInstrument();\n\n            this.selectedRowId = null;\n\n            if (selectedInstrument && !user.getUserCommonData().isAdvancedTradingView()) {\n                core.trigger('ui:instruments:select-instrument', selectedInstrument.get('symbol'), selectedInstrument);\n\n                this.selectedRowId = selectedInstrument.cid;\n                setTimeout(function () {\n                    core.trigger('instrument:selected', selectedInstrument);\n                }, 1);\n            }\n        },\n\n        render: function render() {\n            BaseView.prototype.render.call(this);\n\n            this.selectInstrument();\n\n            this.gridView = Grid({\n                className: 'tab-price-alerts',\n                collection: this.collection,\n                initialSort: __('Instrument'),\n                empty: empty,\n\n                onRowClick: function onRowClick(event, model) {\n                    if (!user.getUserCommonData().isAdvancedTradingView()) {\n                        return;\n                    }\n\n                    var url = 'price-alerts/' + model.get('symbol');\n\n                    user.getApplicationSettings().set('tabs:alerts:selectedInstrumentSymbol', model.get('symbol'));\n                    core.trigger('ui:instruments:select-instrument', model.get('symbol'), model);\n                    core.navigate(url, { trigger: false, replace: true });\n                },\n\n                customRowsComponent: __webpack_require__(2977),\n                customRowComponent: __webpack_require__(2979),\n                columns: [this.getColumnConfig('instrumentName'), this.getColumnConfig('rateWithSellButton'), this.getColumnConfig('rateWithBuyButton'), this.getColumnConfig('change'), this.getColumnConfig('sentiment'), this.getColumnConfig('priceAlertNewButton')],\n                columnsMD: [this.getColumnConfig('instrumentNameWithChange'), this.getColumnConfig('blockRateWithSellButton'), this.getColumnConfig('blockRateWithBuyButton'), this.getColumnConfig('sentiment'), this.getColumnConfig('priceAlertNewButton')],\n                columnsSM: [this.getColumnConfig('instrumentNameWithChange'), this.getColumnConfig('blockRateWithSellButton'), this.getColumnConfig('blockRateWithBuyButton'), this.getColumnConfig('priceAlertNewButton')],\n                columnsXS: [this.getColumnConfig('instrumentNameWithChange'), this.getColumnConfig('blockRateWithSellButton'), this.getColumnConfig('blockRateWithBuyButton'), this.getColumnConfig('priceAlertNewButton')],\n                selectedRowId: this.selectedRowId\n            }, this.el);\n\n            core.trigger('chart:display:hide');\n        },\n\n        destroy: function destroy() {\n            BaseView.prototype.destroy.call(this);\n            priceAlertsCollection.off('add reset', this.priceAlertsUpdated, this);\n            this.collection.off('change:priceAlertsAvailability', this.priceAlertsUpdated, this);\n            this.gridView.destroy();\n        },\n\n        gotoTrading: function gotoTrading() {\n            core.trigger('chart:display:show');\n            core.navigate('#trading');\n        }\n    });\n\n    module.exports = PriceAlertsView;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/price-alerts/priceAlerts.view.js\n// module id = 2973\n// module chunks = 49\n\n//# sourceURL=webpack:///./src/js/modules/price-alerts/priceAlerts.view.js?");

/***/ }),

/***/ 2974:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var React = __webpack_require__(4);\n    var InstrumentInfoButton = __webpack_require__(2975);\n    var FavouriteInstrumentButton = __webpack_require__(861);\n    var PriceAlertsButton = __webpack_require__(2193);\n    var instruments = __webpack_require__(17);\n    var user = __webpack_require__(10);\n    var autoBind = __webpack_require__(37);\n    var device = __webpack_require__(18);\n\n    var GridCellInstrumentActions = function (_React$Component) {\n        _inherits(GridCellInstrumentActions, _React$Component);\n\n        function GridCellInstrumentActions(props) {\n            _classCallCheck(this, GridCellInstrumentActions);\n\n            var _this = _possibleConstructorReturn(this, (GridCellInstrumentActions.__proto__ || Object.getPrototypeOf(GridCellInstrumentActions)).call(this, props));\n\n            autoBind(_this);\n            var symbol = _this.props.model.get('symbol');\n            var instrument = instruments.getInstrumentBySymbol(symbol);\n\n            _this.state = {\n                symbol: symbol,\n                instrument: instrument,\n                isTradingOutOfTradingHoursIconEnabled: _this.getTradingOutOfTradingHoursIconEnabled(instrument.status)\n            };\n            return _this;\n        }\n\n        _createClass(GridCellInstrumentActions, [{\n            key: 'componentDidMount',\n            value: function componentDidMount() {\n                this.subscribe(this.state.instrument);\n            }\n        }, {\n            key: 'componentWillUnmount',\n            value: function componentWillUnmount() {\n                this.unsubscribe(this.state.instrument);\n            }\n        }, {\n            key: 'componentWillReceiveProps',\n            value: function componentWillReceiveProps(nextProps) {\n                var symbol = nextProps.model.get('symbol');\n\n                if (symbol !== this.state.symbol) {\n                    this.updateState(nextProps);\n                }\n            }\n        }, {\n            key: 'updateState',\n            value: function updateState(nextProps) {\n                this.unsubscribe(this.state.instrument);\n                var symbol = nextProps.get('symbol');\n                var instrument = instruments.getInstrumentBySymbol(symbol);\n\n                this.setState({\n                    symbol: symbol,\n                    instrument: instrument,\n                    isTradingOutOfTradingHoursIconEnabled: this.getTradingOutOfTradingHoursIconEnabled(instrument.status)\n                });\n\n                this.subscribe(this.state.instrument);\n            }\n        }, {\n            key: 'unsubscribe',\n            value: function unsubscribe(instrument) {\n                instrument.off('change:allowOrdersOutsideOfTradingHours', this.update, this);\n                instrument.off('change:outOfMarketHours', this.update, this);\n            }\n        }, {\n            key: 'subscribe',\n            value: function subscribe(instrument) {\n                instrument.on('change:allowOrdersOutsideOfTradingHours', this.update, this);\n                instrument.on('change:outOfMarketHours', this.update, this);\n            }\n        }, {\n            key: 'getTradingOutOfTradingHoursIconEnabled',\n            value: function getTradingOutOfTradingHoursIconEnabled(instrumentStatus) {\n                return user.getUserCommonData().isAdvancedTradingView() && !device.mobile() && instrumentStatus.canTradeOutsideOfTradingHours();\n            }\n        }, {\n            key: 'update',\n            value: function update() {\n                this.setState({\n                    isTradingOutOfTradingHoursIconEnabled: this.getTradingOutOfTradingHoursIconEnabled(this.state.instrument.status)\n                });\n            }\n        }, {\n            key: 'render',\n            value: function render() {\n                return React.createElement(\n                    'td',\n                    { className: this.props.className + ' actions' },\n                    React.createElement(\n                        'div',\n                        { className: 'actions' },\n                        this.state.isTradingOutOfTradingHoursIconEnabled && React.createElement(\n                            'div',\n                            { className: 'btn btn-icon', 'aria-label': __('icon.outside_of_trading_hours.tooltip') },\n                            React.createElement('div', { className: 'icon-oth icon-out-of-trading-hours' })\n                        ),\n                        React.createElement(FavouriteInstrumentButton, { symbol: this.state.symbol }),\n                        !this.props.isHidePriceAlertsButton && React.createElement(PriceAlertsButton, { model: this.props.model }),\n                        !this.props.isHideInstrumentInfoButton && React.createElement(InstrumentInfoButton, { model: this.props.model })\n                    )\n                );\n            }\n        }]);\n\n        return GridCellInstrumentActions;\n    }(React.Component);\n\n    GridCellInstrumentActions.defaultProps = {\n        isHidePriceAlertsButton: false,\n        isHideInstrumentInfoButton: false\n    };\n\n\n    module.exports = GridCellInstrumentActions;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/grid/jsx/grid.cell.instrument.actions.jsx\n// module id = 2974\n// module chunks = 49\n\n//# sourceURL=webpack:///./src/js/modules/grid/jsx/grid.cell.instrument.actions.jsx?");

/***/ }),

/***/ 2975:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var React = __webpack_require__(4);\n    var core = __webpack_require__(5);\n    var classSet = __webpack_require__(14);\n    var autoBind = __webpack_require__(37);\n\n    var InstrumentInfoButton = function (_React$Component) {\n        _inherits(InstrumentInfoButton, _React$Component);\n\n        function InstrumentInfoButton(props) {\n            _classCallCheck(this, InstrumentInfoButton);\n\n            var _this = _possibleConstructorReturn(this, (InstrumentInfoButton.__proto__ || Object.getPrototypeOf(InstrumentInfoButton)).call(this, props));\n\n            autoBind(_this);\n            return _this;\n        }\n\n        _createClass(InstrumentInfoButton, [{\n            key: 'onClick',\n            value: function onClick() {\n                var symbol = this.props.model.get('instrumentSymbol');\n\n                core.trigger('ui:instrument', symbol, false, true);\n            }\n        }, {\n            key: 'render',\n            value: function render() {\n                var className = this.props.className;\n\n                var classNames = classSet(_defineProperty({\n                    'icon-information': true\n                }, className, !!className));\n\n                return React.createElement(\n                    'div',\n                    { onClick: this.onClick, className: 'btn btn-icon' },\n                    React.createElement('div', { className: classNames })\n                );\n            }\n        }]);\n\n        return InstrumentInfoButton;\n    }(React.Component);\n\n    InstrumentInfoButton.defaultProps = {\n        model: ''\n    };\n\n\n    module.exports = InstrumentInfoButton;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/grid/jsx/instrument.info.button.jsx\n// module id = 2975\n// module chunks = 49\n\n//# sourceURL=webpack:///./src/js/modules/grid/jsx/instrument.info.button.jsx?");

/***/ }),

/***/ 2976:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_modules_user_user_model__ = __webpack_require__(10);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_modules_user_user_model___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_modules_user_user_model__);\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (function () {\n    var showButton = !__WEBPACK_IMPORTED_MODULE_1_modules_user_user_model___default.a.getUserCommonData().isAdvancedTradingView();\n    var text = showButton ? __('tab.price-alerts.empty.text') : __('tab.price-alerts.empty.text.advanced');\n\n    return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'div',\n        null,\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div', { className: 'icon icon-price-alerts-empty' }),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'div',\n            { className: 'caption' },\n            __('tab.price-alerts.empty.caption')\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'div',\n            { className: 'text' },\n            text\n        ),\n        showButton && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'a',\n            { className: 'btn btn-primary goto-trading', href: '#trading' },\n            __('tab.orders.empty.button')\n        )\n    );\n});\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/price-alerts/templates/priceAlerts.empty.jsx\n// module id = 2976\n// module chunks = 49\n\n//# sourceURL=webpack:///./src/js/modules/price-alerts/templates/priceAlerts.empty.jsx?");

/***/ }),

/***/ 2977:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var React = __webpack_require__(4);\n    var GridRow = __webpack_require__(466);\n    var SubRow = __webpack_require__(2978);\n    var instruments = __webpack_require__(17);\n\n    var GridRows = React.createClass({\n        displayName: 'GridRows',\n\n        getDefaultProps: function getDefaultProps() {\n            return {\n                columns: [],\n                collection: [],\n                screenSize: null,\n                customRowComponent: null,\n                customRowComponentXS: null,\n                customRowComponentSM: null,\n                customRowComponentMD: null,\n                customRowComponentLG: null,\n                onRowClick: function onRowClick() {},\n                selectedRowId: null\n            };\n        },\n\n        getInitialState: function getInitialState() {\n            return {\n                columns: this.props.columns,\n                collection: this.props.collection,\n                selectedRowId: this.props.selectedRowId,\n                viewport: {\n                    top: 0,\n                    height: 0\n                }\n            };\n        },\n\n        getComponent: function getComponent() {\n            var screenSize = this.props.screenSize;\n            var defaultRowComponent = this.props.customRowComponent || GridRow;\n\n            if (_.isEmpty(screenSize)) return defaultRowComponent;\n\n            var propName = 'customRowComponent' + screenSize;\n            var customRowComponent = this.props[propName];\n\n            return !_.isEmpty(customRowComponent) ? customRowComponent : defaultRowComponent;\n        },\n\n        setSelectedRow: function setSelectedRow(rowId) {\n            this.setState({ selectedRowId: rowId });\n        },\n\n        getSelectedRowElement: function getSelectedRowElement() {\n            var row = this.refs[this.state.selectedRowId + '-selected'];\n\n            return row && row.getHTMLElement();\n        },\n\n        onRowClick: function onRowClick(e, model) {\n            this.setState({\n                selectedRowId: model.cid\n            });\n\n            if (_.isFunction(this.props.onRowClick)) this.props.onRowClick(e, model);\n        },\n\n        componentWillMount: function componentWillMount() {\n            this.updateViewport = _.throttle(this.updateViewport, 500);\n        },\n\n        componentDidMount: function componentDidMount() {\n            this.updateViewport();\n        },\n\n        updateViewport: function updateViewport() {\n            if (!this.isMounted()) {\n                return;\n            }\n            if (!this.container.clientHeight) {\n                return;\n            }\n            this.setState({\n                viewport: {\n                    top: this.container.scrollTop,\n                    height: this.container.clientHeight\n                }\n            });\n        },\n\n        render: function render() {\n            var _this = this;\n\n            var columns = this.state.columns;\n            var Component = this.getComponent();\n            var selectedRowId = this.state.selectedRowId;\n            var rows = this.state.collection.map(function (model, i) {\n                var isSelected = model.get('isSelected') || selectedRowId == model.cid;\n                var instrument = instruments.getInstrumentBySymbol(model.get('symbol'));\n                var instrumentId = instrument && instrument.get('id');\n\n                return [React.createElement(Component, {\n                    key: model.cid + isSelected,\n                    columns: columns,\n                    model: model,\n                    ref: model.cid + '-selected',\n                    isSelected: isSelected,\n                    screenSize: this.props.screenSize,\n                    onRowClick: this.onRowClick\n                }), React.createElement(SubRow, {\n                    instrumentId: instrumentId,\n                    colSpan: this.props.columns.length\n                })];\n            }, this);\n\n            return React.createElement(\n                'tbody',\n                {\n                    className: 'rows',\n                    onScroll: this.updateViewport,\n                    ref: function ref(container) {\n                        _this.container = container;\n                    }\n                },\n                rows\n            );\n        }\n    });\n\n    module.exports = GridRows;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/price-alerts/components/rows.jsx\n// module id = 2977\n// module chunks = 49\n\n//# sourceURL=webpack:///./src/js/modules/price-alerts/components/rows.jsx?");

/***/ }),

/***/ 2978:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var React = __webpack_require__(4);\n    var GridCellPriceAlertActions = __webpack_require__(967);\n    var instruments = __webpack_require__(17);\n\n    module.exports = React.createClass({\n        displayName: 'exports',\n\n        getDefaultProps: function getDefaultProps() {\n            return {\n                instrumentId: null\n            };\n        },\n\n        getInitialState: function getInitialState() {\n            return {\n                hasAlerts: false,\n                invalidate: false\n            };\n        },\n\n        componentDidMount: function componentDidMount() {\n            this.listener('on');\n        },\n\n        componentWillUnmount: function componentWillUnmount() {\n            this.listener('off');\n        },\n\n        listener: function listener(subscribeType) {\n            var instrument = instruments.getInstrumentById(this.props.instrumentId);\n\n            if (!instrument) {\n                return;\n            }\n\n            instrument.getPriceAlerts()[subscribeType]('add delete reset', this.alertsCollectionUpdated, this);\n            instrument.getPriceAlerts()[subscribeType]('change', this.alertChanged, this);\n        },\n\n        forceUpdateFunction: function forceUpdateFunction() {\n            this.forceUpdate();\n        },\n\n        alertChanged: function alertChanged() {\n            this.setState({\n                invalidate: !this.state.invalidate\n            });\n        },\n\n        alertsCollectionUpdated: function alertsCollectionUpdated() {\n            this.setState({\n                hasAlerts: instruments.getInstrumentById(this.props.instrumentId).getSavedPriceAlerts().length > 0\n            });\n        },\n\n        getAmountLabel: function getAmountLabel(alert) {\n            return __(alert.getType().gridLabel);\n        },\n\n        getAlertComponent: function getAlertComponent(alert, i) {\n            var alertId = alert.getId();\n            var alertTypeName = alert.getType().get('localizationKey');\n            var alertTypeLocalizationKey = 'tab.price-alerts.table-labels.' + alertTypeName;\n            var notificationSettings = alert.get('sendTo');\n            var notifications = [];\n\n            _.each(notificationSettings, function (value, key) {\n                if (value) {\n                    notifications.push(__('tab.price-alerts.notification-types.' + key));\n                }\n            });\n\n            var gridLabel = this.getAmountLabel(alert);\n            var gridValue = alert.getParameterValue('paramValue1');\n\n            gridValue = alert.getType().gridValueFormatter(gridValue);\n\n            return React.createElement(\n                'div',\n                { className: 'subrow-expanded grid-12 grid-noGutter', key: alertId + '-alert' },\n                React.createElement(\n                    'div',\n                    { className: 'col-8 grid-middle' },\n                    React.createElement(\n                        'div',\n                        { className: 'col-4' },\n                        React.createElement('i', { className: 'icon-bell' }),\n                        React.createElement(\n                            'b',\n                            null,\n                            __(alertTypeLocalizationKey)\n                        )\n                    ),\n                    React.createElement(\n                        'div',\n                        { className: 'col-8 info' },\n                        gridValue && React.createElement(\n                            'span',\n                            { className: ['pa-amount', alertTypeName].join(' ') },\n                            gridLabel,\n                            ': ',\n                            React.createElement(\n                                'b',\n                                null,\n                                gridValue\n                            ),\n                            ',\\xA0'\n                        ),\n                        React.createElement(\n                            'span',\n                            { className: 'pa-notifications' },\n                            __('tab.price-alerts.grid.columns.notification-type'),\n                            ': ',\n                            React.createElement(\n                                'b',\n                                null,\n                                notifications.join(', ')\n                            )\n                        )\n                    )\n                ),\n                React.createElement(\n                    'div',\n                    { className: 'col-4 grid-middle grid-right' },\n                    React.createElement(GridCellPriceAlertActions, { model: alert, tagName: 'div' })\n                )\n            );\n        },\n\n        render: function render() {\n            var instrument = instruments.getInstrumentById(this.props.instrumentId);\n            var alerts = instrument.getSavedPriceAlerts();\n            var trClasses = ['row-expand', alerts.length === 0 ? 'hidden' : ''].join(' ');\n\n            return React.createElement(\n                'tr',\n                { className: trClasses },\n                React.createElement(\n                    'td',\n                    { colSpan: this.props.colSpan },\n                    alerts.map(function (alert, i) {\n                        return this.getAlertComponent(alert, i);\n                    }, this)\n                )\n            );\n        }\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/price-alerts/components/subrow.jsx\n// module id = 2978\n// module chunks = 49\n\n//# sourceURL=webpack:///./src/js/modules/price-alerts/components/subrow.jsx?");

/***/ }),

/***/ 2979:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var React = __webpack_require__(4);\n    var GridCell = __webpack_require__(291);\n    var instruments = __webpack_require__(17);\n\n    var GridRow = React.createClass({\n        displayName: 'GridRow',\n\n        getDefaultProps: function getDefaultProps() {\n            return {\n                model: null,\n                columns: [],\n                screenSize: null,\n                onRowClick: function onRowClick() {},\n                selectedRowClass: 'selected',\n                isSelected: false,\n                showOpenPositions: true,\n                showOrders: true\n            };\n        },\n\n        getInitialState: function getInitialState() {\n            var instrument = instruments.getInstrumentBySymbol(this.props.model.get('symbol'));\n\n            return {\n                hasExpand: instrument && instrument.getSavedPriceAlerts().length,\n                isLoaded: false,\n                viewportTop: 0,\n                viewportHeight: 0\n            };\n        },\n\n        getRenderCells: function getRenderCells() {\n            var model = this.props.model;\n\n            var map = this.props.columns.map(function (column, i) {\n                var type = column.type || GridCell;\n                var props = _.extend({}, column.cellProps, {\n                    key: i,\n                    column: column,\n                    model: model,\n                    isLoaded: this.state.isLoaded\n                });\n\n                return React.createElement(type, props);\n            }.bind(this));\n            return map;\n        },\n\n        getHTMLElement: function getHTMLElement() {\n            return this.refs.container;\n        },\n\n        onRowClick: function onRowClick(e) {\n            this.props.onRowClick(e, this.props.model);\n        },\n\n        componentWillMount: function componentWillMount() {\n            this.updateVisibilityStatus = _.throttle(this.updateVisibilityStatus, 500);\n        },\n\n        componentDidMount: function componentDidMount() {\n            this.listener('on');\n            this.updateVisibilityStatus();\n        },\n\n        componentWillUnmount: function componentWillUnmount() {\n            this.listener('off');\n        },\n\n        componentDidUpdate: function componentDidUpdate() {\n            this.updateVisibilityStatus();\n        },\n\n        updateVisibilityStatus: function updateVisibilityStatus() {\n            if (!this.isMounted()) {\n                return;\n            }\n            var domNode = this.getHTMLElement();\n\n            var parent = domNode.parentNode;\n\n            var min = parent.scrollTop;\n            var max = parent.scrollTop + parent.clientHeight;\n\n            var newState = {};\n\n            if (!this.state.isLoaded && this.state.viewportTop !== parent.scrollTop) {\n                newState.viewportTop = parent.scrollTop;\n            }\n            if (!this.state.isLoaded && this.state.viewportHeight !== parent.clientHeight) {\n                newState.viewportHeight = parent.clientHeight;\n            }\n            if (!this.state.isLoaded && min < domNode.offsetTop + domNode.clientHeight && domNode.offsetTop < max) {\n                newState.isLoaded = true;\n            }\n\n            if (Object.keys(newState).length) {\n                this.setState(newState);\n            }\n        },\n\n        listener: function listener(subscribeType) {\n            var instrument = instruments.getInstrumentBySymbol(this.props.model.get('symbol'));\n\n            if (!instrument) {\n                console.warn('can not found instrument ' + this.props.model.get('symbol'));\n                return;\n            }\n\n            instrument.getPriceAlerts()[subscribeType]('add change:id delete', this.update, this);\n        },\n\n        update: function update() {\n            var instrument = instruments.getInstrumentBySymbol(this.props.model.get('symbol'));\n\n            if (!instrument) return;\n\n            this.setState({\n                hasExpand: instrument.getSavedPriceAlerts().length > 0\n            });\n            this.updateVisibilityStatus();\n        },\n\n        render: function render() {\n            var className = ['row', this.props.isSelected ? this.props.selectedRowClass : '', this.state.hasExpand ? 'has-expand' : ''].join(' ');\n\n            return React.createElement(\n                'tr',\n                {\n                    ref: 'container',\n                    className: className,\n                    onClick: this.onRowClick },\n                this.getRenderCells()\n            );\n        }\n    });\n\n    module.exports = GridRow;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/price-alerts/components/row.jsx\n// module id = 2979\n// module chunks = 49\n\n//# sourceURL=webpack:///./src/js/modules/price-alerts/components/row.jsx?");

/***/ })

});