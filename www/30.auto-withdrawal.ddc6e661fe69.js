webpackJsonp([30],{

/***/ 2015:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function name(require, exorts, module) {\n    var AutoWithdrawalView = __webpack_require__(2827);\n    var AutoWithdrawalModel = __webpack_require__(2834);\n\n    module.exports = {\n        AutoWithdrawalView: AutoWithdrawalView,\n        AutoWithdrawalModel: AutoWithdrawalModel\n    };\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/auto-withdrawal/index.js\n// module id = 2015\n// module chunks = 30\n\n//# sourceURL=webpack:///./src/js/modules/auto-withdrawal/index.js?");

/***/ }),

/***/ 2151:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    module.exports = {\n        DEFAULT: 'DEFAULT',\n        EMPTY: 'EMPTY',\n        LOADING: 'LOADING',\n        ERROR: 'ERROR',\n        SUCCESS: 'SUCCESS',\n        CONFLICT: 'CONFLICT',\n        SAVING: 'SAVING',\n        PROCESSING: 'PROCESSING',\n        REQUESTING: 'REQUESTING',\n        UPLOADING: 'UPLOADING',\n        CONFIRM: 'CONFIRM',\n        CONFIRMED: 'CONFIRMED',\n        ENABLED: 'ENABLED',\n        DISABLED: 'DISABLED',\n        YES: 'YES',\n        NO: 'NO',\n        ACCEPTED: 'ACCEPTED',\n        REFUSED: 'REFUSED',\n        ERROR_ENTITY_TOO_LARGE: 'ERROR_ENTITY_TOO_LARGE',\n        VALIDATE: 'VALIDATE',\n        VALIDATION: 'VALIDATION',\n\n        LOADING_DIALOG_TYPE: 'LOADING_DIALOG_TYPE',\n        CONFIRM_DIALOG_TYPE: 'CONFIRM_DIALOG_TYPE',\n        CLEAR_DIALOG: 'CLEAR_DIALOG',\n\n        SHOW: 'SHOW',\n        HIDE: 'HIDE',\n\n        NEW: 'NEW',\n        APPROVED: 'APPROVED',\n        COMPLETED: 'COMPLETED',\n        REJECTED: 'REJECTED',\n        CANCELED: 'CANCELED',\n        FUNDS_REMOVED: 'FUNDS_REMOVED',\n        PENDING_FUNDS_REMOVAL: 'PENDING_FUNDS_REMOVAL',\n        PENDING_CANCELLATION: 'PENDING_CANCELLATION',\n\n        WIRE_TRANSFER: 'WIRE_TRANSFER',\n        CREDIT_CARD: 'CREDIT_CARD',\n\n        PERIOD_CUSTOM: 'custom',\n        PERIOD_1_YEAR: '1year',\n        PERIOD_3_MONTHS: '3months',\n        PERIOD_1_MONTH: '1month',\n        PERIOD_2_WEEKS: '2weeks',\n        PERIOD_1_WEEK: '1week',\n        PERIOD_ALL: 'all',\n        PERIOD_TODAY: 'today',\n\n        STATUS_IN_PROGRESS: 'in_progress',\n        STATUS_PROCESSED: 'processed',\n        STATUS_COMPLETED: 'completed',\n        STATUS_CANCELLED: 'cancelled',\n        STATUS_REJECTED: 'rejected',\n        STATUS_CANCELLING: 'cancelling',\n        STATUS_ALL: 'all',\n\n        WITHDRAW_AMOUNT_PATTERN: /^(0|[1-9]\\d*)(\\.|\\.\\d{1,2})?$/i\n    };\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/auto-withdrawal/consts.js\n// module id = 2151\n// module chunks = 30\n\n//# sourceURL=webpack:///./src/js/modules/auto-withdrawal/consts.js?");

/***/ }),

/***/ 2293:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var Model = __webpack_require__(16);\n    var server = __webpack_require__(11);\n    var settings = __webpack_require__(12);\n    var stream = __webpack_require__(29);\n\n    var _require = __webpack_require__(2151),\n        SUCCESS = _require.SUCCESS,\n        ERROR = _require.ERROR,\n        LOADING = _require.LOADING,\n        PROCESSING = _require.PROCESSING,\n        UPLOADING = _require.UPLOADING,\n        ERROR_ENTITY_TOO_LARGE = _require.ERROR_ENTITY_TOO_LARGE;\n\n    module.exports = Model.extend({\n        defaults: function defaults() {\n            return {\n                tabs: [],\n                currentTabId: '',\n                defaultTabId: '',\n                conversionResult: {},\n                bonuses: 0\n            };\n        },\n\n\n        europeanCountriesList: [\"AT\", \"BE\", \"BG\", \"HR\", \"CY\", \"CZ\", \"DK\", \"EE\", \"FI\", \"FR\", \"GF\", \"DE\", \"GI\", \"GR\", \"GP\", \"GG\", \"HU\", \"IS\", \"IE\", \"IT\", \"JE\", \"LV\", \"LI\", \"LU\", \"MT\", \"MQ\", \"YT\", \"MC\", \"NL\", \"NO\", \"PL\", \"PT\", \"RO\", \"PM\", \"SM\", \"SK\", \"SI\", \"ES\", \"SE\", \"CH\", \"GB\"\n        /*'Åland Islands',\n        'Austria',\n        'Azores',\n        'Belgium',\n        'Bulgaria',\n        'Canary Islands',\n        'Croatia',\n        'Cyprus',\n        'Czech Republic',\n        'Denmark',\n        'Estonia',\n        'Finland',\n        'France',\n        'French Guiana',\n        'Germany',\n        'Gibraltar',\n        'Greece',\n        'Guadeloupe',\n        'Guernsey',\n        'Hungary',\n        'Iceland',\n        'Ireland',\n        'Isle of Man',\n        'Italy',\n        'Jersey',\n        'Latvia',\n        'Liechtenstein',\n        'Lithuani',\n        'Luxembourg',\n        'Madeira',\n        'Malta',\n        'Martinique',\n        'Mayotte',\n        'Monaco',\n        'Netherlands',\n        'Norway',\n        'Poland',\n        'Portugal',\n        'Réunion',\n        'Romania',\n        'Saint Barthélemy',\n        'Saint Martin (French part)',\n        'Saint Pierre and Miquelon',\n        'San Marino',\n        'Slovakia',\n        'Slovenia',\n        'Spain',\n        'Sweden',\n        'Switzerland',\n        'United Kingdom'*/\n        ],\n\n        supportableCandidates: ['WIRE_TRANSFER', 'NET_TELLER', 'MONEY_BOOKERS'],\n\n        getCurrentTab: function getCurrentTab() {\n            return _.findWhere(this.get('tabs'), { id: this.getCurrentTabId() });\n        },\n        getCurrentTabId: function getCurrentTabId() {\n            var currentTabId = this.get('currentTabId');\n\n            if (!currentTabId) currentTabId = this.get('defaultTabId');\n\n            return currentTabId;\n        },\n        getCurrentTabName: function getCurrentTabName() {\n            return this.getCurrentTab().name;\n        },\n        getCurrentTabData: function getCurrentTabData() {\n            var tab = this.getCurrentTab();\n            var view = null;\n            var model = null;\n\n            if (tab) {\n                view = tab.viewClass || view;\n                model = tab.modelClass || model;\n            }\n\n            return { view: view, model: model };\n        },\n        getTabById: function getTabById(id) {\n            return _.findWhere(this.get('tabs'), { id: id });\n        },\n        enableAllTabs: function enableAllTabs() {\n            _.each(this.get('tabs'), function (item) {\n                return item.disable = false;\n            });\n        },\n        disableTabById: function disableTabById(id) {\n            var tab = this.getTabById(id);\n            if (tab) tab.disable = true;\n        },\n        enableTabById: function enableTabById(id) {\n            var tab = this.getTabById(id);\n            if (tab) tab.disable = false;\n        },\n        setCurrentTabById: function setCurrentTabById(id) {\n            var tab = this.getTabById(id);\n            if (tab) this.set({\n                currentTabId: tab.id,\n                currentTabName: tab.name\n            });\n\n            return tab;\n        },\n\n\n        /**\n         * Removes \"field_\" prefix for each key in object.\n         *\n         * input - data: { field_email: '', field_comment: '', ... }\n         * output: data: { email: '', comment: '', ... }\n         */\n        normalizeFormData: function normalizeFormData(data) {\n            return _.chain(data).pairs().reduce(function (memo, item) {\n                var key = String(item[0]).replace('field_', '');\n                memo[key] = item[1];\n                return memo;\n            }, {}).value();\n        },\n\n\n        setter: function setter(attrName) {\n            var _this = this;\n\n            return function (value) {\n                return _this.set(attrName, value);\n            };\n        },\n\n        checkAvailabilityOfFundsWithdrawal: function checkAvailabilityOfFundsWithdrawal() {\n            if (this.get('statusOfInfo') !== SUCCESS) throw 'Withdrawal info should be loaded.';\n        },\n        status: function status(attrName) {\n            var _this2 = this;\n\n            return function (status, data) {\n                var dataOfStatus = {};\n\n                dataOfStatus[attrName] = status;\n\n                _this2.set(_.extend({}, data, dataOfStatus));\n            };\n        },\n        isAutomaticWithdrawalEnabled: function isAutomaticWithdrawalEnabled() {\n            return settings.isAutomaticWithdrawalEnabled();\n        },\n        loadInfo: function loadInfo() {\n            var _this3 = this;\n\n            var status = this.status('statusOfInfo');\n\n            status(LOADING);\n\n            server.loadWithdrawalInfo().then(function (res) {\n                return _this3.filterInfo(res.data);\n            }).then(function (data) {\n                return status(SUCCESS, { info: data });\n            }).catch(function (err) {\n                return status(ERROR);\n            });\n        },\n        filterInfo: function filterInfo(list) {\n            // If Trader is not compliant then only accounts, which have pending deposits, are available for selection;\n            if (!this.isCompliance()) return _.filter(list, function (item) {\n                return item.pendingAmount > 0;\n            });\n\n            return list;\n        },\n        loadMethods: function loadMethods() {\n            var _this4 = this;\n\n            var user = __webpack_require__(10);\n            var status = this.status('statusOfMethods');\n\n            status(LOADING);\n\n            server.loadAllWithdrawalMethods().then(function (res) {\n                return status(SUCCESS, { methods: _this4.filterMethods(res.data) });\n            }).catch(function (err) {\n                return status(ERROR);\n            });\n        },\n        filterMethods: function filterMethods(list) {\n            if (!_.isArray) return [];\n\n            return _.uniq(list, function (item) {\n                return item.uniqueEntityId;\n            });\n        },\n        isMethodsEmpty: function isMethodsEmpty() {\n            return _.isEmpty(this.get('methods'));\n        },\n        isMethods: function isMethods() {\n            return !this.isMethodsEmpty();\n        },\n        getMethodById: function getMethodById(id) {\n            return _.findWhere(this.get('methods'), { uniqueEntityId: Number(id) }) || {};\n        },\n        uploadDocument: function uploadDocument(paymentAccountId, methodTypeId, fileType, file) {\n            var status = this.status('statusOfUpload');\n            var uploadProgress = this.status('uploadProgress');\n\n            status(UPLOADING);\n            uploadProgress(0);\n\n            if (!paymentAccountId || !methodTypeId || !fileType || !file) return status(ERROR);\n\n            var data = new FormData();\n\n            data.append('doc', file, file.name);\n\n            var config = {\n                onUploadProgress: function onUploadProgress(progressEvent) {\n                    var percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n                    uploadProgress(percentCompleted);\n                }\n            };\n\n            server.uploadWithdrawalMethodFile(paymentAccountId, methodTypeId, fileType, data, config).then(function (res) {\n                return status(SUCCESS, { document: res.data });\n            }).catch(function (err) {\n                if (err.response.status === 413) // 413 Request Entity Too Large\n                    return status(ERROR_ENTITY_TOO_LARGE);\n                status(ERROR);\n            });\n        },\n        loadCountries: function loadCountries() {\n            var status = this.status('statusOfCountries');\n\n            status(LOADING);\n\n            server.loadCountries().then(function (res) {\n                return status(SUCCESS, { countries: res.data });\n            }).catch(function (err) {\n                return status(ERROR);\n            });\n        },\n        loadBonuses: function loadBonuses(tradingAccountId) {\n            var status = this.status('statusOfBonuses');\n\n            status(LOADING, { bonuses: 0 });\n\n            server.loadActiveBonusesAmountForTradingAccount(tradingAccountId).then(function (res) {\n                return status(SUCCESS, { bonuses: res.data });\n            }).catch(function (err) {\n                return status(ERROR);\n            });\n        },\n        hasBonuses: function hasBonuses() {\n            return this.get('bonuses') > 0;\n        },\n        loadCandidates: function loadCandidates() {\n            var _this5 = this;\n\n            var status = this.status('statusOfCandidates');\n\n            status(LOADING);\n\n            server.loadWithdrawalCandidates().then(function (res) {\n                return status(SUCCESS, { candidates: _this5.filterCandidates(res.data) });\n            }).catch(function (err) {\n                return status(ERROR);\n            });\n        },\n        filterCandidates: function filterCandidates(list) {\n            var _this6 = this;\n\n            return _.filter(list, function (item) {\n                return _.contains(_this6.supportableCandidates, item.name);\n            });\n        },\n        isCandidatesEmpty: function isCandidatesEmpty() {\n            return _.isEmpty(this.get('candidates'));\n        },\n        getCandidateById: function getCandidateById(id) {\n            return _.findWhere(this.get('candidates'), { id: Number(id) });\n        },\n        isInfoEmpty: function isInfoEmpty() {\n            return _.isEmpty(this.get('info'));\n        },\n        isCompliance: function isCompliance() {\n            var conditions = __webpack_require__(60);\n            return conditions.COMPLIANCE_OR_COMPLIANCE_SUSPENDED() || conditions.LIMITED_COMPLIED();\n        },\n        isEuropean: function isEuropean(tradeAccountCurrency) {\n            var _this7 = this;\n\n            var user = __webpack_require__(10);\n            var userCountryCode = user.getUserData().getCrmboCustomer().country.toUpperCase();\n            var currencies = ['USD', 'GBP', 'NOK', 'SEK'];\n            var countryCodes = _.chain(this.get('countries')).map(function (item) {\n                if (_.contains(_this7.europeanCountriesList, item.code)) return item.code;\n            }).compact().value();\n\n            tradeAccountCurrency = String(tradeAccountCurrency).toUpperCase();\n\n            return _.contains(currencies, tradeAccountCurrency) && _.contains(countryCodes, userCountryCode);\n        },\n        isFundsWithdrawalAvailable: function isFundsWithdrawalAvailable() {\n            return _.some(this.get('info'), function (item) {\n                return item.amount > 0 || item.pendingAmount > 0;\n            });\n        },\n        getMinWithdrawalAmount: function getMinWithdrawalAmount(methodId, currency, amount) {\n            var minDefaultAmount = .01;\n            var method = this.getMethodById(methodId);\n            if (!method) return minDefaultAmount;\n\n            var res = _.findWhere(method.paymentMethodCurrencies, { currency: currency });\n            var minTO = res && res.minimumWithdrawalAmount;\n            var min = minTO ? minTO : minDefaultAmount;\n            return method.lastMoneyWdAllowed && min > amount ? minDefaultAmount : min;\n        },\n        loadConversion: function loadConversion(from, to) {\n            var status = this.status('statusOfConversion');\n            var pairs = {};\n\n            pairs[from + to] = 1;\n            pairs[to + from] = 1;\n\n            this.set('conversionResult', pairs);\n\n            status(LOADING);\n\n            var result = function result(from, to, res) {\n                pairs[from + to] = Number(res.data) || 1;\n                return pairs;\n            };\n            var load = function load(from, to) {\n                server.conversion(stream.getAtmosphereId(), from, to).then(function (res) {\n                    return result(SUCCESS, result(from, to, res));\n                }).catch(function (err) {\n                    return status(ERROR);\n                });\n            };\n\n            load(from, to);\n            load(to, from);\n        }\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/auto-withdrawal/base.model.js\n// module id = 2293\n// module chunks = 30\n\n//# sourceURL=webpack:///./src/js/modules/auto-withdrawal/base.model.js?");

/***/ }),

/***/ 2479:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var wizardElementsTemplates = __webpack_require__(86);\n    var config = __webpack_require__(45);\n\n    var _require = __webpack_require__(13),\n        PLATFORM_PREFIX = _require.PLATFORM_PREFIX,\n        CURRENCY_EUR = _require.CURRENCY_EUR;\n\n    var _require2 = __webpack_require__(2151),\n        CREDIT_CARD = _require2.CREDIT_CARD;\n\n    var control_UploadFile = function control_UploadFile(model, description) {\n        var disable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        return {\n            disable: disable,\n            template: wizardElementsTemplates.file,\n            name: 'field_doc',\n            description: description,\n            title: __('upload_documents.popup.other.select_file'),\n            validation: {\n                rules: {\n                    not_empty: function not_empty(data) {\n                        if (!data.field_doc) {\n                            return __('errors.required', __('fields.file'));\n                        }\n\n                        return true;\n                    }\n                }\n            }\n        };\n    };\n\n    var control_Email = function control_Email(model) {\n        var fieldName = __('fields.email');\n\n        return {\n            disable: false,\n            template: wizardElementsTemplates.inputBox,\n            savedData: model.get('field_email'),\n            title: fieldName,\n            name: 'field_email',\n            translationKey: '',\n            validation: {\n                rules: {\n                    not_empty: __('errors.required', fieldName),\n                    email: __('errors.invalid', fieldName)\n                }\n            }\n        };\n    };\n\n    var control_Comment = function control_Comment(model) {\n        return {\n            disable: false,\n            template: wizardElementsTemplates.textArea,\n            title: __('fields.comment'),\n            savedData: model.get('field_comment'),\n            name: 'field_comment',\n            translationKey: '',\n            settings: {\n                rows: 4,\n                cols: 10\n            }\n        };\n    };\n    var control_Radio = function control_Radio(model, label, name, items, tooltip) {\n        return {\n            disable: false,\n            template: wizardElementsTemplates.radio,\n            label: label,\n            name: name,\n            items: items,\n            tooltip: tooltip\n        };\n    };\n\n    var control_BeneficiaryName = function control_BeneficiaryName(model) {\n        var fieldName = __('fields.beneficiary_name');\n\n        return {\n            disable: false,\n            template: wizardElementsTemplates.inputBox,\n            title: fieldName,\n            savedData: model.get('field_beneficiaryName'),\n            name: 'field_beneficiaryName',\n            translationKey: '',\n            validation: {\n                rules: {\n                    not_empty: __('errors.required', fieldName)\n                }\n            }\n        };\n    };\n\n    var control_Input = function control_Input(model, controlName, controlTitle, addonText, type, validation) {\n        return {\n            disable: false,\n            template: addonText ? wizardElementsTemplates.inputAddon : wizardElementsTemplates.inputBox,\n            title: controlTitle,\n            name: controlName,\n            translationKey: '',\n            type: type,\n            addonText: '$',\n            validation: validation || {\n                rules: {\n                    not_empty: __('errors.required', controlTitle)\n                }\n            }\n        };\n    };\n    var control_Countries = function control_Countries(model, controlName, controlTitle, attrName) {\n        return {\n            disable: false,\n            template: wizardElementsTemplates.selectBox,\n            title: controlTitle,\n            name: controlName,\n            savedData: model.get('selectedDefaultCountry'),\n            options: _.isEmpty(model.get(attrName)) ? [] : _.filter(model.get(attrName), function (item) {\n                return !_.contains(['0'], item.phoneCode);\n            }),\n            transformOptionsValue: function transformOptionsValue(value) {\n                return value.code;\n            },\n            transformOptionText: function transformOptionText(value) {\n                return __('country.name.' + value.code);\n            },\n            translationKey: '',\n            validation: {\n                rules: {\n                    not_empty: __('errors.required', controlTitle)\n                }\n            }\n        };\n    };\n\n    var control_PlatformAccountDropdown = function control_PlatformAccountDropdown(model, attrName) {\n        var fieldName = __('auto.withdrawal.trading_account');\n\n        return {\n            disable: false,\n            template: wizardElementsTemplates.selectBox,\n            title: fieldName,\n            name: 'field_platformAccountId',\n            savedData: _.first(model.get(attrName)).platformAccountId,\n            options: model.get(attrName),\n            transformOptionsValue: function transformOptionsValue(value) {\n                return value.platformAccountId;\n            },\n            transformOptionText: function transformOptionText(value) {\n                var userName = value.userName,\n                    platformAccountId = value.platformAccountId,\n                    tradePlatformType = value.tradePlatformType,\n                    currency = value.currency;\n\n                var name = config.tradePlatformIds2NameMap[tradePlatformType];\n\n                name = name === PLATFORM_PREFIX ? __('brand.name') : name;\n\n                return name + ' Trader - ' + platformAccountId + ' - ' + String(currency).toUpperCase();\n            },\n            translationKey: '',\n            validation: {\n                rules: {\n                    not_empty: __('errors.required', fieldName)\n                }\n            }\n        };\n    };\n\n    /**\n     * \n     * @param {*} model \n     * @param {Object} options:Object - {\n     *  defaultAttrName,\n     *  title,\n     *  name,\n     *  attrName,\n     *  customValue,\n     *  valueKey, \n     *  textKey, \n     *  validation \n     * }\n     * @return {Object}\n     */\n    var control_Dropdown = function control_Dropdown(model, options) {\n        var defaultValue = undefined;\n\n        if (options.selected) {\n            defaultValue = model.get(options.selected) || defaultValue;\n        }\n\n        return {\n            disable: false,\n            template: wizardElementsTemplates.selectBox,\n            title: options.title,\n            name: options.name,\n            savedData: defaultValue,\n            options: model.get(options.attrName),\n            transformOptionsValue: options.customValue ? options.customValue : function (item) {\n                return item[options.valueKey || 'id'];\n            },\n            transformOptionText: options.customText ? options.customText : function (item) {\n                return item[options.textKey || 'text'];\n            },\n            translationKey: '',\n            validation: options.validation,\n            minDate: options.minDate,\n            maxDate: options.maxDate\n        };\n    };\n\n    var control_Datepicker = function control_Datepicker(model, options) {\n        var defaultValue = undefined;\n\n        if (options.selected) {\n            defaultValue = model.get(options.selected) || defaultValue;\n        }\n\n        return {\n            disable: false,\n            template: wizardElementsTemplates.datepicker,\n            title: options.title,\n            name: options.name,\n            savedData: defaultValue,\n            transformOptionsValue: options.customValue ? options.customValue : function (item) {\n                return item[options.valueKey || 'id'];\n            },\n            transformOptionText: options.customText ? options.customText : function (item) {\n                return item[options.textKey || 'text'];\n            },\n            translationKey: '',\n            validation: options.validation\n        };\n    };\n\n    var control_MethodDropdown = function control_MethodDropdown(model, attrName, defaultAttrName) {\n        var fieldName = __('auto.withdrawal.select_method');\n        var defaultValue = undefined;\n\n        if (defaultAttrName) {\n            defaultValue = model.get(defaultAttrName) || defaultValue;\n        }\n\n        return {\n            disable: false,\n            template: wizardElementsTemplates.selectBox,\n            title: fieldName,\n            name: 'field_methodId',\n            savedData: defaultValue,\n            options: model.get(attrName),\n            transformOptionsValue: function transformOptionsValue(value) {\n                return value.uniqueEntityId;\n            },\n            transformOptionText: function transformOptionText(value) {\n                var paymentMethodName = value.paymentMethodName,\n                    methodType = value.methodType,\n                    accountId = value.accountId,\n                    last4Digits = value.last4Digits,\n                    email = value.email,\n                    accountNumber = value.accountNumber,\n                    iBan = value.iBan,\n                    creditCardType = value.creditCardType;\n\n                var formats = {\n                    NET_TELLER: accountId,\n                    MONEY_BOOKERS: email,\n                    PAY_PAL: email,\n                    CREDIT_CARD: last4Digits,\n                    WIRE_TRANSFER: accountNumber || iBan\n                };\n\n                if (methodType === CREDIT_CARD) {\n                    return __('payment_methods.format.CREDIT_CARD', creditCardType || __('payment_methods.name.CREDIT_CARD'), last4Digits);\n                }\n\n                return __('payment_methods.format.' + methodType, formats[methodType]);\n            },\n            translationKey: '',\n            validation: {\n                rules: {\n                    not_empty: __('errors.required', fieldName)\n                }\n            }\n        };\n    };\n\n    var tradingAccountForm = function tradingAccountForm(model) {\n        return {\n            form: [[control_PlatformAccountDropdown(model, 'accountsToManage')]]\n        };\n    };\n\n    var selectCandidateForm = function selectCandidateForm(model) {\n        return {\n            form: [[{\n                disable: false,\n                template: wizardElementsTemplates.selectBox,\n                title: __('auto.withdrawal.select_method'),\n                name: 'field_methodTypeId',\n                options: model.get('candidates'),\n                transformOptionsValue: function transformOptionsValue(value) {\n                    return value.id;\n                },\n                transformOptionText: function transformOptionText(value) {\n                    return __('payment_methods.name.' + value.name);\n                },\n                translationKey: ''\n            }]]\n        };\n    };\n\n    var accountsForm = function accountsForm(model) {\n        return {\n            form: [[control_PlatformAccountDropdown(model, 'info')]]\n        };\n    };\n\n    var methodsForm = function methodsForm(model) {\n        return {\n            form: [[control_MethodDropdown(model, 'methods', 'selectedPaymentId')]]\n        };\n    };\n    var amountForm = function amountForm(model) {\n        return {\n            form: [[control_Input(model, 'field_amount', __('fields.amount'), '$', 'text', {\n                filters: ['trim', 'number'],\n                rules: {\n                    not_empty: __('auto.withdrawal.form.errors.amount.required'),\n                    min_gt: [0, __('auto.withdrawal.form.errors.amount.min')]\n                }\n            })]]\n        };\n    };\n    var documentForm = function documentForm(model) {\n        return {\n            form: [[control_UploadFile(model, __('auto.withdrawal.revoke.file.note'), true)]]\n        };\n    };\n    var convertForm = function convertForm(model) {\n        return {\n            form: [[control_Radio(model, __('convert.amount'), 'field_currency', [{ text: model.get('tradeAccountCurrency'), value: model.get('tradeAccountCurrency') }, { text: CURRENCY_EUR, value: CURRENCY_EUR, checked: true }], __('convert.amount.tooltip'))]]\n        };\n    };\n    var periodForm = function periodForm(model) {\n        return {\n            form: [[control_Dropdown(model, {\n                defaultAttrName: '',\n                title: '',\n                name: 'field_period',\n                attrName: 'periods',\n                customValue: function customValue(value) {\n                    return value.id;\n                },\n                customText: function customText(text) {\n                    return text.text;\n                },\n                selected: 'selectedPeriod',\n                valueKey: 'value',\n                textKey: 'text'\n            })]]\n        };\n    };\n    var periodBeginForm = function periodBeginForm(model) {\n        return {\n            form: [[control_Datepicker(model, {\n                defaultAttrName: '',\n                name: 'field_periodBegin',\n                selected: 'field_periodBegin',\n                maxDate: +new Date()\n            })]]\n        };\n    };\n    var periodEndForm = function periodEndForm(model) {\n        return {\n            form: [[control_Datepicker(model, {\n                defaultAttrName: '',\n                name: 'field_periodEnd',\n                selected: 'field_periodEnd',\n                maxDate: +new Date()\n            })]]\n        };\n    };\n    var statusesForm = function statusesForm(model) {\n        return {\n            form: [[control_Dropdown(model, {\n                defaultAttrName: '',\n                title: '',\n                name: 'field_status',\n                attrName: 'statuses',\n                customValue: function customValue(value) {\n                    return value.id;\n                },\n                customText: function customText(text) {\n                    return text.text;\n                },\n                selected: 'selectedStatus',\n                valueKey: 'value',\n                textKey: 'text'\n            })]]\n        };\n    };\n\n    var MONEY_BOOKERS = function MONEY_BOOKERS(model) {\n        return {\n            form: [[control_Email(model), control_BeneficiaryName(model), control_Comment(model), control_UploadFile(model, __('auto.withdrawal.upload.desc', __('payment_methods.name.MONEY_BOOKERS')))]]\n        };\n    };\n\n    var NET_TELLER = function NET_TELLER(model) {\n        return {\n            form: [[control_Input(model, 'field_accountId', __('fields.neteller_id')), control_BeneficiaryName(model), control_Comment(model), control_UploadFile(model, __('auto.withdrawal.upload.desc', __('payment_methods.name.NET_TELLER')))]]\n        };\n    };\n\n    var WIRE_TRANSFER = function WIRE_TRANSFER(model) {\n        return {\n            form: [[control_Input(model, 'field_bankName', __('fields.bank_name')), control_Input(model, 'field_bankAddress', __('fields.bank_address')), control_Countries(model, 'field_bankCountry', __('fields.bank_country'), 'countries'), control_Input(model, 'field_accountNumber', __('fields.account_number')), control_Input(model, 'field_iban', 'IBAN'), control_Input(model, 'field_swift', 'SWIFT'), control_BeneficiaryName(model), control_Comment(model), control_UploadFile(model, __('auto.withdrawal.upload.desc.WIRE_TRANSFER'))]]\n        };\n    };\n\n    module.exports = {\n        tradingAccountForm: tradingAccountForm,\n        MONEY_BOOKERS: MONEY_BOOKERS,\n        NET_TELLER: NET_TELLER,\n        WIRE_TRANSFER: WIRE_TRANSFER,\n        accountsForm: accountsForm,\n        methodsForm: methodsForm,\n        amountForm: amountForm,\n        selectCandidateForm: selectCandidateForm,\n        documentForm: documentForm,\n        convertForm: convertForm,\n        periodForm: periodForm,\n        periodBeginForm: periodBeginForm,\n        periodEndForm: periodEndForm,\n        statusesForm: statusesForm\n    };\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/auto-withdrawal/form.configs.js\n// module id = 2479\n// module chunks = 30\n\n//# sourceURL=webpack:///./src/js/modules/auto-withdrawal/form.configs.js?");

/***/ }),

/***/ 2827:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_, $) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var core = __webpack_require__(5);\n    var $ = __webpack_require__(7);\n    var PopupView = __webpack_require__(87);\n    var template = _.template(__webpack_require__(2828));\n    var WithdrawalNotAvailableView = __webpack_require__(2829);\n    var CustomDialogView = __webpack_require__(2831);\n    var LoadingView = __webpack_require__(35);\n    var MessageView = __webpack_require__(63);\n\n    var _require = __webpack_require__(2151),\n        CONFIRM_DIALOG_TYPE = _require.CONFIRM_DIALOG_TYPE,\n        LOADING_DIALOG_TYPE = _require.LOADING_DIALOG_TYPE,\n        MESSAGE_DIALOG_TYPE = _require.MESSAGE_DIALOG_TYPE,\n        SHOW = _require.SHOW,\n        HIDE = _require.HIDE,\n        CLEAR_DIALOG = _require.CLEAR_DIALOG,\n        SUCCESS = _require.SUCCESS,\n        ERROR = _require.ERROR;\n\n    var FundsWithdrawalView = PopupView.extend({\n        className: 'funds-withdrawal',\n        name: 'funds-withdrawal',\n        events: function events() {\n            return this.addEvents(PopupView)({\n                'click .fn-tab': 'changeTab'\n            });\n        },\n\n        initialize: function initialize(options) {\n            PopupView.prototype.initialize.apply(this, arguments);\n            this.listenTo(this.model, 'change:currentTabId', this.updateTab);\n            this.listenTo(core, 'funds-withdrawal:withdrawal:dialog', this.modalDialog);\n            this.listenTo(core, 'funds-withdrawal:withdrawal:state', this.updateState);\n            this.listenTo(core, 'funds-withdrawal:close', this.close);\n            this.listenTo(this.model, 'change:statusOfInfo', this.loadCompleted);\n\n            this.render();\n        },\n\n        render: function render() {\n            PopupView.prototype.render.call(this);\n\n            this.setContent(template({\n                options: this.options,\n                model: this.model.toJSON(),\n                isFundsWithdrawalAvailable: this.model.isFundsWithdrawalAvailable()\n            }));\n\n            return this;\n        },\n\n        updateTab: function updateTab() {\n            var theModel = this.model;\n\n            var _theModel$getCurrentT = theModel.getCurrentTabData(),\n                view = _theModel$getCurrentT.view,\n                model = _theModel$getCurrentT.model;\n\n            var tabId = theModel.getCurrentTabId();\n\n            this.addChildView('.tab-content', view, { model: new model({\n                    selectedPaymentId: theModel.get('selectedPaymentId'),\n                    isCompliance: theModel.get('isCompliance'),\n                    pendingDeposits: theModel.get('pendingDeposits')\n                }) });\n\n            this.$('.header-container-xs .caption').html(__(theModel.getCurrentTabName()));\n            this.$('.tab').removeClass('active');\n            this.$('.tab[data-tab-id=' + tabId + ']').addClass('active');\n        },\n\n        changeTab: function changeTab(event) {\n            this.model.setCurrentTabById($(event.currentTarget).attr('data-tab-id'));\n        },\n\n        updateState: function updateState(state) {\n            this.model.set(state);\n        },\n        loadCompleted: function loadCompleted() {\n            var _this = this;\n\n            var model = this.model;\n            var statusOfInfo = model.get('statusOfInfo');\n\n            if (statusOfInfo == ERROR) return this.loadError();\n            if (statusOfInfo != SUCCESS) return;\n\n            this.render();\n\n            if (!model.isFundsWithdrawalAvailable()) {\n                this.addChildView('.funds-withdrawal-content', WithdrawalNotAvailableView, {\n                    text: __('auto.withdrawal.no_funds'),\n                    buttonText: __('actions.deposit'),\n                    onClose: function onClose() {\n                        return _this.close();\n                    }\n                });\n            } else this.updateTab();\n        },\n        loadError: function loadError() {\n            this.modalDialog({ type: MESSAGE_DIALOG_TYPE, title: __('auto.withdrawal.error'), text: __('auto.withdrawal.error.text') });\n        },\n\n\n        clickOnDepositFunds: function clickOnDepositFunds() {\n            this.close();\n            core.trigger('ui:deposit');\n        },\n\n        modalDialog: function modalDialog(options) {\n            var _this2 = this;\n\n            var uiDialogContainer = '.modal-dialog-container';\n            var type = options.type;\n\n            var $uiContainer = this.$(uiDialogContainer);\n            var display = function display(value) {\n                return $uiContainer.css('display', value);\n            };\n            var addClass = function addClass(className) {\n                return $uiContainer.addClass(className);\n            };\n            var removeClass = function removeClass(className) {\n                return $uiContainer.removeClass(className);\n            };\n            var clearChildView = function clearChildView() {\n                return _this2.removeChildView(uiDialogContainer);\n            };\n\n            switch (type) {\n                case CLEAR_DIALOG:\n                    display('none');\n                    this.removeChildView(uiDialogContainer);\n                    break;\n                case MESSAGE_DIALOG_TYPE:\n                    display('block');\n                    this.addChildView(uiDialogContainer, CustomDialogView, {\n                        parent: $uiContainer,\n                        title: options.title,\n                        text: options.text,\n                        template: _.template(__webpack_require__(2833)),\n                        final: function final() {\n                            display('none');\n                            clearChildView();\n                        }\n                    });\n                    break;\n                case LOADING_DIALOG_TYPE:\n                    if (options.action == HIDE) {\n                        display('none');\n                        clearChildView();\n                        break;\n                    }\n                    if (this.prevType == type) break;\n                    display('block');\n                    this.addChildView(uiDialogContainer, LoadingView, { translucent: 'no' });\n                    break;\n                case CONFIRM_DIALOG_TYPE:\n                    core.trigger('ui:confirm', {\n                        parent: this.$(uiDialogContainer),\n                        title: options.title,\n                        text: options.text,\n                        textYes: __('yes'),\n                        textNo: __('no'),\n                        yes: function yes() {\n                            return options.yes();\n                        },\n                        no: function no() {\n                            return options.no();\n                        }\n                    });\n                    break;\n            }\n\n            this.prevType = type;\n        }\n    });\n\n    module.exports = FundsWithdrawalView;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(7)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/auto-withdrawal/auto.withdrawal.view.js\n// module id = 2827\n// module chunks = 30\n\n//# sourceURL=webpack:///./src/js/modules/auto-withdrawal/auto.withdrawal.view.js?");

/***/ }),

/***/ 2828:
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"popup-header popup-header-bg-style-grey popup-header-style-default hidden-xs\\\">\\n    <div class=\\\"popup-caption flex flex-valign-center\\\">\\n        <span>\\n            <span class=\\\"color-platform-text-color\\\"><%= __('withdraw.title') %></span>\\n        </span>\\n    </div>\\n    <div class=\\\"popup-actions fn-close-popup btn\\\">\\n        <i class=\\\"icon-close-blue\\\"></i>\\n    </div>\\n</div>\\n\\n<div class=\\\"visible-xs header-container-xs\\\">\\n    <div class=\\\"left flex fn-close-popup flex-valign-center btn\\\">\\n        <div class=\\\"icon arrow\\\"></div>\\n        <b><%-__('actions.back') %></b>\\n    </div>\\n    <div class=\\\"caption flex flex-valign-center flex-align-center\\\">\\n        <%-model.currentTabName || model.currentTabNameMobile%>\\n    </div>\\n    <div class=\\\"right flex flex-valign-center btn\\\"></div>\\n</div>\\n\\n<div class=\\\"funds-withdrawal-content\\\">\\n    <div class=\\\"modal-dialog-container\\\"></div>\\n    <% if (isFundsWithdrawalAvailable) { %>\\n        <div class=\\\"tabs flex flex-row flex-align-start hidden-xs\\\">\\n            <% _.each(model.tabs, function(v) { %>\\n                <div class=\\\"tab fn-tab flex flex-stretch flex-valign-center active <%- model.currentTabId == v.id ? 'active' : '' %>\\\" data-tab-id=\\\"<%- v.id %>\\\"><%- v.name %></div>\\n            <% }) %>\\n        </div>\\n\\n        <div class=\\\"tab-content\\\"></div>\\n    <% } %>\\n</div>\";\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/auto-withdrawal/templates/auto.withdrawal.html\n// module id = 2828\n// module chunks = 30\n\n//# sourceURL=webpack:///./src/js/modules/auto-withdrawal/templates/auto.withdrawal.html?");

/***/ }),

/***/ 2829:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var View = __webpack_require__(15);\n    var _ = __webpack_require__(0);\n    var core = __webpack_require__(5);\n    var settings = __webpack_require__(12);\n\n    var template = _.template(__webpack_require__(2830));\n\n    module.exports = View.extend({\n        className: 'withdrawal-not-available',\n\n        events: function events() {\n            return this.addEvents(View)({\n                'click .btn': 'buttonClick'\n            });\n        },\n        render: function render() {\n            View.prototype.render.call(this);\n\n            this.$el.html(template({\n                options: this.options,\n                settings: settings\n            }));\n\n            return this;\n        },\n\n        buttonClick: function buttonClick() {\n            core.trigger('ui:deposit');\n            this.options.onClose();\n            this.destroy();\n        }\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/auto-withdrawal/withdrawal.not.available.view.js\n// module id = 2829\n// module chunks = 30\n\n//# sourceURL=webpack:///./src/js/modules/auto-withdrawal/withdrawal.not.available.view.js?");

/***/ }),

/***/ 2830:
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"funds-withdrawal-body\\\">\\n    <strong><%=options.text%></strong>\\n</div>\\n\\n<div class=\\\"funds-withdrawal-actions\\\">\\n    <div class=\\\"footer flex flex-row flex-valign-center\\\">\\n        <% if (settings.isLiveChatEnabled()) { %>\\n        <div class=\\\"flex-stretch\\\">\\n            <%=__('help.need_help')%> <a href=\\\"#\\\" class=\\\"fn-help-live-chat-link\\\"><%=__('help.right_here')%></a>\\n        </div>\\n        <% } %>\\n        <div>\\n            <button class=\\\"btn btn-primary\\\"><%-options.buttonText%></button>\\n        </div>\\n    </div>\\n</div>\\n\\n\";\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/auto-withdrawal/templates/withdrawal.not.available.html\n// module id = 2830\n// module chunks = 30\n\n//# sourceURL=webpack:///./src/js/modules/auto-withdrawal/templates/withdrawal.not.available.html?");

/***/ }),

/***/ 2831:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var View = __webpack_require__(15);\n    var template = _.template(__webpack_require__(2832));\n    var moment = __webpack_require__(6);\n    var numbro = __webpack_require__(36);\n    var user = __webpack_require__(10);\n    var $ = __webpack_require__(7);\n\n    var StatusesView = View.extend({\n        className: 'custom-confirm flex flex-column flex-align-center flex-valign-center',\n\n        events: function events() {\n            return this.addEvents(View)({\n                'click .fn-yes': 'yes',\n                'click .fn-no': 'no'\n            });\n        },\n        initialize: function initialize() {\n            View.prototype.initialize.apply(this, arguments);\n        },\n        render: function render() {\n            View.prototype.render.call(this);\n            var tmpl = this.options.template || template;\n            this.$el.html(tmpl(this.options));\n            return this;\n        },\n        yes: function yes(event) {\n            event.preventDefault();\n            this.destroy();\n            this.handle('yes');\n            this.handle('final');\n        },\n        no: function no(event) {\n            event.preventDefault();\n            this.destroy();\n            this.handle('no');\n            this.handle('final');\n        },\n        handle: function handle(name) {\n            var handler = this.options[name];\n\n            _.isFunction(handler) && handler();\n        }\n    });\n\n    module.exports = StatusesView;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/auto-withdrawal/custom.dialog.view.js\n// module id = 2831\n// module chunks = 30\n\n//# sourceURL=webpack:///./src/js/modules/auto-withdrawal/custom.dialog.view.js?");

/***/ }),

/***/ 2832:
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"modal-dialog-panel flex flex-column flex-align-center flex-valign-center custom-confirm\\\">\\n    <div class=\\\"title\\\"><%=title%></div>\\n    <div class=\\\"text\\\"><%=text%></div>\\n\\n    <div class=\\\"flex actions\\\">\\n        <button class=\\\"btn btn-primary fn-yes\\\"><%-__('yes')%></button>\\n        <button class=\\\"btn btn-secondary fn-no\\\"><%-__('no')%></button>\\n    </div>\\n</div>\";\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/auto-withdrawal/templates/custom_confirm.html\n// module id = 2832\n// module chunks = 30\n\n//# sourceURL=webpack:///./src/js/modules/auto-withdrawal/templates/custom_confirm.html?");

/***/ }),

/***/ 2833:
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"modal-dialog-panel flex flex-column flex-align-center flex-valign-center custom-confirm\\\">\\n    <div class=\\\"title\\\"><%=title%></div>\\n    <div class=\\\"text\\\"><%=text%></div>\\n\\n    <div class=\\\"flex actions\\\">\\n        <button class=\\\"btn btn-primary fn-yes\\\"><%-__('ok')%></button>\\n    </div>\\n</div>\";\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/auto-withdrawal/templates/custom_message.html\n// module id = 2833\n// module chunks = 30\n\n//# sourceURL=webpack:///./src/js/modules/auto-withdrawal/templates/custom_message.html?");

/***/ }),

/***/ 2834:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var Model = __webpack_require__(16);\n    var WithdrawalView = __webpack_require__(2835);\n    var WithdrawalModel = __webpack_require__(2837);\n    var StatusesView = __webpack_require__(2838);\n    var StatusesModel = __webpack_require__(2842);\n    var MethodsView = __webpack_require__(2843);\n    var MethodsModel = __webpack_require__(2846);\n    var BaseModel = __webpack_require__(2293);\n\n    module.exports = BaseModel.extend({\n        defaults: function defaults() {\n            var text = __group('auto.withdrawal.tab.');\n            var conditions = __webpack_require__(60);\n            return {\n                tabs: [{ id: 'withdrawal', name: text('withdrawal'), viewClass: WithdrawalView, modelClass: WithdrawalModel }, { id: 'methods', name: text('manage'), viewClass: MethodsView, modelClass: MethodsModel }, { id: 'statuses', name: text('statuses'), viewClass: StatusesView, modelClass: StatusesModel }],\n                currentTabId: 'withdrawal',\n                defaultTabId: 'withdrawal',\n                selectedPaymentId: 0,\n                isCompliance: conditions.COMPLIANCE_OR_COMPLIANCE_SUSPENDED() || conditions.LIMITED_COMPLIED(),\n                pendingDeposits: conditions.PENDING_DEPOSIT()\n            };\n        },\n        initialize: function initialize() {\n            this.loadInfo();\n        }\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/auto-withdrawal/auto.withdrawal.model.js\n// module id = 2834\n// module chunks = 30\n\n//# sourceURL=webpack:///./src/js/modules/auto-withdrawal/auto.withdrawal.model.js?");

/***/ }),

/***/ 2835:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var LoadingView = __webpack_require__(35);\n    var MultipleFormsView = __webpack_require__(868);\n    var FormConfigs = __webpack_require__(2479);\n    var core = __webpack_require__(5);\n    var user = __webpack_require__(10);\n    var settings = __webpack_require__(12);\n\n    var template = _.template(__webpack_require__(2836));\n\n    var _require = __webpack_require__(2151),\n        EMPTY = _require.EMPTY,\n        LOADING = _require.LOADING,\n        ERROR = _require.ERROR,\n        SUCCESS = _require.SUCCESS,\n        MESSAGE_DIALOG_TYPE = _require.MESSAGE_DIALOG_TYPE,\n        NO = _require.NO,\n        YES = _require.YES,\n        VALIDATE = _require.VALIDATE,\n        PROCESSING = _require.PROCESSING,\n        LOADING_DIALOG_TYPE = _require.LOADING_DIALOG_TYPE,\n        CONFIRM_DIALOG_TYPE = _require.CONFIRM_DIALOG_TYPE,\n        CLEAR_DIALOG = _require.CLEAR_DIALOG,\n        WIRE_TRANSFER = _require.WIRE_TRANSFER,\n        WITHDRAW_AMOUNT_PATTERN = _require.WITHDRAW_AMOUNT_PATTERN;\n\n    var modalDialog = function modalDialog(options) {\n        return core.trigger('funds-withdrawal:withdrawal:dialog', options);\n    };\n    var messagebox = function messagebox(caption, text, onClose) {\n        return core.trigger('ui:message-box', { translucent: '3', additionalClassName: 'fluid-button', caption: caption, text: text, onClose: onClose });\n    };\n\n    var FundsWithdrawalView = MultipleFormsView.extend({\n        events: function events() {\n            return this.addEvents(MultipleFormsView)({\n                'click .footer .btn': 'doWithdraw',\n                'click .fn-add-method': 'addMethod'\n            });\n        },\n\n\n        className: 'withdrawal',\n\n        initialize: function initialize() {\n            MultipleFormsView.prototype.initialize.apply(this, arguments);\n\n            this.listenTo(this.model, 'change:statusOfInfo', this.loadCompleted);\n            this.listenTo(this.model, 'change:statusOfMethods', this.loadCompleted);\n            this.listenTo(this.model, 'change:statusOfCountries', this.loadCompleted);\n            this.listenTo(this.model, 'change:statusOfWithdraw', this.onStatusOfWithdrawChanged);\n            this.listenTo(this.model, 'change:readyToExecute', this.onReadyToExecuteChanged);\n\n            this.listenTo(this, 'form:accountsForm:change:field_platformAccountId', this.onAccountChanged);\n            this.listenTo(this, 'form:methodsForm:change:field_methodId', this.onMethodChanged);\n            this.listenTo(this, 'form:amountForm:change:field_amount', this.onAmountChanged);\n            this.listenTo(this, 'form:convertForm:change:field_currency', this.onCurrencyChanged);\n\n            this.formConfigs = FormConfigs;\n        },\n\n\n        render: function render() {\n            MultipleFormsView.prototype.render.call(this);\n\n            var text = __group('auto.withdrawal.');\n\n            this.$el.html(template({\n                model: this.model.toJSON(),\n                textInfo: text('info'),\n                textNote: __('auto.withdrawal.note', __('legal_documents.popup.terms_and_conditions')),\n                settings: settings\n            }));\n\n            this.onReadyToExecuteChanged();\n            this.addChildView('.funds-withdrawal-body', LoadingView, { parent: this.$el, translucent: '2' });\n\n            return this;\n        },\n\n        onAccountChanged: function onAccountChanged() {\n            this.model.loadBonuses(this.getAccountsField().value());\n            this.amount = null;\n            this.update();\n        },\n        onMethodChanged: function onMethodChanged() {\n            this.amount = null;\n            this.update();\n        },\n        onAmountChanged: function onAmountChanged() {\n            var amountValue = this.getAmountField().value();\n\n            if (WITHDRAW_AMOUNT_PATTERN.test(amountValue)) {\n                this.lastValidValue = amountValue;\n            } else {\n                if (!this.lastValidValue || amountValue === '') {\n                    this.lastValidValue = '';\n                }\n\n                if (amountValue !== '') {\n                    this.getAmountField().value(this.lastValidValue);\n                }\n            }\n\n            this.amount = Number(amountValue);\n            this.baseConvertCurrency = this.getConvertField().value();\n        },\n        getConvertField: function getConvertField() {\n            return this.getFormField('convertForm', 'field_currency');\n        },\n        getAccountsField: function getAccountsField() {\n            return this.getFormField('accountsForm', 'field_platformAccountId');\n        },\n        getAmountField: function getAmountField() {\n            return this.getFormField('amountForm', 'field_amount');\n        },\n        getSelectedAccountInfo: function getSelectedAccountInfo() {\n            return this.model.getAccountByPlatformAccountId(this.getAccountsField().value());\n        },\n        onReadyToExecuteChanged: function onReadyToExecuteChanged() {\n            var $button = this.$('.footer .btn');\n\n            if (this.model.get('readyToExecute') === YES) {\n                $button.removeAttr('disabled');\n            } else {\n                $button.attr('disabled', true);\n            }\n        },\n        loadError: function loadError() {\n            this.removeChildView('.funds-withdrawal-body');\n            modalDialog({ type: MESSAGE_DIALOG_TYPE, title: __('auto.withdrawal.error'), text: __('auto.withdrawal.error.text') });\n        },\n        doWithdraw: function doWithdraw() {\n            if (!this.model.isFundsWithdrawalAvailable()) {\n                core.trigger('funds-withdrawal:close');\n                core.trigger('ui:deposit');\n\n                return;\n            }\n\n            this.model.set('statusOfWithdraw', VALIDATE);\n        },\n        onStatusOfInfoChanged: function onStatusOfInfoChanged() {\n            var model = this.model;\n            var status = model.get('statusOfInfo');\n\n            switch (status) {\n                case EMPTY:\n                case LOADING:\n                    break;\n                case ERROR:\n                    this.loadError();\n                    break;\n                case SUCCESS:\n                    break;\n            }\n        },\n        onStatusOfWithdrawChanged: function onStatusOfWithdrawChanged() {\n            var model = this.model;\n            var status = model.get('statusOfWithdraw');\n            var accountsFormName = 'accountsForm';\n            var amountFormName = 'amountForm';\n            var methodsFormName = 'methodsForm';\n            var convertFormName = 'convertForm';\n            var submitText = __group('auto.withdrawal.submit.');\n            var pendingDeposits = model.get('pendingDeposits');\n            var $submitButton = this.$('.footer .btn');\n            var makeWithdrawal = function makeWithdrawal(tradingAccountId, methodId, currency, amount) {\n                return model.withdraw(tradingAccountId, methodId, currency, amount);\n            };\n\n            var bonusRemovalConfirmation = function bonusRemovalConfirmation(yes) {\n                core.trigger('ui:confirm', {\n                    title: __('auto.withdrawal.bonus.confirm.title'),\n                    text: __('auto.withdrawal.bonus.confirm.text'),\n                    yes: yes, no: _.noop\n                });\n            };\n\n            switch (status) {\n                case VALIDATE:\n                    {\n                        model.set('statusOfWithdraw', EMPTY);\n\n                        var hasAccountsFormErrors = this.getForm(accountsFormName).validate();\n                        var hasAmountFormErrors = this.getForm(amountFormName).validate();\n                        var tradingAccountId = this.getAccountsField().value();\n                        var currency = model.getAccountByPlatformAccountId(tradingAccountId).currency;\n                        var amount = this.getFormField(amountFormName, 'field_amount').value();\n                        var methodId = this.getFormField(methodsFormName, 'field_methodId').value();\n                        var selectedMethod = model.getMethodById(methodId);\n                        var account = this.getSelectedAccountInfo();\n                        var isEuropean = model.isEuropean(account.currency);\n                        var hasBonuses = model.hasBonuses();\n\n                        if (isEuropean && selectedMethod.methodType === WIRE_TRANSFER) {\n                            currency = this.getFormField(convertFormName, 'field_currency').value();\n                        }\n\n                        if (pendingDeposits) {\n                            if (hasAccountsFormErrors || hasAmountFormErrors) {\n                                return;\n                            }\n\n                            var oldestMethodId = model.getTheOldestMethodId();\n\n                            if (hasBonuses) {\n                                bonusRemovalConfirmation(function () {\n                                    return model.withdraw(tradingAccountId, oldestMethodId, currency, amount);\n                                });\n\n                                return;\n                            }\n\n                            model.withdraw(tradingAccountId, oldestMethodId, currency, amount);\n\n                            return;\n                        }\n\n                        var hasMethodsFormErrors = this.getForm(methodsFormName).validate();\n\n                        if (hasAccountsFormErrors || hasMethodsFormErrors || hasAmountFormErrors) {\n                            return;\n                        }\n\n                        if (hasBonuses) {\n                            bonusRemovalConfirmation(function () {\n                                return model.withdraw(tradingAccountId, methodId, currency, amount);\n                            });\n\n                            return;\n                        }\n\n                        model.withdraw(tradingAccountId, methodId, currency, amount);\n\n                        return;\n                    }\n\n                case PROCESSING:\n                    modalDialog({ type: LOADING_DIALOG_TYPE });\n                    $submitButton.attr('disabled', true);\n\n                    return;\n\n                case SUCCESS:\n                    this.amount = null;\n                    this.destroyForm(accountsFormName);\n                    this.destroyForm(methodsFormName);\n                    this.destroyForm(amountFormName);\n                    this.destroyForm(convertFormName);\n                    model.reload();\n                    modalDialog({ type: CLEAR_DIALOG });\n                    messagebox(submitText('success'), submitText('success.text'));\n                    core.trigger('funds:withdrawal:success');\n                    $submitButton.attr('disabled', false);\n\n                    return;\n\n                case ERROR:\n                    this.onResultOfWithdrawalError(submitText);\n\n                    return;\n            }\n        },\n        onResultOfWithdrawalError: function onResultOfWithdrawalError(submitText) {\n            modalDialog({ type: CLEAR_DIALOG });\n            var result = this.model.get('resultOfWithdrawal');\n\n            if (result.error === 'margin_call_risk' || result.error === 'withdrawal.error.available_amount') {\n                messagebox(__('auto.withdrawal.submit.error.available_amount.title'), user.hasOpenPositions() ? __('auto.withdrawal.submit.error.available_amount.open_positions.text') : __('auto.withdrawal.submit.error.available_amount.no_open_positions.text'));\n            } else if (result.error === 'restrict_profit_refunds') {\n                messagebox(__('auto.withdrawal.submit.error'), __('auto.withdrawal.submit.restrict_profit_refunds'));\n            } else {\n                messagebox(submitText('error'), submitText('error.text'));\n            }\n        },\n        addMethod: function addMethod(e) {\n            e.preventDefault();\n            core.trigger('funds-withdrawal:withdrawal:state', { currentTabId: 'methods' });\n        },\n        loadCompleted: function loadCompleted() {\n            var model = this.model;\n            var statusOfMethods = model.get('statusOfMethods');\n            var statusOfInfo = model.get('statusOfInfo');\n            var statusOfCountries = model.get('statusOfCountries');\n            var accountsFormName = 'accountsForm';\n            var amountFormName = 'amountForm';\n            var methodsFormName = 'methodsForm';\n            var convertFormName = 'convertForm';\n            var $accountsForm = this.$('.accounts-form');\n            var $methodsForm = this.$('.methods-form');\n            var $amountForm = this.$('.amount-form');\n            var $convertForm = this.$('.convert-form');\n            var uiBody = '.funds-withdrawal-body';\n\n            if (_.some([statusOfMethods, statusOfInfo, statusOfCountries], function (v) {\n                return v === ERROR;\n            })) {\n                return this.loadError();\n            }\n\n            if (!_.every([statusOfMethods, statusOfInfo, statusOfCountries], function (v) {\n                return v === SUCCESS;\n            })) {\n                return;\n            }\n\n            this.removeChildView(uiBody);\n\n            // If we don't have any accounts info, show message and do nothing.\n            if (!model.isFundsWithdrawalAvailable()) {\n                $accountsForm.html(__('auto.withdrawal.no_funds'));\n                this.$('.btn-primary').html(__('actions.deposit'));\n                model.set('readyToExecute', YES);\n\n                return;\n            }\n\n            this.createForm(accountsFormName, $accountsForm);\n            this.createForm(methodsFormName, $methodsForm);\n            this.createForm(amountFormName, $amountForm);\n\n            var $accountsField = this.getFormField(accountsFormName, 'field_platformAccountId');\n            var accountId = $accountsField.value();\n            var account = model.getAccountByPlatformAccountId(accountId);\n            var accountCurrency = String(account.currency).toUpperCase();\n\n            model.set('tradeAccountCurrency', accountCurrency);\n\n            this.createForm(convertFormName, $convertForm);\n            this.update();\n\n            model.loadBonuses(accountId);\n        },\n        update: function update() {\n            var model = this.model;\n            var methodsFormName = 'methodsForm';\n            var convertFormName = 'convertForm';\n            var $accountsForm = this.$('.accounts-form');\n            var $methodsForm = this.$('.methods-form');\n            var $amountForm = this.$('.amount-form');\n            var $convertForm = this.$('.convert-form');\n            var $methodsField = this.getFormField(methodsFormName, 'field_methodId');\n            var $amountField = this.getAmountField();\n            var show = function show($el) {\n                return $el.css('display', 'block');\n            };\n            var hide = function hide($el) {\n                return $el.css('display', 'none');\n            };\n            var isCompliance = model.isCompliance();\n            var account = this.getSelectedAccountInfo();\n            var isEuropean = model.isEuropean(account.currency);\n            var accountCurrency = String(account.currency).toUpperCase();\n            var pendingAmount = account.pendingAmount;\n            var selectedMethodId = $methodsField.value();\n            var selectedMethod = model.getMethodById(selectedMethodId);\n            var $amountAddonText = $amountField.$el.find('.field-addonText');\n            var maxAmount = account.amount - model.get('bonuses');\n            var minWithdrawalAmount = model.getMinWithdrawalAmount(selectedMethodId, accountCurrency, maxAmount);\n\n            model.set('tradeAccountCurrency', accountCurrency);\n\n            this.baseConvertCurrency = accountCurrency;\n            this.destroyForm(convertFormName);\n            this.createForm(convertFormName, $convertForm);\n\n            var $convertField = this.getFormField(convertFormName, 'field_currency');\n\n            show($accountsForm);\n            show($methodsForm);\n            show($amountForm);\n            hide($convertForm);\n\n            $amountField.$el.removeClass('field-error');\n            $amountField.value('');\n            $amountField.$el.find('.content').html('');\n            $amountField._rules = _.extend($amountField._rules, {\n                min: [minWithdrawalAmount, __('auto.withdrawal.form.errors.amount.min')]\n            });\n            $amountAddonText.html(__currency(accountCurrency));\n\n            // If customer is not compliance, it's not needed showing dropdown of methods.\n            if (!isCompliance) {\n                hide($methodsForm);\n                $amountField.disable();\n                $amountField.value(pendingAmount);\n                $amountField.$el.find('.content').html(__('auto.withdrawal.submit.pending_deposit'));\n                model.set('readyToExecute', YES); // Enable submit button.\n\n                return;\n            }\n\n            // BC-3646 always show button 'add method'\n            var $label = $methodsField.$el.find('.field-type-select label');\n\n            $label.find('a').remove();\n            $label.append('<a href=\"#\" class=\"fn-add-method\" style=\"float: right\"> + ' + __('auto.withdrawal.add_method') + '</a>');\n\n            if (_.isEmpty(selectedMethodId)) {\n                $amountField.disable();\n                model.set('readyToExecute', NO);\n            } else {\n                $amountField.enable();\n                model.set('readyToExecute', YES); // Enable submit button.\n            }\n\n            if (pendingAmount) {\n                $amountField.disable();\n                $amountField.value(pendingAmount);\n                hide($methodsForm);\n                $amountField.$el.find('.content').html(__('auto.withdrawal.submit.pending_deposit'));\n                hide($convertForm);\n                model.set('readyToExecute', YES);\n            }\n\n            if (isEuropean && !pendingAmount && selectedMethod.methodType === WIRE_TRANSFER) {\n                var from = $convertField.value();\n                var to = accountCurrency;\n\n                this.baseConvertCurrency = from;\n                $amountAddonText.html(__currency(from));\n\n                // Prevent many conversion reloads;\n                if (this.prevCurrencyConversion !== from + to) {\n                    this.model.loadConversion(from, to);\n                }\n\n                this.prevCurrencyConversion = from + to;\n                show($convertForm);\n                $convertField.trigger('change', $convertField, from);\n            }\n        },\n        onCurrencyChanged: function onCurrencyChanged($field, value) {\n            var $convertField = this.getConvertField();\n            var account = this.getSelectedAccountInfo();\n            var from = $convertField.value();\n            var to = String(account.currency).toUpperCase();\n\n            this.getAmountField().$el.find('.field-addonText').html(__currency($convertField.value()));\n            var conversionResult = this.model.get('conversionResult');\n\n            var newAmount = '';\n\n            if (this.baseConvertCurrency !== from && this.amount) {\n                var conversion = conversionResult[this.baseConvertCurrency + from];\n\n                newAmount = Number(this.amount) * conversion;\n                newAmount = Number(Number(newAmount).toFixed(2));\n            } else {\n                newAmount = this.amount || '';\n            }\n\n            this.getAmountField().value(_.isNumber(newAmount) ? newAmount : '');\n        }\n    });\n\n    module.exports = FundsWithdrawalView;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/auto-withdrawal/withdrawal.view.js\n// module id = 2835\n// module chunks = 30\n\n//# sourceURL=webpack:///./src/js/modules/auto-withdrawal/withdrawal.view.js?");

/***/ }),

/***/ 2836:
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"funds-withdrawal-body flex flex-column\\\">\\n    <div class=\\\"note\\\"><%=textInfo%></div>\\n\\n    <div class=\\\"forms-container flex flex-column flex-stretch\\\">\\n        <div class=\\\"flex flex-column flex-stretch min-height-content\\\">\\n            <div class=\\\"accounts-form\\\"></div>\\n            <div class=\\\"methods-form\\\"></div>\\n            <div class=\\\"amount-form\\\"></div>\\n            <div class=\\\"convert-form\\\"></div>\\n        </div>\\n\\n        <div class=\\\"note\\\">\\n            <% if (settings.isLiveChatEnabled()) { %>\\n            <div class=\\\"col help large visible-xs\\\">\\n                <%=__('help.need_help')%> <a href=\\\"#\\\" class=\\\"fn-help-live-chat-link\\\"><%=__('help.right_here')%></a>\\n                <br>\\n                <br>\\n            </div>\\n            <% } %>\\n            <div class=\\\"col help\\\">\\n                <%=textNote%>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"funds-withdrawal-actions flex flex-align-start flex-valign-center\\\">\\n        <div class=\\\"footer grid-middle_xs-1\\\">\\n            <div class=\\\"col\\\">\\n                <button class=\\\"btn btn-primary\\\"><%- __('auto.withdrawal.actions.withdraw') %></button>\\n            </div>\\n            <% if (settings.isLiveChatEnabled()) { %>\\n            <div class=\\\"col help hidden-xs\\\">\\n                <div class=\\\"flex flex-align-end\\\">\\n                    <%=__('help.need_help')%>\\n                    <a href=\\\"#\\\" class=\\\"fn-help-live-chat-link\\\"><%=__('help.right_here')%></a>\\n                </div>\\n            </div>\\n            <% } %>\\n        </div>\\n    </div>\\n</div>\\n\\n\";\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/auto-withdrawal/templates/withdrawal.html\n// module id = 2836\n// module chunks = 30\n\n//# sourceURL=webpack:///./src/js/modules/auto-withdrawal/templates/withdrawal.html?");

/***/ }),

/***/ 2837:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var BaseModel = __webpack_require__(2293);\n    var server = __webpack_require__(11);\n    var _ = __webpack_require__(0);\n\n    var _require = __webpack_require__(2151),\n        EMPTY = _require.EMPTY,\n        SUCCESS = _require.SUCCESS,\n        ERROR = _require.ERROR,\n        PROCESSING = _require.PROCESSING,\n        YES = _require.YES,\n        NO = _require.NO;\n\n    module.exports = BaseModel.extend({\n        defaults: function defaults() {\n            return {\n                readyToExecute: NO,\n                statusOfInfo: EMPTY,\n                statusOfMethods: EMPTY,\n                statusOfWithdraw: EMPTY,\n                statusOfConversion: EMPTY,\n                bonuses: 0\n            };\n        },\n        initialize: function initialize() {\n            this.load();\n        },\n        reload: function reload() {\n            this.load();\n        },\n        load: function load() {\n            this.loadInfo();\n            this.loadMethods();\n            this.loadCountries();\n        },\n        withdraw: function withdraw(tradingAccountId, methodId, currency, amount) {\n            var status = this.status('statusOfWithdraw');\n\n            if (!tradingAccountId || !currency || !amount) {\n                return status(ERROR);\n            }\n\n            if (this.get('statusOfWithdraw') !== PROCESSING) {\n                status(PROCESSING);\n\n                server.submitWithdrawal(tradingAccountId, methodId, currency, amount).then(function (res) {\n                    return status(SUCCESS);\n                }).catch(function (err) {\n                    return status(ERROR, { resultOfWithdrawal: err.response.data });\n                });\n            }\n        },\n        getAccountByPlatformAccountId: function getAccountByPlatformAccountId(id) {\n            return _.findWhere(this.get('info'), { platformAccountId: id }) || {};\n        },\n        isMethodsEmpty: function isMethodsEmpty() {\n            return _.isEmpty(this.get('methods'));\n        },\n        getTheOldestMethodId: function getTheOldestMethodId() {\n            var method = _.chain(this.get('methods')).sort(function (item) {\n                return item.uniqueEntityId;\n            }).first().value();\n\n            return method && method.uniqueEntityId;\n        }\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/auto-withdrawal/withdrawal.model.js\n// module id = 2837\n// module chunks = 30\n\n//# sourceURL=webpack:///./src/js/modules/auto-withdrawal/withdrawal.model.js?");

/***/ }),

/***/ 2838:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_, $) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var MultipleFormsView = __webpack_require__(868);\n\n    var template = _.template(__webpack_require__(2839));\n    var templateList = _.template(__webpack_require__(2840));\n    var statusTemplate = _.template(__webpack_require__(2841));\n    var LoadingView = __webpack_require__(35);\n    var moment = __webpack_require__(6);\n    var numbro = __webpack_require__(36);\n    var user = __webpack_require__(10);\n    var $ = __webpack_require__(7);\n    var MessageBoxView = __webpack_require__(63);\n    var core = __webpack_require__(5);\n    var FormConfigs = __webpack_require__(2479);\n    var config = __webpack_require__(45);\n    var settings = __webpack_require__(12);\n\n    var _require = __webpack_require__(2151),\n        EMPTY = _require.EMPTY,\n        LOADING = _require.LOADING,\n        ERROR = _require.ERROR,\n        SUCCESS = _require.SUCCESS,\n        NEW = _require.NEW,\n        APPROVED = _require.APPROVED,\n        COMPLETED = _require.COMPLETED,\n        REJECTED = _require.REJECTED,\n        CANCELED = _require.CANCELED,\n        FUNDS_REMOVED = _require.FUNDS_REMOVED,\n        PENDING_FUNDS_REMOVAL = _require.PENDING_FUNDS_REMOVAL,\n        PENDING_CANCELLATION = _require.PENDING_CANCELLATION,\n        CONFIRM = _require.CONFIRM,\n        CONFIRMED = _require.CONFIRMED,\n        CANCELLING = _require.CANCELLING,\n        CONFIRM_DIALOG_TYPE = _require.CONFIRM_DIALOG_TYPE,\n        LOADING_DIALOG_TYPE = _require.LOADING_DIALOG_TYPE,\n        PERIOD_CUSTOM = _require.PERIOD_CUSTOM,\n        PERIOD_1_YEAR = _require.PERIOD_1_YEAR,\n        PERIOD_3_MONTHS = _require.PERIOD_3_MONTHS,\n        PERIOD_1_MONTH = _require.PERIOD_1_MONTH,\n        PERIOD_2_WEEKS = _require.PERIOD_2_WEEKS,\n        PERIOD_1_WEEK = _require.PERIOD_1_WEEK,\n        PERIOD_ALL = _require.PERIOD_ALL,\n        PERIOD_TODAY = _require.PERIOD_TODAY,\n        STATUS_IN_PROGRESS = _require.STATUS_IN_PROGRESS,\n        STATUS_PROCESSED = _require.STATUS_PROCESSED,\n        STATUS_COMPLETED = _require.STATUS_COMPLETED,\n        STATUS_CANCELLED = _require.STATUS_CANCELLED,\n        STATUS_REJECTED = _require.STATUS_REJECTED,\n        STATUS_CANCELLING = _require.STATUS_CANCELLING,\n        STATUS_ALL = _require.STATUS_ALL;\n\n    var messagebox = function messagebox(caption, text) {\n        return core.trigger('ui:message-box', { translucent: '3', additionalClassName: 'fluid-button', caption: caption, text: text });\n    };\n\n    var StatusesView = MultipleFormsView.extend({\n        className: 'statuses',\n\n        events: function events() {\n            return this.addEvents(MultipleFormsView)({\n                'click .fn-cancel-request': 'cancelRequest'\n            });\n        },\n        initialize: function initialize() {\n            MultipleFormsView.prototype.initialize.apply(this, arguments);\n\n            var model = this.model;\n\n            this.listenTo(model, 'change:status', this.render);\n            this.listenTo(model, 'change:statusOfCancelRequest', this.onStatusOfCancellingRequest);\n            this.listenTo(model, 'change:statusOfPeriod', this.onStatusOfPeriodChanged);\n            this.listenTo(this, 'form:periodForm:change:field_period', this.onPeriodChanged);\n            this.listenTo(this, 'form:periodBeginForm:change:field_periodBegin', this.onPeriodBeginChanged);\n            this.listenTo(this, 'form:periodEndForm:change:field_periodEnd', this.onPeriodEndChanged);\n            this.listenTo(this, 'form:statusesForm:change:field_status', this.onFilterByStatusChanged);\n\n            this.formConfigs = FormConfigs;\n        },\n        render: function render() {\n            MultipleFormsView.prototype.render.call(this);\n\n            try {\n                this.$el.html(template({\n                    SUCCESS: SUCCESS,\n                    items: this.model.get('items'),\n                    model: this.model.toJSON(),\n                    settings: settings\n                }));\n            } catch (e) {\n                console.error(e);\n            }\n\n            this.onStatusChanged();\n\n            return this;\n        },\n        renderItems: function renderItems() {\n            var textColumn = __group('auto.withdrawal.statuses.column.');\n\n            this.$('.table-container').html(templateList({\n                items: this.getItems(),\n                SUCCESS: SUCCESS,\n                APPROVED: APPROVED,\n                COMPLETED: COMPLETED,\n                REJECTED: REJECTED,\n                CANCELED: CANCELED,\n                NEW: NEW,\n                FUNDS_REMOVED: FUNDS_REMOVED,\n                PENDING_FUNDS_REMOVAL: PENDING_FUNDS_REMOVAL,\n                PENDING_CANCELLATION: PENDING_CANCELLATION,\n                symbol: user.getUserCurrencySymbol(),\n                moment: moment,\n                statusTemplate: statusTemplate,\n                selectedFilter: this.model.get('selectedStatus'),\n                selectedPeriod: this.model.get('selectedPeriod'),\n                textDate: textColumn('date'),\n                textAccount: textColumn('account'),\n                textMethod: textColumn('method'),\n                textAmount: textColumn('amount'),\n                textStatus: textColumn('status'),\n                textFormatMethod: function textFormatMethod(methodType) {\n                    var key = 'payment_methods.name.' + methodType;\n                    var translated = __(key);\n\n                    return key === translated ? methodType : translated;\n                },\n                formatDate: function formatDate(item) {\n                    var _item$creationDate = item.creationDate,\n                        year = _item$creationDate.year,\n                        monthValue = _item$creationDate.monthValue,\n                        dayOfMonth = _item$creationDate.dayOfMonth;\n\n\n                    return moment({\n                        year: year,\n                        month: monthValue - 1,\n                        day: dayOfMonth\n                    }).format('DD/MM/YYYY');\n                },\n                formatAccount: function formatAccount(item) {\n                    var _item$account = item.account,\n                        userName = _item$account.userName,\n                        platformAccountId = _item$account.platformAccountId,\n                        tradePlatformType = _item$account.tradePlatformType,\n                        requestedCurrency = item.requestedCurrency;\n\n                    var name = config.tradePlatformIds2NameMap[tradePlatformType];\n\n                    name = name === 'COSMOS' ? __('brand.name') : name;\n\n                    return name + ' Trader - ' + userName + ' - ' + String(requestedCurrency).toUpperCase();\n                },\n                formatAmount: function formatAmount(item) {\n                    return numbro(item.amount).formatForeignCurrency(__currency(item.requestedCurrency), '$0,0.[00]');\n                }\n            }));\n        },\n        onPeriodChanged: function onPeriodChanged() {\n            var $periodBeginFormContainer = this.$('.period-begin-form');\n            var $periodEndFormContainer = this.$('.period-end-form');\n            var period = this.getFormField('periodForm', 'field_period').value();\n\n            this.model.set('selectedPeriod', period);\n            this.hide($periodBeginFormContainer);\n            this.hide($periodEndFormContainer);\n\n            if (period === 'custom') {\n                this.show($periodBeginFormContainer);\n                this.show($periodEndFormContainer);\n            }\n\n            this.renderItems();\n        },\n        getItems: function getItems() {\n            var loadedItems = this.model.get('items');\n\n            if (_.isEmpty(loadedItems)) {\n                return [];\n            }\n\n            var items = _.chain(loadedItems);\n            var period = this.getFormField('periodForm', 'field_period').value();\n            var format = 'YYYYMMDD';\n            var today = Number(moment().format(format));\n            var date1Year = Number(moment().year(-1).format(format));\n            var date3Months = Number(moment().month(-3).format(format));\n            var date1Month = Number(moment().month(-1).format(format));\n            var date2Weeks = Number(moment().weekday(-14).format(format));\n            var date1Week = Number(moment().weekday(-7).format(format));\n\n            var getItemDate = function getItemDate(item) {\n                var _item$creationDate2 = item.creationDate,\n                    year = _item$creationDate2.year,\n                    monthValue = _item$creationDate2.monthValue,\n                    dayOfMonth = _item$creationDate2.dayOfMonth;\n\n\n                return Number(moment({ year: year, month: monthValue - 1, day: dayOfMonth }).format(format));\n            };\n\n            var filterByStatus = this.model.get('selectedStatus');\n\n            switch (period) {\n                case PERIOD_CUSTOM:\n                    {\n                        var begin = this.getFormField('periodBeginForm', 'field_periodBegin').getFirstSelectedDate();\n                        var end = this.getFormField('periodEndForm', 'field_periodEnd').getFirstSelectedDate();\n                        var momentBegin = begin && Number(moment(begin).format(format));\n                        var momentEnd = end && Number(moment(end).format(format));\n\n                        items = items.filter(function (item) {\n                            var itemDate = getItemDate(item);\n\n                            if (momentBegin && momentEnd) {\n                                return itemDate >= momentBegin && itemDate <= momentEnd;\n                            }\n\n                            if (momentBegin && !momentEnd) {\n                                return itemDate >= momentBegin;\n                            }\n\n                            if (!momentBegin && momentEnd) {\n                                return itemDate <= momentEnd;\n                            }\n\n                            return false;\n                        });\n                        break;\n                    }\n\n                case PERIOD_1_YEAR:\n                    items = items.filter(function (item) {\n                        return getItemDate(item) >= date1Year;\n                    });\n                    break;\n                case PERIOD_3_MONTHS:\n                    items = items.filter(function (item) {\n                        return getItemDate(item) >= date3Months;\n                    });\n                    break;\n                case PERIOD_1_MONTH:\n                    items = items.filter(function (item) {\n                        return getItemDate(item) >= date1Month;\n                    });\n                    break;\n                case PERIOD_2_WEEKS:\n                    items = items.filter(function (item) {\n                        return getItemDate(item) >= date2Weeks;\n                    });\n                    break;\n                case PERIOD_1_WEEK:\n                    items = items.filter(function (item) {\n                        return getItemDate(item) >= date1Week;\n                    });\n                    break;\n                case PERIOD_ALL:\n                    break;\n                case PERIOD_TODAY:\n                    items = items.filter(function (item) {\n                        return getItemDate(item) === today;\n                    });\n                    break;\n            }\n\n            switch (filterByStatus) {\n                case STATUS_IN_PROGRESS:\n                    items = items.filter(function (item) {\n                        return _.contains([NEW, FUNDS_REMOVED, PENDING_FUNDS_REMOVAL], item.status);\n                    });\n                    break;\n                case STATUS_PROCESSED:\n                    items = items.filter(function (item) {\n                        return APPROVED === item.status;\n                    });\n                    break;\n                case STATUS_COMPLETED:\n                    items = items.filter(function (item) {\n                        return COMPLETED === item.status;\n                    });\n                    break;\n                case STATUS_CANCELLED:\n                    items = items.filter(function (item) {\n                        return CANCELED === item.status;\n                    });\n                    break;\n                case STATUS_REJECTED:\n                    items = items.filter(function (item) {\n                        return REJECTED === item.status;\n                    });\n                    break;\n                case STATUS_CANCELLING:\n                    items = items.filter(function (item) {\n                        return PENDING_CANCELLATION === item.status;\n                    });\n                    break;\n                case STATUS_ALL:\n                // Dont filter items.\n            }\n\n            return items.value();\n        },\n        onStatusChanged: function onStatusChanged() {\n            var model = this.model;\n            var status = model.get('status');\n            var uiBody = '.funds-withdrawal-body';\n            var text = __group('auto.withdrawal.');\n            var periodFormName = 'periodForm';\n            var periodBeginFormName = 'periodBeginForm';\n            var periodEndFormName = 'periodEndForm';\n            var statusesFormName = 'statusesForm';\n            var $periodFormContainer = this.$('.period-form');\n            var $periodBeginFormContainer = this.$('.period-begin-form');\n            var $periodEndFormContainer = this.$('.period-end-form');\n            var $statusesFormContainer = this.$('.statuses-form');\n\n            switch (status) {\n                case EMPTY:\n                case LOADING:\n                case CANCELLING:\n                    this.addChildView(uiBody, LoadingView, { parent: this.$el, translucent: '2' });\n\n                    return;\n                case ERROR:\n                    messagebox(text('error'), text('error.text'));\n                    this.removeChildView(uiBody);\n\n                    return;\n                case SUCCESS:\n                    try {\n                        this.createForm(periodFormName, $periodFormContainer);\n                        this.createForm(periodBeginFormName, $periodBeginFormContainer);\n                        this.createForm(periodEndFormName, $periodEndFormContainer);\n                        this.createForm(statusesFormName, $statusesFormContainer);\n\n                        this.hide($periodBeginFormContainer);\n                        this.hide($periodEndFormContainer);\n                        this.renderItems();\n                    } catch (e) {\n                        console.error(e);\n                    }\n\n                    return;\n            }\n        },\n        onStatusOfCancellingRequest: function onStatusOfCancellingRequest(model, status) {\n            var uiPanel = '.panel-container';\n            var id = model.get('cancelRequestId');\n            var textWithdrawalCancelled = __group('auto.withdrawal.cancelled.');\n            var cancelText = __group('auto.withdrawal.cancel.');\n\n            switch (status) {\n                case CONFIRM:\n                    return core.trigger('funds-withdrawal:withdrawal:dialog', {\n                        type: CONFIRM_DIALOG_TYPE,\n                        title: cancelText('title'),\n                        text: cancelText('text'),\n                        yes: function yes() {\n                            return model.acceptToCancelRequest();\n                        },\n                        no: function no() {\n                            return model.refuseToCancelRequest();\n                        }\n                    });\n                case CANCELLING:\n                    return this.addChildView(uiPanel, LoadingView, { parent: this.$(uiPanel), translucent: '1' });\n                case ERROR:\n                    this.removeChildView(uiPanel);\n\n                    return messagebox(cancelText('rejected.title'), cancelText('rejected.text'));\n                case SUCCESS:\n                    this.removeChildView(uiPanel);\n                    model.set('statusOfCancelRequest', EMPTY);\n                    messagebox(textWithdrawalCancelled('title'), textWithdrawalCancelled('text.line1') + '<br>' + textWithdrawalCancelled('text.line2'));\n                    model.updateItemStatusById(id, CANCELED);\n                    core.trigger('funds:withdrawal:cancel');\n\n                    return this.$('#request-' + id).html(statusTemplate({\n                        id: id,\n                        status: CANCELED,\n                        APPROVED: APPROVED,\n                        COMPLETED: COMPLETED,\n                        REJECTED: REJECTED,\n                        CANCELED: CANCELED,\n                        NEW: NEW,\n                        FUNDS_REMOVED: FUNDS_REMOVED,\n                        PENDING_FUNDS_REMOVAL: PENDING_FUNDS_REMOVAL,\n                        PENDING_CANCELLATION: PENDING_CANCELLATION\n                    }));\n                default:\n                    return this.removeChildView(uiPanel);\n            }\n        },\n        cancelRequest: function cancelRequest(event) {\n            event.preventDefault();\n\n            var id = $(event.currentTarget).attr('data-id');\n\n            this.model.confirmToCancelRequest(id);\n        },\n        show: function show($el) {\n            return $el.css('display', 'inline-block');\n        },\n        hide: function hide($el) {\n            return $el.css('display', 'none');\n        },\n        onPeriodBeginChanged: function onPeriodBeginChanged($field, selectedDates) {\n            this.getFormField('periodEndForm', 'field_periodEnd').setMinDate(selectedDates[0]);\n            this.renderItems();\n        },\n        onPeriodEndChanged: function onPeriodEndChanged($field, selectedDates) {\n            this.getFormField('periodBeginForm', 'field_periodBegin').setMaxDate(selectedDates[0]);\n            this.renderItems();\n        },\n        onFilterByStatusChanged: function onFilterByStatusChanged($field, value) {\n            this.model.set('selectedStatus', value);\n            this.renderItems();\n        }\n    });\n\n    module.exports = StatusesView;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(7)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/auto-withdrawal/statuses.view.js\n// module id = 2838\n// module chunks = 30\n\n//# sourceURL=webpack:///./src/js/modules/auto-withdrawal/statuses.view.js?");

/***/ }),

/***/ 2839:
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"funds-withdrawal-body flex flex-column flex-stretch\\\">\\n    <div class=\\\"panel-container\\\"></div>\\n    <% if (model.status == SUCCESS) { %>\\n    <% if (_.isEmpty(items)) { %>\\n        <div class=\\\"empty\\\">\\n            <%=__('auto.withdrawal.statuses.no_requests') %>\\n        </div>\\n    <% } else { %>\\n    <div class=\\\"filter-container flex flex-row flex-valign-center\\\">\\n        <div class='flex flex-column flex-wrap'>\\n            <div class='flex flex-row flex-wrap'>\\n                <div class='flex flex-valign-center title'><%=__('history.period')%></div>\\n                <div class=\\\"period-form\\\"></div>\\n                <div class=\\\"statuses-form\\\"></div>\\n            </div>\\n            <div class='flex flex-row flex-wrap'>\\n                <div class='flex flex-valign-center title hidden-xs'></div>\\n                <div class=\\\"period-begin-form\\\"></div>\\n                <div class=\\\"period-end-form\\\"></div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"table-container flex flex-stretch\\\"></div>\\n    <p class=\\\"note hidden-xs\\\"><%=__('auto.withdrawal.note',  __('legal_documents.popup.terms_and_conditions'))%></p>\\n    <% }} %>\\n</div>\\n<div class=\\\"funds-withdrawal-actions flex flex-align-end flex-valign-center\\\">\\n    <div class=\\\"footer\\\">\\n        <div class=\\\"help flex flex-column\\\">\\n            <% if (settings.isLiveChatEnabled()) { %>\\n            <div class=\\\"flex flex-align-end hidden-xs\\\">\\n                <%=__('help.need_help')%>&nbsp;\\n                <a href=\\\"#\\\" class=\\\"fn-help-live-chat-link\\\"><%=__('help.right_here')%></a>\\n            </div>\\n            <div class=\\\"visible-xs\\\" >\\n                <%=__('help.need_help')%>&nbsp;\\n                <a href=\\\"#\\\" class=\\\"fn-help-live-chat-link\\\"><%=__('help.right_here')%></a>\\n            </div>\\n            <% } %>\\n            <p class=\\\"small visible-xs\\\">\\n                <br />\\n                <%=__('auto.withdrawal.note',  __('legal_documents.popup.terms_and_conditions'))%>\\n            </p>\\n        </div>\\n    </div>\\n</div>\\n\\n\";\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/auto-withdrawal/templates/statuses.html\n// module id = 2839\n// module chunks = 30\n\n//# sourceURL=webpack:///./src/js/modules/auto-withdrawal/templates/statuses.html?");

/***/ }),

/***/ 2840:
/***/ (function(module, exports) {

eval("module.exports = \"<% if (_.isEmpty(items)) { %>\\n    <div class=\\\"empty\\\">\\n        <%=__('auto.withdrawal.statuses.empty')%>\\n    </div>\\n<% } else { %>\\n<div class=\\\"table\\\">\\n    <div class=\\\"head flex flex-row hidden-xs\\\">\\n        <div class=\\\"date\\\"><%-textDate%></div>\\n        <div class=\\\"account\\\"><%-textAccount%></div>\\n        <div class=\\\"method\\\"><%-textMethod%></div>\\n        <div class=\\\"amount\\\"><%-textAmount%></div>\\n        <div class=\\\"status\\\"><%-textStatus%></div>\\n    </div>\\n    <div class=\\\"body\\\">\\n        <div>\\n            <% _.each(items, function(v) { %>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"date\\\"><u><%-textDate%>:&nbsp;</u><%-formatDate(v)%></div>\\n                <div class=\\\"account\\\"><u><%-textAccount%>:&nbsp;</u><%-formatAccount(v)%></div>\\n                <div class=\\\"method\\\"><u><%-textMethod%>:&nbsp;</u><%-textFormatMethod(v.methodType)%></div>\\n                <div class=\\\"amount\\\" title=\\\"<%-formatAmount(v)%>\\\">\\n                    <u><%-textAmount%>:&nbsp;</u><%-formatAmount(v)%>\\n                </div>\\n                <div class=\\\"status\\\" data-title=\\\"Status\\\" id=\\\"request-<%-v.itemId%>\\\">\\n                    <%=statusTemplate({\\n                        id: v.itemId,\\n                        status: v.status,\\n                        APPROVED: APPROVED,\\n                        COMPLETED: COMPLETED,\\n                        REJECTED: REJECTED,\\n                        CANCELED: CANCELED,\\n                        NEW: NEW,\\n                        FUNDS_REMOVED: FUNDS_REMOVED,\\n                        PENDING_FUNDS_REMOVAL: PENDING_FUNDS_REMOVAL,\\n                        PENDING_CANCELLATION: PENDING_CANCELLATION\\n                    })%>\\n                </div>\\n            </div>\\n            <% }) %>\\n         </div>\\n    </div>\\n</div>\\n<% } %>\\n\";\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/auto-withdrawal/templates/statuses.list.html\n// module id = 2840\n// module chunks = 30\n\n//# sourceURL=webpack:///./src/js/modules/auto-withdrawal/templates/statuses.list.html?");

/***/ }),

/***/ 2841:
/***/ (function(module, exports) {

eval("module.exports = \"<% var text = __group('auto.withdrawal.statuses.') %>\\n<% if (status == NEW || status == FUNDS_REMOVED || status == PENDING_FUNDS_REMOVAL) { %>\\n    <b><%-text('in_progress')%></b><a href=\\\"\\\" class=\\\"fn-cancel-request\\\" data-id=\\\"<%-id%>\\\"><%-__('auto.withdrawal.cancel_request')%></a>\\n<% } else if (status == APPROVED) { %>\\n    <div><i class=\\\"completed\\\"></i> <b><%-text('processed')%></b></div>\\n<% } else if (status == COMPLETED) { %>\\n    <div><i class=\\\"completed\\\"></i> <b><%-text('completed')%></b></div>\\n<% } else if (status == CANCELED) { %>\\n    <div><i class=\\\"cancelled\\\"></i> <b><%-text('cancelled')%></b></div>\\n<% } else if (status == REJECTED) { %>\\n    <div><i class=\\\"rejected\\\"></i> <b><%-text('rejected')%></b></div>\\n<% } else if (status == PENDING_CANCELLATION) { %>\\n    <div><i class=\\\"pending\\\"></i> <b><%-text('cancelling')%></b></div>\\n<% } %>\\n\";\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/auto-withdrawal/templates/status.html\n// module id = 2841\n// module chunks = 30\n\n//# sourceURL=webpack:///./src/js/modules/auto-withdrawal/templates/status.html?");

/***/ }),

/***/ 2842:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var BaseModel = __webpack_require__(2293);\n    var server = __webpack_require__(11);\n    var _ = __webpack_require__(0);\n\n    var _require = __webpack_require__(2151),\n        EMPTY = _require.EMPTY,\n        LOADING = _require.LOADING,\n        ERROR = _require.ERROR,\n        SUCCESS = _require.SUCCESS,\n        CANCELLING = _require.CANCELLING,\n        NEW = _require.NEW,\n        APPROVED = _require.APPROVED,\n        COMPLETED = _require.COMPLETED,\n        REJECTED = _require.REJECTED,\n        CANCELED = _require.CANCELED,\n        FUNDS_REMOVED = _require.FUNDS_REMOVED,\n        PENDING_FUNDS_REMOVAL = _require.PENDING_FUNDS_REMOVAL,\n        PENDING_CANCELLATION = _require.PENDING_CANCELLATION,\n        CONFIRM = _require.CONFIRM;\n\n    module.exports = BaseModel.extend({\n        defaults: function defaults() {\n            return {\n                items: [],\n                status: EMPTY,\n                statusOfCancelRequest: EMPTY,\n                periods: [{ id: 'custom', text: __('history.period.custom') }, { id: 'all', text: __('history.period.all') }, { id: 'today', text: __('history.period.day') }, { id: '1week', text: __('history.period.week') }, { id: '2weeks', text: __('history.period.fortnight') }, { id: '1month', text: __('history.period.month') }, { id: '3months', text: __('history.period.season') }, { id: '1year', text: __('history.period.year') }],\n                selectedPeriod: 'today',\n                periodDate: null,\n                statuses: [{ id: 'all', text: __('filter.statuses.all') }, { id: 'in_progress', text: __('auto.withdrawal.statuses.in_progress') }, { id: 'processed', text: __('auto.withdrawal.statuses.processed') }, { id: 'completed', text: __('auto.withdrawal.statuses.completed') }, { id: 'cancelled', text: __('auto.withdrawal.statuses.cancelled') }, { id: 'rejected', text: __('auto.withdrawal.statuses.rejected') }, { id: 'cancelling', text: __('auto.withdrawal.statuses.cancelling') }],\n                selectedStatus: 'all'\n            };\n        },\n\n\n        availableStatuses: [NEW, APPROVED, COMPLETED, REJECTED, CANCELED, FUNDS_REMOVED, PENDING_FUNDS_REMOVAL, PENDING_CANCELLATION],\n\n        initialize: function initialize() {\n            BaseModel.prototype.initialize.apply(this, arguments);\n\n            this.loadWithdrawalHistory();\n        },\n        loadWithdrawalHistory: function loadWithdrawalHistory() {\n            var _this = this;\n\n            var status = this.status('status');\n\n            status(LOADING);\n\n            server.loadWithdrawalHistory().then(function (res) {\n                return status(SUCCESS, { items: _this.sort(_this.filter(res.data)) });\n            }).catch(function (err) {\n                return status(ERROR);\n            });\n        },\n        filter: function filter(items) {\n            var _this2 = this;\n\n            return _.chain(items).filter(function (item) {\n                return _.contains(_this2.availableStatuses, item.status);\n            }).value();\n        },\n        sort: function sort(items) {\n            return _.sortBy(items, function (item) {\n                var _item$creationDate = item.creationDate,\n                    year = _item$creationDate.year,\n                    monthValue = _item$creationDate.monthValue,\n                    dayOfMonth = _item$creationDate.dayOfMonth,\n                    hour = _item$creationDate.hour,\n                    minute = _item$creationDate.minute,\n                    second = _item$creationDate.second;\n\n                return -1 * +new Date(year, monthValue, dayOfMonth, hour, minute, second);\n            });\n        },\n        confirmToCancelRequest: function confirmToCancelRequest(id) {\n            this.set({\n                statusOfCancelRequest: CONFIRM,\n                cancelRequestId: id\n            });\n        },\n        acceptToCancelRequest: function acceptToCancelRequest() {\n            this.cancelWithdrawalRequest();\n        },\n        refuseToCancelRequest: function refuseToCancelRequest() {\n            this.set({\n                statusOfCancelRequest: EMPTY,\n                cancelRequestId: null\n            });\n        },\n        cancelWithdrawalRequest: function cancelWithdrawalRequest() {\n            var status = this.status('statusOfCancelRequest');\n            var id = this.get('cancelRequestId');\n\n            status(CANCELLING);\n\n            server.cancelWithdrawalRequest(id).then(function (res) {\n                return status(SUCCESS);\n            }).catch(function (err) {\n                return status(ERROR);\n            });\n        },\n        updateItemStatusById: function updateItemStatusById(itemId, status) {\n            var items = this.get('items');\n\n            if (_.isEmpty(items)) return;\n\n            var item = _.findWhere(items, { itemId: itemId });\n            if (item) item.status = status;\n        }\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/auto-withdrawal/statuses.model.js\n// module id = 2842\n// module chunks = 30\n\n//# sourceURL=webpack:///./src/js/modules/auto-withdrawal/statuses.model.js?");

/***/ }),

/***/ 2843:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_, $) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var $ = __webpack_require__(7);\n    var View = __webpack_require__(15);\n\n    var template = _.template(__webpack_require__(2844));\n    var templateMenu = _.template(__webpack_require__(2845));\n    var core = __webpack_require__(5);\n    var settings = __webpack_require__(12);\n\n    var _require = __webpack_require__(2151),\n        YES = _require.YES,\n        NO = _require.NO,\n        EMPTY = _require.EMPTY,\n        LOADING = _require.LOADING,\n        SUCCESS = _require.SUCCESS,\n        ERROR = _require.ERROR;\n\n    var messagebox = function messagebox(caption, text) {\n        return core.trigger('ui:message-box', { translucent: '3', additionalClassName: 'fluid-button', caption: caption, text: text });\n    };\n\n    var MethodsView = View.extend({\n        events: function events() {\n            return this.addEvents(View)({\n                'click .fn-tab': 'changeTab',\n                'click .btn': 'clickButton'\n            });\n        },\n\n        className: 'methods',\n\n        initialize: function initialize() {\n            View.prototype.initialize.apply(this, arguments);\n\n            this.listenTo(this.model, 'change:currentTabId', this.update);\n            this.listenTo(this.model, 'change:statusOfMethods', this.loadCompleted);\n            this.listenTo(this.model, 'change:statusOfCandidates', this.loadCompleted);\n            this.listenTo(core, 'funds-withdrawal:methods:reload', this.methodsReload);\n        },\n        methodsReload: function methodsReload() {\n            this.model.load();\n        },\n        loadCompleted: function loadCompleted() {\n            var model = this.model;\n            var statusOfMethods = model.get('statusOfMethods');\n            var statusOfCandidates = model.get('statusOfCandidates');\n            var status = EMPTY;\n\n            if (statusOfCandidates === ERROR || statusOfMethods === ERROR) {\n                status = ERROR;\n            } else if (statusOfCandidates === SUCCESS && statusOfMethods === SUCCESS) {\n                status = SUCCESS;\n            }\n\n            switch (status) {\n                case EMPTY:\n                case LOADING:\n                    return;\n                case ERROR:\n                    messagebox(__('auto.withdrawal.error.title'), __('auto.withdrawal.error.text'));\n\n                    return;\n                case SUCCESS:\n                    model.enableAllTabs();\n                    model.setCurrentTabById('add');\n                    this.renderMenu();\n                    this.update();\n\n                    return;\n            }\n        },\n        renderMenu: function renderMenu() {\n            this.$('.menu').html(templateMenu({\n                items: this.model.get('tabs'),\n                currentTabId: this.model.getCurrentTabId()\n            }));\n        },\n        update: function update() {\n            this.removeListenersInTabModel(this.tabModel);\n\n            var _model$getCurrentTabD = this.model.getCurrentTabData(),\n                view = _model$getCurrentTabD.view,\n                model = _model$getCurrentTabD.model;\n\n            var tabModel = this.tabModel = new model({\n                isMethodsEmpty: this.model.isMethodsEmpty()\n            });\n\n            this.addChildView('.panel-content', view, { model: tabModel });\n\n            this.addListenersInTabModel(tabModel);\n            this.updateExecutableButtonState(tabModel);\n            this.updateButtonText();\n        },\n        render: function render() {\n            View.prototype.render.call(this);\n            this.$el.html(template({\n                model: this.model.toJSON(),\n                settings: settings\n            }));\n\n            return this;\n        },\n        addListenersInTabModel: function addListenersInTabModel(model) {\n            if (model) {\n                model.on('change:readyToExecute', this.updateExecutableButtonState, this);\n            }\n        },\n        removeListenersInTabModel: function removeListenersInTabModel(model) {\n            if (model) {\n                model.off('change:readyToExecute', this.updateExecutableButtonState, this);\n            }\n        },\n        updateExecutableButtonState: function updateExecutableButtonState(model) {\n            var status = model.get('readyToExecute');\n            var $el = this.$('.footer .btn');\n\n            switch (status) {\n                case YES:\n                    $el.removeAttr('disabled');\n                    break;\n                case NO:\n                    $el.attr('disabled', true);\n                    break;\n            }\n\n            $el.css('display', 'block');\n        },\n        changeTab: function changeTab(event) {\n            event.preventDefault();\n\n            var tabId = $(event.currentTarget).attr('data-tab-id');\n\n            this.model.setCurrentTabById(tabId);\n            this.updateButtonText();\n            this.renderMenu();\n        },\n        clickButton: function clickButton() {\n            this.tabModel.doRequest();\n        },\n        updateButtonText: function updateButtonText() {\n            this.$('.funds-withdrawal-actions .btn').html(__(this.model.getCurrentTab().submitButtonText));\n        }\n    });\n\n    module.exports = MethodsView;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(7)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/auto-withdrawal/methods.view.js\n// module id = 2843\n// module chunks = 30\n\n//# sourceURL=webpack:///./src/js/modules/auto-withdrawal/methods.view.js?");

/***/ }),

/***/ 2844:
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"funds-withdrawal-body flex-stretch\\\">\\n    <div class=\\\"menu\\\"></div>\\n    <div class=\\\"separator hidden-xs\\\"></div>\\n    <div class=\\\"panel-content\\\"></div>\\n</div>\\n\\n<div class=\\\"funds-withdrawal-actions flex flex-align-start flex-valign-center\\\">\\n    <div class=\\\"footer grid-middle_sm-1\\\">\\n        <% if (settings.isLiveChatEnabled()) { %>\\n        <div class=\\\"col help visible-xs\\\">\\n                <%=__('help.need_help')%>&nbsp;<a href=\\\"#\\\" class=\\\"fn-help-live-chat-link\\\"><%=__('help.right_here')%></a>\\n        </div>\\n        <% } %>\\n        <div class=\\\"col\\\">\\n            <button class=\\\"btn btn-primary\\\"><%- __('auto.withdrawal.actions.withdraw') %></button>\\n        </div>\\n        <% if (settings.isLiveChatEnabled()) { %>\\n        <div class=\\\"col help hidden-xs\\\">\\n            <div class=\\\"flex flex-align-end\\\">\\n                <%=__('help.need_help')%>&nbsp;<a href=\\\"#\\\" class=\\\"fn-help-live-chat-link\\\"><%=__('help.right_here')%></a>\\n            </div>\\n        </div>\\n        <% } %>\\n    </div>\\n</div>\\n\\n\";\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/auto-withdrawal/templates/methods.html\n// module id = 2844\n// module chunks = 30\n\n//# sourceURL=webpack:///./src/js/modules/auto-withdrawal/templates/methods.html?");

/***/ }),

/***/ 2845:
/***/ (function(module, exports) {

eval("module.exports = \"<ul>\\n    <li class=\\\"hidden-xs\\\"><b><%=__('funds.withdrawal.methods.action') %></b></li>\\n    <% _.each(items, function(v, i) { %>\\n    <li><a href=\\\"#\\\" class=\\\"fn-tab <%- currentTabId == v.id ? 'active' : ''%> <%- v.disable == true ? 'no-active' : '' %>\\\" data-tab-id=\\\"<%-v.id%>\\\"><%-v.name%></a></li>\\n    <% }) %>\\n</ul>\";\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/auto-withdrawal/templates/methods.menu.html\n// module id = 2845\n// module chunks = 30\n\n//# sourceURL=webpack:///./src/js/modules/auto-withdrawal/templates/methods.menu.html?");

/***/ }),

/***/ 2846:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var RevokeMethodView = __webpack_require__(2847);\n    var RevokeMethodModel = __webpack_require__(2849);\n    var AddMethodView = __webpack_require__(2850);\n    var AddMethodModel = __webpack_require__(2852);\n    var BaseModel = __webpack_require__(2293);\n\n    var _require = __webpack_require__(2151),\n        EMPTY = _require.EMPTY;\n\n    module.exports = BaseModel.extend({\n        defaults: function defaults() {\n            return {\n                statusOfMethods: EMPTY,\n                tabs: [{\n                    id: 'revoke',\n                    name: __('auto.withdrawal.revoke_methods'),\n                    viewClass: RevokeMethodView,\n                    modelClass: RevokeMethodModel,\n                    submitButtonText: __('auto.withdrawal.revoke_method.button')\n                }, {\n                    id: 'add',\n                    name: __('auto.withdrawal.add_method'),\n                    viewClass: AddMethodView,\n                    modelClass: AddMethodModel,\n                    submitButtonText: __('auto.withdrawal.add_method.button')\n                }],\n                currentTabId: ''\n            };\n        },\n        initialize: function initialize() {\n            this.load();\n        },\n        load: function load() {\n            this.loadMethods();\n            this.loadCandidates();\n        }\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/auto-withdrawal/methods.model.js\n// module id = 2846\n// module chunks = 30\n\n//# sourceURL=webpack:///./src/js/modules/auto-withdrawal/methods.model.js?");

/***/ }),

/***/ 2847:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var MultipleFormsView = __webpack_require__(868);\n    var template = _.template(__webpack_require__(2848));\n    var LoadingView = __webpack_require__(35);\n    var core = __webpack_require__(5);\n    var FormConfig = __webpack_require__(2479);\n\n    var _require = __webpack_require__(2151),\n        EMPTY = _require.EMPTY,\n        CONFIRM = _require.CONFIRM,\n        ACCEPTED = _require.ACCEPTED,\n        REFUSED = _require.REFUSED,\n        PROCESSING = _require.PROCESSING,\n        LOADING = _require.LOADING,\n        UPLOADING = _require.UPLOADING,\n        SUCCESS = _require.SUCCESS,\n        ERROR = _require.ERROR,\n        CONFIRM_DIALOG_TYPE = _require.CONFIRM_DIALOG_TYPE,\n        LOADING_DIALOG_TYPE = _require.LOADING_DIALOG_TYPE,\n        MESSAGE_DIALOG_TYPE = _require.MESSAGE_DIALOG_TYPE,\n        SHOW = _require.SHOW,\n        HIDE = _require.HIDE,\n        YES = _require.YES,\n        NO = _require.NO,\n        ERROR_ENTITY_TOO_LARGE = _require.ERROR_ENTITY_TOO_LARGE,\n        VALIDATE = _require.VALIDATE;\n\n    var modalDialog = function modalDialog(options) {\n        return core.trigger('funds-withdrawal:withdrawal:dialog', options);\n    };\n    var messagebox = function messagebox(caption, text) {\n        return core.trigger('ui:message-box', { translucent: '3', additionalClassName: 'fluid-button', caption: caption, text: text });\n    };\n\n    var MethodsView = MultipleFormsView.extend({\n        className: 'revoke-method',\n\n        initialize: function initialize() {\n            MultipleFormsView.prototype.initialize.apply(this, arguments);\n\n            this.listenTo(this.model, 'change:statusOfMethods', this.onStatusOfMethodsChanged);\n            this.listenTo(this.model, 'change:statusOfRevoke', this.onStatusOfRevokeChanged);\n            this.listenTo(this.model, 'change:statusOfUpload', this.onStatusOfUploadChanged);\n            this.listenTo(this.model, 'change:uploadProgress', this.onUploadProgress);\n            this.listenTo(this, 'form:methodsForm:change:field_methodId', this.onMethodChanged);\n\n            this.formConfigs = FormConfig;\n        },\n        render: function render() {\n            MultipleFormsView.prototype.render.call(this);\n\n            this.$el.html(template({ model: this.model.toJSON() }));\n            this.onStatusOfMethodsChanged();\n\n            return this;\n        },\n        onStatusOfMethodsChanged: function onStatusOfMethodsChanged() {\n            var model = this.model;\n            var status = model.get('statusOfMethods');\n            var uiContent = '.panel-container';\n            var text = __group('auto.withdrawal.revoke.');\n            var $methodsContainer = this.$('.methods-form');\n            var $documentContainer = this.$('.document-form');\n\n            switch (status) {\n                case EMPTY:\n                case LOADING:\n                    return this.addChildView(uiContent, LoadingView, { parent: this.$el, translucent: 'no' });\n                case ERROR:\n                    this.removeChildView(uiContent);\n                    messagebox(text('error'), 'Cant load methods for this account');\n                    return;\n                case SUCCESS:\n                    this.removeChildView(uiContent);\n                    if (model.isMethodsEmpty()) return $methodsContainer.html(text('empty'));\n\n                    this.createForm('methodsForm', $methodsContainer);\n                    this.createForm('documentForm', $documentContainer);\n                    return;\n            }\n        },\n        onStatusOfRevokeChanged: function onStatusOfRevokeChanged(model, status) {\n            var text = __group('auto.withdrawal.revoke.');\n            var methodsForm = 'methodsForm';\n            var documentForm = 'documentForm';\n\n            switch (status) {\n                case ERROR:\n                    modalDialog({ type: MESSAGE_DIALOG_TYPE, title: text('error'), text: text('error.text') });\n                    return;\n                case VALIDATE:\n                    model.set('statusOfRevoke', EMPTY);\n\n                    var hasMethodsFormErrors = this.getForm(methodsForm).validate();\n                    var hasDocumentFormErrors = this.getForm(documentForm).validate();\n\n                    if (hasMethodsFormErrors || hasDocumentFormErrors) return;\n\n                    model.confirmToRevoke();\n                    return;\n                case SUCCESS:\n                    var file = this.getFormField(documentForm, 'field_doc').getFile();\n                    model.uploadDocument(model.get('methodId'), model.get('methodTypeId'), 39, file);\n                    return;\n                case PROCESSING:\n                    modalDialog({ type: LOADING_DIALOG_TYPE });\n                    return;\n                case CONFIRM:\n                    var methodId = this.getFormField(methodsForm, 'field_methodId').value();\n\n                    modalDialog({\n                        type: CONFIRM_DIALOG_TYPE,\n                        title: text('confirm.title'),\n                        text: text('confirm.text'),\n                        yes: function yes() {\n                            return model.accept(methodId);\n                        },\n                        no: function no() {\n                            return model.refuse();\n                        }\n                    });\n                    return;\n            }\n        },\n        onStatusOfUploadChanged: function onStatusOfUploadChanged(model, status) {\n            var text = __group('auto.withdrawal.revoke.');\n            var methodsForm = 'methodsForm';\n            var documentForm = 'documentForm';\n\n            switch (status) {\n                case SUCCESS:\n                    this.destroyForm(methodsForm);\n                    this.destroyForm(documentForm);\n                    this.createForm(methodsForm, this.$('.methods-form'));\n                    this.createForm(documentForm, this.$('.document-form'));\n                    modalDialog({ type: MESSAGE_DIALOG_TYPE, title: text('success'), text: text('success.text') });\n                    if (!this.model.isMethods()) core.trigger('funds-withdrawal:methods:reload');\n                    return;\n                case UPLOADING:\n                    modalDialog({ type: LOADING_DIALOG_TYPE });\n                    return;\n                case ERROR_ENTITY_TOO_LARGE:\n                    modalDialog({ type: MESSAGE_DIALOG_TYPE, title: text('error'), text: __('upload_documents.help.por.point3') });\n                    return;\n                case ERROR:\n                    modalDialog({ type: MESSAGE_DIALOG_TYPE, title: text('error'), text: text('error.text') });\n                    return;\n                default:\n                    return modalDialog({ type: LOADING_DIALOG_TYPE, action: HIDE });\n            }\n        },\n        onMethodChanged: function onMethodChanged() {\n            var $field = this.getFormField('documentForm', 'field_doc');\n\n            this.model.set('readyToExecute', YES);\n\n            $field.flush();\n            $field.enable();\n        }\n    });\n\n    module.exports = MethodsView;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/auto-withdrawal/revoke_method.view.js\n// module id = 2847\n// module chunks = 30\n\n//# sourceURL=webpack:///./src/js/modules/auto-withdrawal/revoke_method.view.js?");

/***/ }),

/***/ 2848:
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"revoke-method-content\\\">\\n    <div class=\\\"panel-container\\\"></div>\\n    <div class=\\\"accounts-form\\\"></div>\\n    <div class=\\\"methods-form\\\"></div>\\n    <div class=\\\"document-form\\\"></div>\\n</div>\";\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/auto-withdrawal/templates/revoke_method.html\n// module id = 2848\n// module chunks = 30\n\n//# sourceURL=webpack:///./src/js/modules/auto-withdrawal/templates/revoke_method.html?");

/***/ }),

/***/ 2849:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var BaseModel = __webpack_require__(2293);\n    var _ = __webpack_require__(0);\n    var server = __webpack_require__(11);\n\n    var _require = __webpack_require__(2151),\n        YES = _require.YES,\n        NO = _require.NO,\n        CONFIRM = _require.CONFIRM,\n        ACCEPTED = _require.ACCEPTED,\n        PROCESSING = _require.PROCESSING,\n        REFUSED = _require.REFUSED,\n        EMPTY = _require.EMPTY,\n        LOADING = _require.LOADING,\n        ERROR = _require.ERROR,\n        SUCCESS = _require.SUCCESS,\n        VALIDATE = _require.VALIDATE;\n\n    module.exports = BaseModel.extend({\n        defaults: function defaults() {\n            return {\n                methods: [],\n                readyToExecute: NO,\n                statusOfRevoke: EMPTY\n            };\n        },\n        initialize: function initialize() {\n            BaseModel.prototype.initialize.apply(this, arguments);\n\n            this.loadMethods();\n        },\n        confirmToRevoke: function confirmToRevoke() {\n            this.set({ statusOfRevoke: CONFIRM }, { trigger: true });\n        },\n        validateToRevoke: function validateToRevoke() {\n            this.set({ statusOfRevoke: VALIDATE }, { trigger: true });\n        },\n        accept: function accept(methodId) {\n            this.set({\n                statusOfRevoke: ACCEPTED,\n                methodId: methodId,\n                methodTypeId: this.getMethodById(methodId).methodTypeId\n            });\n            this.revokeWithdrawalMethod(methodId);\n        },\n        refuse: function refuse() {\n            this.set({ statusOfRevoke: REFUSED });\n        },\n\n\n        /**\n         * This actions is called by click on button in MethodsView\n         */\n        doRequest: function doRequest() {\n            this.validateToRevoke();\n        },\n        getFirst: function getFirst() {\n            return _.first(this.get('methods'));\n        },\n        revokeWithdrawalMethod: function revokeWithdrawalMethod(methodId) {\n            var _this = this;\n\n            var status = this.status('statusOfRevoke');\n\n            status(PROCESSING);\n\n            server.revokeWithdrawalMethod(methodId).then(function (res) {\n                _this.set({\n                    readyToExecute: NO, // Disable that button in MethodView 'Revoke method'\n                    methods: _.reject(_this.get('methods'), function (item) {\n                        return item.uniqueEntityId == methodId;\n                    })\n                });\n                return Promise.resolve(res);\n            }).then(function (res) {\n                return status(SUCCESS, { resultOfRevoke: res.data });\n            }).catch(function (err) {\n                return status(ERROR);\n            });\n        }\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/auto-withdrawal/revoke_method.model.js\n// module id = 2849\n// module chunks = 30\n\n//# sourceURL=webpack:///./src/js/modules/auto-withdrawal/revoke_method.model.js?");

/***/ }),

/***/ 2850:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var core = __webpack_require__(5);\n    var MultipleFormsView = __webpack_require__(868);\n    var template = _.template(__webpack_require__(2851));\n    var LoadingView = __webpack_require__(35);\n    var FormConfigs = __webpack_require__(2479);\n\n    var _require = __webpack_require__(2151),\n        EMPTY = _require.EMPTY,\n        LOADING = _require.LOADING,\n        SUCCESS = _require.SUCCESS,\n        ERROR = _require.ERROR,\n        CONFLICT = _require.CONFLICT,\n        YES = _require.YES,\n        NO = _require.NO,\n        VALIDATION = _require.VALIDATION,\n        UPLOADING = _require.UPLOADING,\n        PROCESSING = _require.PROCESSING,\n        LOADING_DIALOG_TYPE = _require.LOADING_DIALOG_TYPE,\n        MESSAGE_DIALOG_TYPE = _require.MESSAGE_DIALOG_TYPE,\n        ERROR_ENTITY_TOO_LARGE = _require.ERROR_ENTITY_TOO_LARGE,\n        HIDE = _require.HIDE,\n        CLEAR_DIALOG = _require.CLEAR_DIALOG;\n\n    var modalDialog = function modalDialog(options) {\n        return core.trigger('funds-withdrawal:withdrawal:dialog', options);\n    };\n    var messagebox = function messagebox(caption, text, onClose) {\n        return core.trigger('ui:message-box', { translucent: '3', additionalClassName: 'fluid-button', caption: caption, text: text, onClose: onClose });\n    };\n\n    var MethodsView = MultipleFormsView.extend({\n        className: 'add-method',\n\n        initialize: function initialize() {\n            var _this = this;\n\n            MultipleFormsView.prototype.initialize.apply(this, arguments);\n\n            this.listenTo(this.model, 'change:statusOfCandidates', this.loadCompleted);\n            this.listenTo(this.model, 'change:statusOfMethods', this.loadCompleted);\n            this.listenTo(this.model, 'change:statusOfUpload', this.onStatusOfUploadChanged);\n            this.listenTo(this, 'form:selectCandidateForm:change:field_methodTypeId', this.onSelectCandidateChanged);\n            this.listenTo(this.model, 'change:statusOfAddition', this.onStatusOfAdditionChanged);\n            this.listenTo(this, 'form:field-update', function (fieldName, value) {\n                return _this.model.set(fieldName, value);\n            });\n\n            this.formConfigs = FormConfigs;\n        },\n        render: function render() {\n            MultipleFormsView.prototype.render.call(this);\n\n            this.$el.html(template({ model: this.model.toJSON() }));\n            this.loadCompleted();\n\n            return this;\n        },\n        loadCompleted: function loadCompleted() {\n            var model = this.model;\n            var statusOfCandidates = model.get('statusOfCandidates');\n            var statusOfMethods = model.get('statusOfMethods');\n            var formName = 'selectCandidateForm';\n            var $candidateContainer = this.$('.fn-candidate-form');\n            var errorText = __('generic.error.message');\n            var uiPanel = '.add-method-content';\n\n            var status = EMPTY;\n            if (statusOfMethods == SUCCESS && statusOfCandidates == SUCCESS) status = SUCCESS;\n            if (statusOfMethods == ERROR || statusOfCandidates == ERROR) status = ERROR;\n\n            switch (status) {\n                case EMPTY:\n                case LOADING:\n                    this.addChildView(uiPanel, LoadingView, { parent: this.$(uiPanel), translucent: '1' });\n                    return;\n                case ERROR:\n                    this.removeChildView(uiPanel);\n                    messagebox(__('auto.withdrawal.error.title'), errorText);\n                    $candidateContainer.html(errorText);\n                    return;\n                case SUCCESS:\n                    this.removeChildView(uiPanel);\n                    if (model.isCandidatesEmpty()) return $candidateContainer.html('The platform does not allow you to add methods.');\n                    this.createForm(formName, $candidateContainer);\n                    return;\n            }\n        },\n        onSelectCandidateChanged: function onSelectCandidateChanged($field, value) {\n            var $container = this.$('.fn-method-form');\n            var candidate = this.model.getCandidateById(value);\n            if (!candidate) return;\n\n            this.createForm(candidate.name, $container);\n            this.model.set({ readyToExecute: YES, selectedCandidate: candidate.name });\n        },\n        onStatusOfAdditionChanged: function onStatusOfAdditionChanged(model, status) {\n            var selectedCandidate = model.get('selectedCandidate');\n            var formName = selectedCandidate;\n            var text = __group('auto.withdrawal.method.');\n            var form = this.getForm(formName);\n            var methodTypeId = this.getFormField('selectCandidateForm', 'field_methodTypeId').value();\n\n            switch (status) {\n                case VALIDATION:\n                    var hasErrors = form.validate();\n                    var data = model.normalizeFormData(form.getData());\n\n                    model.set('statusOfAddition', EMPTY);\n\n                    delete data.doc;\n\n                    if (!hasErrors) model.addWithdrawalMethod(methodTypeId, data);\n                    return;\n                case PROCESSING:\n                    modalDialog({ type: LOADING_DIALOG_TYPE });\n                    return;\n                case SUCCESS:\n                    var paymentAccountId = model.get('resultOfAddition');\n                    var file = form.getField('field_doc').getFile();\n                    model.uploadDocument(paymentAccountId, methodTypeId, 38, file);\n                    return;\n                case ERROR:\n                    modalDialog({ type: MESSAGE_DIALOG_TYPE, title: text('error'), text: text('error.text') });\n                    return;\n                case CONFLICT:\n                    modalDialog({ type: MESSAGE_DIALOG_TYPE, title: text('conflict'), text: text('conflict.text') });\n                    return;\n            }\n        },\n        onStatusOfUploadChanged: function onStatusOfUploadChanged(model, status) {\n            var text = __group('auto.withdrawal.method.');\n            var textAdd = __group('auto.withdrawal.add_method.');\n\n            switch (status) {\n                case ERROR:\n                    modalDialog({ type: MESSAGE_DIALOG_TYPE, title: text('error'), text: text('error.text') });\n                    return;\n                case SUCCESS:\n                    modalDialog({ type: CLEAR_DIALOG });\n                    messagebox(textAdd('success'), textAdd('success.text'), function () {\n                        core.trigger('funds-withdrawal:withdrawal:state', {\n                            currentTabId: 'withdrawal',\n                            selectedPaymentId: model.get('resultOfAddition')\n                        });\n                    });\n                    return;\n                case UPLOADING:\n                    return;\n                case ERROR_ENTITY_TOO_LARGE:\n                    modalDialog({ type: MESSAGE_DIALOG_TYPE, title: text('error'), text: __('upload_documents.help.por.point3') });\n                    return;\n            }\n        }\n    });\n\n    module.exports = MethodsView;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/auto-withdrawal/add_method.view.js\n// module id = 2850\n// module chunks = 30\n\n//# sourceURL=webpack:///./src/js/modules/auto-withdrawal/add_method.view.js?");

/***/ }),

/***/ 2851:
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"add-method-content\\\">\\n    <div class=\\\"fn-candidate-form\\\"></div>\\n    <div class=\\\"fn-method-form\\\"></div>\\n</div>\";\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/auto-withdrawal/templates/add_method.html\n// module id = 2851\n// module chunks = 30\n\n//# sourceURL=webpack:///./src/js/modules/auto-withdrawal/templates/add_method.html?");

/***/ }),

/***/ 2852:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var BaseModel = __webpack_require__(2293);\n    var server = __webpack_require__(11);\n    var user = __webpack_require__(10);\n\n    var _require = __webpack_require__(2151),\n        YES = _require.YES,\n        NO = _require.NO,\n        DEFAULT = _require.DEFAULT,\n        EMPTY = _require.EMPTY,\n        CONFLICT = _require.CONFLICT,\n        LOADING = _require.LOADING,\n        ERROR = _require.ERROR,\n        SUCCESS = _require.SUCCESS,\n        PROCESSING = _require.PROCESSING,\n        VALIDATION = _require.VALIDATION,\n        UPLOADING = _require.UPLOADING;\n\n    module.exports = BaseModel.extend({\n        defaults: function defaults() {\n            var userCountry = String(user.getUserCountry()).toUpperCase();\n            return {\n                readyToExecute: NO,\n                statusOfAddition: EMPTY,\n                statusOfCandidates: EMPTY,\n                statusOfCountries: EMPTY,\n                selectedDefaultCountry: userCountry\n            };\n        },\n        initialize: function initialize() {\n            BaseModel.prototype.initialize.apply(this, arguments);\n\n            this.loadMethods();\n            this.loadCandidates();\n            this.loadCountries();\n        },\n        addWithdrawalMethod: function addWithdrawalMethod(methodTypeId, methodData) {\n            var user = __webpack_require__(10);\n            var status = this.status('statusOfAddition');\n\n            status(PROCESSING);\n\n            server.addWithdrawalMethod(methodTypeId, methodData).then(function (res) {\n                return status(SUCCESS, { resultOfAddition: res.data });\n            }).catch(function (err) {\n                var errorStatus = err.response.status === 409 ? CONFLICT : ERROR;\n                status(errorStatus);\n            });\n        },\n        doRequest: function doRequest() {\n            this.set('statusOfAddition', VALIDATION);\n        }\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/auto-withdrawal/add_method.model.js\n// module id = 2852\n// module chunks = 30\n\n//# sourceURL=webpack:///./src/js/modules/auto-withdrawal/add_method.model.js?");

/***/ })

});