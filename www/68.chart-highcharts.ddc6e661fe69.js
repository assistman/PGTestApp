webpackJsonp([68],{

/***/ 2121:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n\n    var H = __webpack_require__(452);\n\n    var clone = __webpack_require__(141);\n\n    var ChartsConfigurator = __webpack_require__(848);\n\n    var Point = __webpack_require__(2233);\n\n    var EMPTY_PATH = ['M', 0, 0];\n\n    var Drawing = function () {\n        _createClass(Drawing, [{\n            key: 'defaults',\n            get: function get() {\n                return {};\n            }\n        }], [{\n            key: 'EMPTY_PATH',\n            get: function get() {\n                return EMPTY_PATH;\n            }\n        }]);\n\n        function Drawing(chart, parent, options) {\n            _classCallCheck(this, Drawing);\n\n            this._parent = parent;\n            this._xAxis = chart.get(ChartsConfigurator.options.names.axis.mainX);\n            this._yAxis = chart.get(ChartsConfigurator.options.names.axis.mainY);\n            this._chartDrawing = chart.chartDrawing;\n            this._renderer = chart.renderer;\n            this._pointer = chart.pointer;\n            this._options = _.extend({}, clone(this.fxclientOptions), options);\n        }\n\n        _createClass(Drawing, [{\n            key: '_init',\n            value: function _init() {\n                throw Error('unimplemented abstract method');\n            }\n        }, {\n            key: '_update',\n            value: function _update(pointIndex, point) {\n                throw Error('unimplemented abstract method');\n            }\n        }, {\n            key: '_move',\n            value: function _move(finished, dx, dy, point) {\n                throw Error('unimplemented abstract method');\n            }\n        }, {\n            key: '_render',\n            value: function _render() {\n                throw Error('unimplemented abstract method');\n            }\n        }, {\n            key: '_destroy',\n            value: function _destroy() {\n                throw Error('unimplemented abstract method');\n            }\n        }, {\n            key: '_setColor',\n            value: function _setColor(color) {\n                throw Error('unimplemented abstract method');\n            }\n\n            //---end: abstract methods section\n\n        }, {\n            key: 'redraw',\n            value: function redraw() {\n                if (!this.initialized) {\n                    this.init();\n                }\n\n                this.update();\n            }\n        }, {\n            key: 'init',\n            value: function init(postponeEvents) {\n                this._init();\n\n                if (!postponeEvents) {\n                    this.addEvents();\n                }\n\n                this.initialized = true;\n            }\n        }, {\n            key: 'update',\n            value: function update(pointIndex, x, y) {\n                var point = new Point(x, y);\n\n                this._update(pointIndex, point);\n                this.updatePoints(pointIndex, point);\n                this.render(this.options.keyPoints.length);\n            }\n        }, {\n            key: 'render',\n            value: function render(pointsLength) {\n                this._render(pointsLength);\n            }\n        }, {\n            key: 'setColor',\n            value: function setColor(color) {\n                try {\n                    this._setColor(color);\n                    this.options.properties.line.lineColor = color;\n                    this.save();\n                } catch (e) {\n                    console.error('Error during the changing the color of the drawing\\n', e);\n                }\n            }\n        }, {\n            key: 'getColor',\n            value: function getColor() {\n                return this.options.properties.line.lineColor;\n            }\n        }, {\n            key: 'isFinished',\n            value: function isFinished() {\n                return !_.isFunction(this._isFinished) || this._isFinished.apply(this, arguments);\n            }\n        }, {\n            key: 'finalize',\n            value: function finalize(save) {\n                this.chartDrawing.finalizeDrawing(save);\n            }\n        }, {\n            key: 'save',\n            value: function save() {\n                this.chartDrawing.saveDrawing();\n            }\n        }, {\n            key: 'remove',\n            value: function remove() {\n                this.chartDrawing.removeActiveDrawing();\n            }\n        }, {\n            key: 'destroy',\n            value: function destroy() {\n                _.each(this.$points, function (point) {\n                    return point.destroy();\n                });\n\n                // Highchart's 'addEvent' function returns a function that can be called to remove this event. And here we use it\n                for (var handler in this.mouseHandlers) {\n                    this.mouseHandlers[handler]();\n                }\n\n                this._destroy();\n            }\n        }, {\n            key: 'createG',\n            value: function createG() {\n                return this.renderer.g('drawing ' + this.options.type.replace(/_/g, '-')).attr({\n                    zIndex: 7\n                }).add(this.parent);\n            }\n        }, {\n            key: 'createLine',\n            value: function createLine() {\n                var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : EMPTY_PATH;\n                var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.$container;\n\n                return this.renderer.path(path).attr({\n                    'stroke-width': this.options.properties.line.lineWidth,\n                    'stroke': this.getColor(),\n                    'pointer-events': 'none'\n                }).add(container);\n            }\n        }, {\n            key: 'createLineHover',\n            value: function createLineHover() {\n                var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : EMPTY_PATH;\n                var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.$container;\n\n                return this.renderer.path(path).attr({\n                    'class': 'hover',\n                    'stroke-width': 1,\n                    'stroke': 'transparent',\n                    'stroke-linecap': 'round'\n                }).add(container);\n            }\n        }, {\n            key: 'createFilledArea',\n            value: function createFilledArea() {\n                var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : EMPTY_PATH;\n                var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.$container;\n\n                return this.renderer.path(path).attr({\n                    'class': 'filled',\n                    'fill': this.getColor(),\n                    'fill-opacity': '0.4'\n                }).add(container);\n            }\n        }, {\n            key: 'createLabel',\n            value: function createLabel() {\n                var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { text: null, x: 0, y: 0 };\n                var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.$container;\n                var text = parameters.text,\n                    x = parameters.x,\n                    y = parameters.y,\n                    shape = parameters.shape,\n                    anchorX = parameters.anchorX,\n                    anchorY = parameters.anchorY,\n                    useHTML = parameters.useHTML,\n                    baseline = parameters.baseline,\n                    className = parameters.className;\n\n\n                return this.renderer.label(text, x, y, shape, anchorX, anchorY, useHTML, baseline, className).css({\n                    'color': '#000000',\n                    'fontSize': '10px'\n                }).attr({\n                    'fill': 'rgba(255, 255, 255, 0.5)',\n                    'padding': 2,\n                    'r': 3\n                }).add(container);\n            }\n        }, {\n            key: 'createText',\n            value: function createText() {\n                var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { text: null, x: 0, y: 0, fontSize: '11px' };\n                var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.$container;\n                var text = parameters.text,\n                    x = parameters.x,\n                    y = parameters.y,\n                    fontSize = parameters.fontSize;\n\n\n                return this.renderer.label(text, x, y).css({\n                    'color': '#000000',\n                    fontSize: fontSize\n                }).attr({\n                    'stroke': this.getColor(),\n                    'stroke-width': 1,\n                    'fill': this.getFillColor(),\n                    'fill-opacity': '0.8',\n                    'padding': 7,\n                    'r': 0\n                }).add(container);\n            }\n        }, {\n            key: 'createPoints',\n            value: function createPoints() {\n                return _.map(this.options.keyPoints, this.keyPointToSvgPoint, this);\n            }\n        }, {\n            key: 'keyPointToSvgPoint',\n            value: function keyPointToSvgPoint(keyPoint, index) {\n                return new Point(keyPoint).initSVG(index, this);\n            }\n        }, {\n            key: 'updatePoints',\n            value: function updatePoints(index, point) {\n                var _this = this;\n\n                if (!_.isUndefined(index) && !_.isUndefined(point)) {\n                    if (this.$points[index]) {\n                        this.$points[index].fromPoint(point);\n                        this.$points[index].updateSVG();\n                    } else {\n                        this.$points[index] = point.initSVG(index, this);\n                    }\n\n                    this.options.keyPoints[index] = this.$points[index].convert(true).getValues();\n                } else {\n                    _.each(this.$points, function (_point) {\n                        return _point.updateSVG(!_this.editing && !_point.editing);\n                    });\n                }\n            }\n        }, {\n            key: 'addEvents',\n            value: function addEvents() {\n                var _this2 = this;\n\n                this.mouseHandlers = {};\n                this.mouseHandlers.mousedown = H.addEvent(this.$hoverElement.element, 'mousedown', function (mouseDownEvent) {\n                    mouseDownEvent = _this2.normalize(mouseDownEvent);\n\n                    if (!_this2.chartDrawing.isInsideAxis(mouseDownEvent)) {\n                        return;\n                    }\n\n                    mouseDownEvent.stopImmediatePropagation();\n\n                    _this2.startEditing();\n\n                    var moved = false;\n                    var prevEvent = _this2.normalize(mouseDownEvent);\n\n                    _this2.mouseHandlers.mousemove = H.addEvent(_this2.ownerSVG, 'mousemove', function (mouseMoveEvent) {\n                        mouseMoveEvent = _this2.normalize(mouseMoveEvent);\n\n                        if (!_this2.chartDrawing.isInsideAxis(mouseMoveEvent)) {\n                            return;\n                        }\n\n                        moved = true;\n                        prevEvent = _this2.onMove(false, mouseMoveEvent, prevEvent);\n                    });\n\n                    _this2.mouseHandlers.mouseup = H.addEvent(_this2.ownerSVG, 'mouseup', function (mouseUpEvent) {\n                        mouseUpEvent = _this2.normalize(mouseUpEvent);\n\n                        if (!_this2.chartDrawing.isInsideAxis(mouseUpEvent)) {\n                            return;\n                        }\n\n                        prevEvent = _this2.onMove(true, mouseUpEvent, prevEvent);\n                        _this2.mouseHandlers.mousemove();\n                        _this2.mouseHandlers.mouseup();\n                        _this2.stopEditing(moved);\n                    });\n                });\n\n                _.each(this.$points, function (point) {\n                    return point.addEvents(_this2);\n                });\n            }\n        }, {\n            key: 'onMove',\n            value: function onMove(finished, currentEvent, previousEvent) {\n                currentEvent = this.normalize(currentEvent);\n                this.move(finished, currentEvent.chartX - previousEvent.chartX, currentEvent.chartY - previousEvent.chartY);\n\n                return currentEvent;\n            }\n        }, {\n            key: 'move',\n            value: function move(finished, dx, dy, point) {\n                var _this3 = this;\n\n                if (point) {\n                    point.setPixels(point.x + dx, point.y + dy);\n                    this._move(finished, dx, dy, point);\n                } else {\n                    _.each(this.$points, function (_point) {\n                        return _point.setPixels(_point.x + dx, _point.y + dy);\n                    });\n                    this._move(finished, dx, dy, point);\n                }\n\n                if (finished) {\n                    _.each(this.$points, function (_point, index) {\n                        return _this3.options.keyPoints[index] = _point.convert(true).getValues();\n                    });\n                }\n\n                this.updatePoints();\n                this.render(this.options.keyPoints.length);\n            }\n        }, {\n            key: 'deactivate',\n            value: function deactivate(stopPropagation) {\n                Drawing.removeSVGClass(this.$container, 'active');\n\n                if (!stopPropagation) {\n                    this.chartDrawing.setActiveDrawing(null);\n                }\n            }\n        }, {\n            key: 'activate',\n            value: function activate(stopPropagation) {\n                Drawing.addSVGClass(this.$container, 'active');\n\n                if (!stopPropagation) {\n                    this.chartDrawing.setActiveDrawing(this);\n                }\n            }\n        }, {\n            key: 'startEditing',\n            value: function startEditing() {\n                var editable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this;\n\n                editable.editing = true;\n\n                this.chartDrawing.enableEditing();\n                Drawing.addSVGClass(this.$container, 'in-moving');\n                this.activate();\n            }\n        }, {\n            key: 'stopEditing',\n            value: function stopEditing(moved) {\n                var editable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;\n\n                editable.editing = false;\n\n                if (!(editable === this ? editable.notSaved : editable.drawing.notSaved)) {\n                    this.chartDrawing.disableEditing();\n                }\n\n                Drawing.removeSVGClass(this.$container, 'in-moving');\n\n                if (moved) {\n                    this.chartDrawing.saveDrawing(true);\n                }\n            }\n        }, {\n            key: 'normalize',\n            value: function normalize() {\n                var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.event;\n\n                return e.chartX && e.chartY ? e : this.pointer.normalize(e);\n            }\n        }, {\n            key: 'parent',\n            get: function get() {\n                return this._parent;\n            }\n        }, {\n            key: 'options',\n            get: function get() {\n                return this._options;\n            }\n        }, {\n            key: 'xAxis',\n            get: function get() {\n                return this._xAxis;\n            }\n        }, {\n            key: 'yAxis',\n            get: function get() {\n                return this._yAxis;\n            }\n        }, {\n            key: 'pointer',\n            get: function get() {\n                return this._pointer;\n            }\n        }, {\n            key: 'renderer',\n            get: function get() {\n                return this._renderer;\n            }\n        }, {\n            key: 'chartDrawing',\n            get: function get() {\n                return this._chartDrawing;\n            }\n        }, {\n            key: 'ownerSVG',\n            get: function get() {\n                return this.$container.element.ownerSVGElement;\n            }\n\n            //---start: abstract methods section\n\n        }, {\n            key: 'fxclientOptions',\n            get: function get() {\n                throw Error('unimplemented abstract method');\n            }\n        }, {\n            key: 'initialized',\n            get: function get() {\n                return this._initialized;\n            },\n            set: function set(value) {\n                this._initialized = value;\n            }\n        }], [{\n            key: 'addSVGClass',\n            value: function addSVGClass(svg, className) {\n                var classList = svg.element.getAttribute('class').split(' ');\n                var index = classList.indexOf(className);\n\n                if (index <= -1) {\n                    classList.push(className);\n                }\n\n                svg.element.setAttribute('class', classList.join(' '));\n            }\n        }, {\n            key: 'removeSVGClass',\n            value: function removeSVGClass(svg, className) {\n                var classList = svg.element.getAttribute('class').split(' ');\n                var index = classList.indexOf(className);\n\n                if (index > -1) {\n                    classList.splice(index, 1);\n                }\n\n                svg.element.setAttribute('class', classList.join(' '));\n            }\n        }, {\n            key: 'lightenDarkenColor',\n            value: function lightenDarkenColor(col, amt) {\n                var usePound = false;\n\n                if (col[0] === '#') {\n                    col = col.slice(1);\n                    usePound = true;\n                }\n\n                var num = parseInt(col, 16);\n\n                var r = (num >> 16) + amt;\n\n                if (r > 255) {\n                    r = 255;\n                } else if (r < 0) {\n                    r = 0;\n                }\n\n                var b = (num >> 8 & 0x00FF) + amt;\n\n                if (b > 255) {\n                    b = 255;\n                } else if (b < 0) {\n                    b = 0;\n                }\n\n                var g = (num & 0x0000FF) + amt;\n\n                if (g > 255) {\n                    g = 255;\n                } else if (g < 0) {\n                    g = 0;\n                }\n\n                return '' + (usePound ? '#' : '') + ('000000' + (g | b << 8 | r << 16).toString(16)).slice(-6);\n            }\n        }]);\n\n        return Drawing;\n    }();\n\n    module.exports = Drawing;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/drawings/models/drawing.js\n// module id = 2121\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/drawings/models/drawing.js?");

/***/ }),

/***/ 2122:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var server = __webpack_require__(11);\n    var conversionRateSubscription = __webpack_require__(287);\n    var stream = __webpack_require__(29);\n    var user = __webpack_require__(10);\n    var EditPositionModel = __webpack_require__(870);\n    var EditOrderModel = __webpack_require__(871);\n\n    var TAKE_PROFIT = 'takeProfit';\n    var STOP_LOSS = 'stopLoss';\n\n    var Editor = function () {\n        function Editor() {\n            _classCallCheck(this, Editor);\n        }\n\n        _createClass(Editor, null, [{\n            key: 'initEditing',\n            value: function initEditing(handler, model, subscribeToConversion, _ref) {\n                var onChangeProfitForTakeProfit = _ref.onChangeProfitForTakeProfit,\n                    onChangeLossForStopLoss = _ref.onChangeLossForStopLoss,\n                    onChangeRate = _ref.onChangeRate,\n                    onChangeConversionRate = _ref.onChangeConversionRate;\n\n                onChangeConversionRate && handler.listenTo(model, 'change:conversionRate', onChangeConversionRate);\n                onChangeRate && handler.listenTo(model, 'change:rate', onChangeRate);\n                onChangeProfitForTakeProfit && handler.listenTo(model, 'change:profitForTakeProfit', onChangeProfitForTakeProfit);\n                onChangeLossForStopLoss && handler.listenTo(model, 'change:lossForStopLoss', onChangeLossForStopLoss);\n\n                subscribeToConversion && Editor.sendSubscribeToConversion(model.getInstrument().getCurrency(), user.getUserCurrency());\n            }\n        }, {\n            key: 'createEditPositionModel',\n            value: function createEditPositionModel(position, instrument) {\n                var type = position.get('quantity') < 0 ? 'Sell' : 'Buy';\n\n                return new EditPositionModel({\n                    instrumentModel: instrument,\n                    type: type,\n                    direction: type,\n                    position: position\n                });\n            }\n        }, {\n            key: 'stopEditing',\n            value: function stopEditing(handler, model, unsubscribeFromConversion) {\n                handler.stopListening(model);\n                unsubscribeFromConversion && Editor.sendUnsubscribeFromConversion(model.getInstrument().getCurrency(), user.getUserCurrency());\n            }\n        }, {\n            key: 'sendSubscribeToConversion',\n            value: function sendSubscribeToConversion(from, to) {\n                return conversionRateSubscription.add(from, to).then(Editor.requestConversionSubscriptionSuccess).catch(Editor.requestConversionSubscriptionError);\n            }\n        }, {\n            key: 'sendUnsubscribeFromConversion',\n            value: function sendUnsubscribeFromConversion(from, to) {\n                return conversionRateSubscription.remove(from, to).then(Editor.requestConversionUnsubscriptionSuccess).catch(Editor.requestConversionUnsubscriptionError);\n            }\n        }, {\n            key: 'requestConversionSubscriptionSuccess',\n            value: function requestConversionSubscriptionSuccess(res) {\n                console.log('Subscribe conversion... OK', res);\n\n                return Promise.resolve(res);\n            }\n        }, {\n            key: 'requestConversionSubscriptionError',\n            value: function requestConversionSubscriptionError(res) {\n                console.log('Subscribe conversion... ERROR', res);\n\n                return Promise.reject(res);\n            }\n        }, {\n            key: 'requestConversionUnsubscriptionSuccess',\n            value: function requestConversionUnsubscriptionSuccess(res) {\n                console.log('Unsubscribe conversion... OK', res);\n\n                return Promise.resolve(res);\n            }\n        }, {\n            key: 'requestConversionUnsubscriptionError',\n            value: function requestConversionUnsubscriptionError(res) {\n                console.log('Unsubscribe conversion... ERROR', res);\n\n                return Promise.reject(res);\n            }\n        }, {\n            key: 'removePositionStopLoss',\n            value: function removePositionStopLoss(model) {\n                return Editor.requestEditPosition(model, [TAKE_PROFIT]).then(Editor.onSubmitSuccess).catch(Editor.onSubmitError);\n            }\n        }, {\n            key: 'removePositionTakeProfit',\n            value: function removePositionTakeProfit(model) {\n                return Editor.requestEditPosition(model, [STOP_LOSS]).then(Editor.onSubmitSuccess).catch(Editor.onSubmitError);\n            }\n        }, {\n            key: 'removeOrderStopLoss',\n            value: function removeOrderStopLoss(model) {\n                return Editor.requestPlaceOrder(model, [TAKE_PROFIT]).then(Editor.onSubmitSuccess).catch(Editor.onSubmitError);\n            }\n        }, {\n            key: 'removeOrderTakeProfit',\n            value: function removeOrderTakeProfit(model) {\n                return Editor.requestPlaceOrder(model, [STOP_LOSS]).then(Editor.onSubmitSuccess).catch(Editor.onSubmitError);\n            }\n        }, {\n            key: 'requestEditPosition',\n            value: function requestEditPosition(model, fieldsToSave) {\n                console.log('Edit Position...');\n\n                var editPositionData = [];\n\n                if (fieldsToSave.indexOf(TAKE_PROFIT) >= 0 && model.getPositionModel().get(TAKE_PROFIT)) {\n                    var takeProfit = {\n                        fixedOffset: model.minOrderDistance(),\n                        fixedPrice: model.getTakeProfit(),\n                        isPriceFixed: true,\n                        orderType: 'LIMIT',\n                        requestId: null\n                    };\n\n                    editPositionData.push(takeProfit);\n                }\n\n                if (fieldsToSave.indexOf(STOP_LOSS) >= 0 && model.getPositionModel().get(STOP_LOSS)) {\n                    var stopLoss = {\n                        fixedOffset: model.minOrderDistance(),\n                        fixedPrice: model.getStopLoss(),\n                        isPriceFixed: true,\n                        orderType: 'STOP',\n                        requestId: null\n                    };\n\n                    editPositionData.push(stopLoss);\n                }\n\n                return server.editPosition(stream.getAtmosphereId(), editPositionData, model.getPositionCode());\n            }\n        }, {\n            key: 'onSubmitSuccess',\n            value: function onSubmitSuccess() {\n                console.log('Submit... OK');\n\n                return Promise.resolve();\n            }\n        }, {\n            key: 'onSubmitError',\n            value: function onSubmitError() {\n                console.log('Submit... ERROR');\n\n                return Promise.reject(res);\n            }\n\n            /*-----------------*/\n\n            // same as in events.bus but with instrument in arguments\n\n        }, {\n            key: 'getOrderAttributes',\n            value: function getOrderAttributes(order, instrument) {\n                var quantity = order.get('quantity');\n                var action = quantity > 0 ? 'buy' : 'sell';\n                var type = order.get('type');\n                var price = null;\n                var orderPosition = null;\n                var takeProfit = order.get(TAKE_PROFIT);\n                var stopLoss = order.get(STOP_LOSS);\n\n                switch (type) {\n                    case 'STOP':\n                        type = 'Entry Stop';\n                        orderPosition = action === 'buy' ? 'above' : 'below';\n                        price = order.get('stopPrice');\n                        break;\n                    case 'LIMIT':\n                        type = 'Entry Limit';\n                        orderPosition = action === 'buy' ? 'below' : 'above';\n                        price = order.get('limitPrice');\n                        break;\n                }\n\n                return {\n                    instrument: instrument,\n                    order: order,\n                    action: action,\n                    quantity: Math.abs(quantity),\n                    type: type,\n                    orderPosition: orderPosition,\n                    price: price,\n                    takeProfit: takeProfit && takeProfit.fixedPrice,\n                    stopLoss: stopLoss && stopLoss.fixedPrice\n                };\n            }\n        }, {\n            key: 'createEditOrderModel',\n            value: function createEditOrderModel(order, instrument) {\n                var attributes = Editor.getOrderAttributes(order, instrument);\n\n                return new EditOrderModel({\n                    instrumentModel: attributes.instrument,\n                    type: attributes.action,\n                    direction: attributes.action.toUpperCase(),\n                    order: attributes.order,\n                    takeProfit: attributes.takeProfit,\n                    stopLoss: attributes.stopLoss\n                });\n            }\n        }, {\n            key: 'requestPlaceOrder',\n            value: function requestPlaceOrder(model, fieldsToSave) {\n                console.log('Place order...');\n\n                var editOrderData = {\n                    effect: 'OPENING',\n                    instrumentId: model.getInstrumentModel().getId(),\n                    orderSide: model.getDirection(),\n                    orderType: model.order.getType(),\n                    // quantity: model.isSell() ? -(model.getAmount()) : model.getAmount(),\n                    quantity: model.getAmount(),\n                    refOrderChainId: model.order.getOrderChainId(),\n                    requestId: _.uniqueId('gwt-uid-'),\n                    timeInForce: 'GTC'\n                };\n\n                if (model.order.isLimitPrice()) {\n                    editOrderData.limitPrice = model.getCurrentPrice();\n                    editOrderData.stopPrice = null;\n                } else {\n                    editOrderData.limitPrice = null;\n                    editOrderData.stopPrice = model.getCurrentPrice();\n                }\n\n                if (fieldsToSave.indexOf(STOP_LOSS) >= 0 && model.order.get(STOP_LOSS)) {\n                    editOrderData.stopLoss = {\n                        fixedOffset: model.minOrderDistance(false),\n                        fixedPrice: model.getStopLoss(),\n                        isPriceFixed: true,\n                        orderType: 'STOP'\n                    };\n                }\n\n                if (fieldsToSave.indexOf(TAKE_PROFIT) >= 0 && model.order.get(TAKE_PROFIT)) {\n                    editOrderData.takeProfit = {\n                        fixedOffset: model.minOrderDistance(false),\n                        fixedPrice: model.getTakeProfit(),\n                        isPriceFixed: true,\n                        orderType: 'LIMIT'\n                    };\n                }\n\n                // dirty hack for revert rate after order's reject\n                model.order.unset('modifiedTime', { silent: true });\n\n                return server.placeOrder(stream.getAtmosphereId(), editOrderData);\n            }\n        }, {\n            key: 'updatePositionTakeProfit',\n            value: function updatePositionTakeProfit(model) {\n                return Editor.updatePosition(model);\n            }\n        }, {\n            key: 'updatePositionStopLoss',\n            value: function updatePositionStopLoss(model) {\n                return Editor.updatePosition(model);\n            }\n        }, {\n            key: 'updatePosition',\n            value: function updatePosition(model) {\n                return Editor.requestEditPosition(model, [TAKE_PROFIT, STOP_LOSS]).then(Editor.onSubmitSuccess).catch(Editor.onSubmitError);\n            }\n        }, {\n            key: 'updateOrderTakeProfit',\n            value: function updateOrderTakeProfit(model) {\n                return Editor.updateOrder(model);\n            }\n        }, {\n            key: 'updateOrderStopLoss',\n            value: function updateOrderStopLoss(model) {\n                return Editor.updateOrder(model);\n            }\n        }, {\n            key: 'updateOrder',\n            value: function updateOrder(model) {\n                return Editor.requestPlaceOrder(model, [TAKE_PROFIT, STOP_LOSS]).then(Editor.onSubmitSuccess).catch(Editor.onSubmitError);\n            }\n        }]);\n\n        return Editor;\n    }();\n\n    module.exports = Editor;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/trading-editor/editor.js\n// module id = 2122\n// module chunks = 6 68 70 88\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/trading-editor/editor.js?");

/***/ }),

/***/ 2131:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _require = __webpack_require__(22),\n        Events = _require.Events;\n\n    var numbro = __webpack_require__(46);\n    var _ = __webpack_require__(0);\n    var H = __webpack_require__(452);\n    var user = __webpack_require__(10);\n    var ChartsConfigurator = __webpack_require__(848);\n\n    var editButtonIcon = __webpack_require__(2388);\n    var closeButtonIcon = __webpack_require__(2389);\n    var tpslButtonIcon = __webpack_require__(2390);\n    var tpslSelectedButtonIcon = __webpack_require__(2391);\n\n    var EMPTY_PATH = ['M', 0, 0];\n    var ELEMENTS_KEYS = ['$rateLine', '$hoverElement', '$rateLabel', '$infoLabel', '$plLabel', '$editButton', '$closeButton', '$tpslButton', '$container'];\n\n    var DASH_STYLES = __webpack_require__(2235);\n\n    var _PRESETS = {\n        RATE_LABEL: {\n            attr: {\n                'stroke-width': 0,\n                padding: ChartsConfigurator.options.chart.label.padding,\n                r: ChartsConfigurator.options.chart.label.radius\n            },\n            css: {\n                color: '#FFFFFF',\n                fontSize: '11px',\n                fontWeight: '500',\n                fontFamily: 'Lato, \"Helvetica Neue\", Helvetica, Arial, sans-serif;'\n            }\n        },\n        INFO_LABEL: {\n            attr: {\n                fill: '#FFFFFF',\n                'stroke-width': 1,\n                paddingLeft: 3,\n                padding: 3,\n                r: 2\n            },\n            css: {\n                fontSize: '11px',\n                fontWeight: 'bold',\n                fontFamily: 'Lato, \"Helvetica Neue\", Helvetica, Arial, sans-serif;'\n            }\n        },\n        PL_LABEL: {\n            attr: {\n                fill: '#FFFFFF',\n                'stroke-width': 1,\n                padding: 3,\n                r: 2\n            },\n            css: {\n                color: '#FFFFFF',\n                fontSize: '11px',\n                fontWeight: 'bold',\n                fontFamily: 'Lato, \"Helvetica Neue\", Helvetica, Arial, sans-serif;'\n            }\n        },\n        BUTTON: {\n            NORMAL_STATE: {\n                style: {\n                    color: '#1960d7'\n                },\n                paddingLeft: 1,\n                padding: 3,\n                // customize title\n                r: 2,\n                'stroke-width': 1,\n                stroke: '#7c7c7c',\n                fill: '#ffffff'\n            }, HOVER_STATE: {\n                fill: '#f0f1f2'\n            }\n        },\n        CLOSE_BUTTON: {},\n        TPSL_BUTTON: {}\n    };\n\n    var BaseRateLine = function () {\n        _createClass(BaseRateLine, [{\n            key: 'defaults',\n            get: function get() {\n                throw Error(this.constructor.name + ' : unimplemented abstract method');\n            }\n        }, {\n            key: 'chart',\n            get: function get() {\n                return this._chart;\n            }\n        }, {\n            key: 'options',\n            get: function get() {\n                return this._options;\n            }\n        }], [{\n            key: 'DASH_STYLES',\n            get: function get() {\n                return DASH_STYLES;\n            }\n        }]);\n\n        function BaseRateLine(chart) {\n            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n            _classCallCheck(this, BaseRateLine);\n\n            this._chart = chart;\n            this._options = _.extend({}, this.defaults, options);\n\n            if (this.options.handleEvents) {\n                _.extend(this, Events);\n            }\n\n            this.$container = this.createContainer();\n\n            if (this.options.draggable) {\n                this.makeDraggable();\n            }\n\n            this.$rateLine = this.createRateLine();\n\n            if (this.options.showRateLabel) {\n                this.$rateLabel = this.createLabel(null, _.extend({}, _PRESETS.RATE_LABEL.attr, {\n                    fill: this.options.color\n                }), _PRESETS.RATE_LABEL.css);\n            }\n\n            this.elementsRow = [];\n\n            if (this.options.showInfoLabel && (this.options.infoLabelValue || this.options.infoLabelKey || this.options.infoLabelShowRate)) {\n                this.$infoLabel = this.createLabel(this.formatInfo(), _.extend({}, _PRESETS.INFO_LABEL.attr, {\n                    fill: this.chart.options.chart.backgroundColor,\n                    stroke: this.options.color\n                }), _.extend({}, _PRESETS.INFO_LABEL.css, {\n                    color: this.options.color\n                }));\n\n                if (this.options.infoLabelAlign === 'right') {\n                    this.$infoLabel.attr({ align: this.options.infoLabelAlign });\n                } else {\n                    this.elementsRow.push({\n                        offsetX: 14,\n                        element: this.$infoLabel\n                    });\n                }\n            }\n\n            if (this.options.showProfitLossLabel) {\n                this.$plLabel = this.createLabel(null, _.extend({}, _PRESETS.PL_LABEL.attr, {\n                    stroke: this.options.color,\n                    fill: this.options.color\n                }), _.extend({}, _PRESETS.PL_LABEL.css));\n\n                this.elementsRow.push({\n                    offsetX: this.options.infoLabelAlign === 'right' ? 14 : -2,\n                    element: this.$plLabel\n                });\n\n                this.$plLabel.hide();\n            }\n\n            if (this.options.showEditButton && this.onEditButtonCLick) {\n                this.$editButton = this.createButton(editButtonIcon, this.onEditButtonCLick.bind(this), _.extend({}, _PRESETS.BUTTON.NORMAL_STATE, {\n                    title: __('actions.edit'),\n                    fill: this.chart.options.chart.backgroundColor\n                }), _PRESETS.BUTTON.HOVER_STATE, {\n                    fill: this.options.color\n                });\n\n                this.elementsRow.push({\n                    offsetX: 10,\n                    element: this.$editButton\n                });\n            }\n\n            if (this.options.showCloseButton && this.onCloseButtonClick) {\n                this.$closeButton = this.createButton(closeButtonIcon, this.onCloseButtonClick.bind(this), _.extend({}, _PRESETS.BUTTON.NORMAL_STATE, {\n                    title: __('actions.cancel'),\n                    fill: this.chart.options.chart.backgroundColor\n                }), _PRESETS.BUTTON.HOVER_STATE, {\n                    fill: this.options.color\n                });\n\n                this.elementsRow.push({\n                    offsetX: 4,\n                    element: this.$closeButton\n                });\n            }\n\n            if (this.options.showTpslButton && this.onTpslButtonClick) {\n                this.$tpslButton = this.createButton(tpslButtonIcon, this.onTpslButtonClick.bind(this), _.extend({}, _PRESETS.BUTTON.NORMAL_STATE, {\n                    fill: this.chart.options.chart.backgroundColor\n                }), _PRESETS.BUTTON.HOVER_STATE, {\n                    fill: this.options.color,\n                    icon: tpslSelectedButtonIcon\n                });\n\n                this.elementsRow.push({\n                    offsetX: 4,\n                    element: this.$tpslButton\n                });\n            }\n\n            this.chartRedrawEventHandler = H.addEvent(chart, 'redraw', this.onChartRedraw.bind(this));\n            this.chartDestroyEventHandler = H.addEvent(chart, 'destroy', this.onChartDestroy.bind(this));\n        }\n\n        _createClass(BaseRateLine, [{\n            key: 'formatInfo',\n            value: function formatInfo() {\n                var text = '';\n\n                if (this.options.infoLabelValue) {\n                    text = this.options.infoLabelValue;\n                } else if (this.options.infoLabelKey) {\n                    text = __(this.options.infoLabelKey);\n                }\n\n                if (this.options.infoLabelShowRate && this.rate) {\n                    if (text.length > 0) {\n                        text += ' : ';\n                    }\n\n                    text += this.formatRate();\n                }\n\n                return text;\n            }\n        }, {\n            key: 'formatRate',\n            value: function formatRate() {\n                return this.rate.toFixed(this.options.precision || this.options.instrument && this.options.instrument.getPrecision() || 5);\n            }\n        }, {\n            key: 'formatPL',\n            value: function formatPL(value) {\n                return numbro(value).formatForeignCurrency(user.getUserCurrencySymbol(), '$0.00');\n            }\n        }, {\n            key: 'updateRate',\n            value: function updateRate(rate) {\n                if (rate === this.rate) {\n                    return;\n                }\n\n                var diff = rate - this.rate;\n\n                this.rate = rate;\n\n                this.onRateUpdated(diff);\n            }\n        }, {\n            key: 'onRateUpdated',\n            value: function onRateUpdated(diff) {\n                var chart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.chart;\n\n                this.onChartRedraw(chart);\n\n                return diff;\n            }\n        }, {\n            key: 'onChartRedraw',\n            value: function onChartRedraw() {\n                var chart = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.chart;\n\n                var extremes = this.chart.get(ChartsConfigurator.options.names.axis.mainY).getExtremes();\n\n                if (this.rate <= extremes.max && this.rate >= extremes.min) {\n                    this.$container.show();\n\n                    var box = this.$rateLine.updateValue(this.rate);\n\n                    if (this.$hoverElement) {\n                        this.$hoverElement.update(this.$rateLine.d);\n                    }\n\n                    if (this.$rateLabel) {\n                        this.$rateLabel.attr({\n                            text: this.formatRate()\n                        });\n                        this.$rateLabel.attr({\n                            y: box.y - this.$rateLabel.height / 2,\n                            x: box.x + box.width\n                        });\n                    }\n\n                    if (this.$infoLabel) {\n                        this.$infoLabel.attr({\n                            text: this.formatInfo()\n                        });\n\n                        if (this.options.infoLabelAlign === 'right') {\n                            this.$infoLabel.attr({\n                                x: box.width - (10 + ChartsConfigurator.options.chart.label.offsetX),\n                                y: box.y - this.$infoLabel.height / 2\n                            });\n                        }\n                    }\n\n                    var totalOffsetX = 0;\n\n                    _.each(this.elementsRow, function (item) {\n                        item.element.attr({\n                            x: totalOffsetX + item.offsetX,\n                            y: box.y - item.element.height / 2\n                        });\n                        totalOffsetX += item.element.width + item.offsetX;\n                    });\n\n                    this.updateDragAndDropRange();\n                } else {\n                    this.$container.hide();\n                }\n            }\n        }, {\n            key: 'toPixels',\n            value: function toPixels(rate) {\n                var chart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.chart;\n\n                return chart.get(ChartsConfigurator.options.names.axis.mainY).toPixels(parseFloat(rate));\n            }\n        }, {\n            key: 'toValue',\n            value: function toValue(pixels) {\n                var chart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.chart;\n\n                return chart.get(ChartsConfigurator.options.names.axis.mainY).toValue(pixels);\n            }\n        }, {\n            key: 'getPlotLinePath',\n            value: function getPlotLinePath(value) {\n                var chart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.chart;\n\n                return chart.get(ChartsConfigurator.options.names.axis.mainY).getPlotLinePath(value, 1);\n            }\n        }, {\n            key: 'updatePl',\n            value: function updatePl(value) {\n                if (!this.$plLabel) {\n                    return;\n                }\n\n                if (!value) {\n                    value = 0;\n                }\n\n                var pl = this.formatPL(value);\n\n                if (this.pl === pl) {\n                    return;\n                }\n\n                this.$plLabel.attr({ text: pl });\n\n                if (!this.pl) {\n                    this.$plLabel.attr({ visibility: 'inherit' });\n                }\n\n                this.pl = pl;\n                this.onChartRedraw();\n            }\n        }, {\n            key: 'applySettings',\n            value: function applySettings(settings) {\n                if (this.$infoLabel) {\n                    this.$infoLabel.attr({\n                        fill: settings.colors.common.background\n                    });\n                }\n\n                if (this.$editButton) {\n                    this.$editButton.updateNormalState({\n                        fill: settings.colors.common.background\n                    });\n                }\n\n                if (this.$closeButton) {\n                    this.$closeButton.updateNormalState({\n                        fill: settings.colors.common.background\n                    });\n                }\n\n                if (this.$tpslButton) {\n                    this.$tpslButton.updateNormalState({\n                        fill: settings.colors.common.background\n                    });\n                }\n            }\n        }, {\n            key: 'createContainer',\n            value: function createContainer() {\n                var renderer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.chart.renderer;\n\n                return renderer.g('rate-line ' + (this.options.className || '')).attr({\n                    zIndex: 7\n                    // }).add(this.parent); TODO: pearent?\n                }).add();\n            }\n        }, {\n            key: 'createRateLine',\n            value: function createRateLine() {\n                var _this = this;\n\n                var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.$container;\n                var chart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.chart;\n\n                var line = container.renderer.path(EMPTY_PATH).attr({\n                    'stroke-width': 1,\n                    'stroke': this.options.color,\n                    'dashstyle': this.options.dashstyle,\n                    'pointer-events': 'none'\n                }).add(container);\n\n                line.updateY = function (y) {\n                    return line.attr({\n                        d: ['M', 0, y, 'L', chart.plotLeft + chart.plotWidth + (_this.options.showRateLabel ? ChartsConfigurator.options.chart.label.offsetX : 0), y]\n                    });\n                };\n\n                line.updateValue = function (value) {\n                    var d = _this.getPlotLinePath(value, chart);\n\n                    if (!d) {\n                        return null;\n                    }\n\n                    if (_this.options.showRateLabel) {\n                        d[4] += ChartsConfigurator.options.chart.label.offsetX;\n                    }\n\n                    line.attr({ d: d });\n\n                    // let box = {\n                    //     x: Math.min(d[1], d[4]),\n                    //     y: Math.min(d[2], d[5])\n                    // };\n                    // box.width = Math.max(d[1], d[4]) - box.x;\n                    // box.height = Math.max(d[2], d[5]) - box.y;\n                    return {\n                        x: d[1],\n                        y: d[2],\n                        width: d[4] - d[1],\n                        height: d[5] - d[2]\n                    };\n                };\n\n                return line;\n            }\n        }, {\n            key: 'createLabel',\n            value: function createLabel(value, attr, css) {\n                var container = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.$container;\n\n                return container.renderer.label(value, -1000, -1000, null, null, null, false, false).attr(attr).css(css).add(container);\n            }\n        }, {\n            key: 'createButton',\n            value: function createButton(icon, callback, normalState, hoverState, preseedState, disabledState) {\n                var container = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : this.$container;\n\n                return container.renderer.buttonIcon(null, -1000, -1000, icon, 15, 15, callback, normalState, hoverState, preseedState, disabledState).add(container);\n            }\n        }, {\n            key: 'destroy',\n            value: function destroy(onChartDestroy) {\n                var _this2 = this;\n\n                if (this.destroyed) {\n                    return;\n                }\n\n                _.each(ELEMENTS_KEYS, function (key) {\n                    if (_this2[key]) {\n                        _this2[key].destroy();\n                        _this2[key] = null;\n                    }\n                });\n\n                this.elementsRow = null;\n\n                this.chartRedrawEventHandler();\n\n                if (!onChartDestroy) {\n                    this.chartDestroyEventHandler();\n                }\n\n                this.chartRedrawEventHandler = this.chartDestroyEventHandler = null;\n\n                this.stopListening && this.stopListening();\n\n                this.destroyed = true;\n            }\n        }, {\n            key: 'makeDraggable',\n            value: function makeDraggable() {\n                var _this3 = this;\n\n                this.$hoverElement = this.createLineHover();\n\n                this.mouseHandlers = {};\n                this.mouseHandlers.mousedown = H.addEvent(this.$hoverElement.element, 'mousedown', function (mouseDownEvent) {\n\n                    _this3._beforeDragRate = _this3.rate;\n\n                    mouseDownEvent = _this3.normalize(mouseDownEvent);\n                    _this3.yAxis = _this3.chart.get(ChartsConfigurator.options.names.axis.mainY);\n\n                    if (!_this3.isInsideAxis(mouseDownEvent)) {\n                        return;\n                    }\n\n                    mouseDownEvent.stopImmediatePropagation();\n\n                    _this3.startEditing();\n\n                    var moved = false;\n                    var prevEvent = _this3.normalize(mouseDownEvent);\n\n                    _this3.mouseHandlers.mousemove = H.addEvent(_this3.$container.element.ownerSVGElement, 'mousemove', function (mouseMoveEvent) {\n                        mouseMoveEvent = _this3.normalize(mouseMoveEvent);\n\n                        if (!_this3.isInsideAxis(mouseMoveEvent)) {\n                            return;\n                        }\n\n                        moved = true;\n                        prevEvent = _this3.onMove(false, mouseMoveEvent, prevEvent);\n                    });\n\n                    _this3.mouseHandlers.mouseup = H.addEvent(_this3.$container.element.ownerSVGElement, 'mouseup', function (mouseUpEvent) {\n                        mouseUpEvent = _this3.normalize(mouseUpEvent);\n\n                        if (!_this3.isInsideAxis(mouseUpEvent)) {\n                            return;\n                        }\n\n                        if (moved) {\n                            prevEvent = _this3.onMove(true, mouseUpEvent, prevEvent);\n                        }\n\n                        _this3.mouseHandlers.mousemove();\n                        _this3.mouseHandlers.mouseup();\n                        _this3.stopEditing(moved);\n                        _this3.yAxis = null;\n                    });\n                });\n            }\n        }, {\n            key: 'normalize',\n            value: function normalize() {\n                var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.event;\n\n                return e.chartX && e.chartY ? e : this.chart.pointer.normalize(e);\n            }\n        }, {\n            key: 'createLineHover',\n            value: function createLineHover() {\n                var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : EMPTY_PATH;\n                var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.$container;\n\n                var line = container.renderer.path(path).attr({\n                    'class': 'hover',\n                    'stroke-width': 1,\n                    'stroke': 'transparent',\n                    'stroke-linecap': 'butt'\n                }).add(container);\n\n                line.update = function (d) {\n                    return line.attr({ d: d });\n                };\n\n                return line;\n            }\n        }, {\n            key: 'isInsideAxis',\n            value: function isInsideAxis(e) {\n                return e.chartX >= this.yAxis.left && e.chartY >= this.yAxis.top && e.chartX <= this.yAxis.left + this.yAxis.width && e.chartY <= this.yAxis.top + this.yAxis.height;\n            }\n        }, {\n            key: 'startEditing',\n            value: function startEditing() {\n                var editable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this;\n\n                editable.editing = true;\n                this.initDragAndDropRange();\n                // this.chartDrawing.enableEditing();\n                // Drawing.addSVGClass(this.$container, 'in-moving');\n                // this.activate();\n            }\n        }, {\n            key: 'stopEditing',\n            value: function stopEditing(moved) {\n                var editable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;\n\n                editable.editing = false;\n                this.removeDragAndDropRange();\n                // if (!(editable === this ? editable.notSaved : editable.drawing.notSaved))\n                //     this.chartDrawing.disableEditing();\n\n                // Drawing.removeSVGClass(this.$container, 'in-moving');\n\n                // if (moved) this.chartDrawing.saveDrawing(true);\n            }\n        }, {\n            key: 'enableDragging',\n            value: function enableDragging() {\n                this.$hoverElement && this.$hoverElement.show();\n            }\n        }, {\n            key: 'disableDragging',\n            value: function disableDragging() {\n                this.$hoverElement && this.$hoverElement.hide();\n            }\n        }, {\n            key: 'initDragAndDropRange',\n            value: function initDragAndDropRange() {\n                this.dragAndDropRange = BaseRateLine.calcDragAndDropRangeCoords(this.getDragAndDropRange(), this.yAxis);\n\n                this.$dragAndDropRangeRect = this.chart.renderer.rect(this.dragAndDropRange.x, this.dragAndDropRange.y, this.dragAndDropRange.width, this.dragAndDropRange.height).attr({\n                    fill: this.options.color,\n                    'fill-opacity': .1\n                }).add();\n            }\n        }, {\n            key: 'updateDragAndDropRange',\n            value: function updateDragAndDropRange() {\n                if (!this.$dragAndDropRangeRect) {\n                    return;\n                }\n\n                this.dragAndDropRange = BaseRateLine.calcDragAndDropRangeCoords(this.getDragAndDropRange(), this.yAxis);\n\n                this.$dragAndDropRangeRect.attr({\n                    x: this.dragAndDropRange.x,\n                    y: this.dragAndDropRange.y,\n                    width: this.dragAndDropRange.width,\n                    height: this.dragAndDropRange.height\n                });\n            }\n        }, {\n            key: 'removeDragAndDropRange',\n            value: function removeDragAndDropRange() {\n                this.dragAndDropRange = null;\n\n                if (this.$dragAndDropRangeRect) {\n                    this.$dragAndDropRangeRect.destroy();\n                    this.$dragAndDropRangeRect = null;\n                }\n            }\n        }, {\n            key: 'onMove',\n            value: function onMove(finished, currentEvent, previousEvent) {\n                currentEvent = this.normalize(currentEvent);\n\n                return this.move(finished, currentEvent.chartX - previousEvent.chartX, currentEvent.chartY - previousEvent.chartY) ? currentEvent : previousEvent;\n            }\n        }, {\n            key: 'move',\n            value: function move(finished, dx, dy) {\n                var _this4 = this;\n\n                if (finished) {\n                    this.onDrop(this.rate - this._beforeDragRate).catch(function () {\n                        _this4.updateRate(_this4._beforeDragRate);\n                    });\n\n                    return true;\n                } else {\n                    var result = true;\n                    var newRate = this.toValue(this.toPixels(this.rate) + dy);\n\n                    if (this.dragAndDropRange.min && newRate < this.dragAndDropRange.min) {\n                        newRate = this.dragAndDropRange.min;\n                        result = false;\n                    } else if (this.dragAndDropRange.max && newRate > this.dragAndDropRange.max) {\n                        newRate = this.dragAndDropRange.max;\n                        result = false;\n                    }\n\n                    this.updateRate(newRate);\n\n                    return result;\n                }\n            }\n        }, {\n            key: 'exportTo',\n            value: function exportTo(chart) {\n                var _this5 = this;\n\n                var tmpExport = {};\n\n                tmpExport.$container = this.createContainer(chart.renderer);\n                tmpExport.$rateLine = this.createRateLine(tmpExport.$container, chart);\n\n                var tmpElementsRow = [];\n\n                if (this.$rateLabel) {\n                    tmpExport.$rateLabel = this.createLabel(this.$rateLabel.text.textStr, _.extend({}, _PRESETS.RATE_LABEL.attr, {\n                        fill: this.options.color\n                    }), _PRESETS.RATE_LABEL.css, tmpExport.$container);\n                }\n\n                if (this.$infoLabel) {\n                    tmpExport.$infoLabel = this.createLabel(this.$infoLabel.text.textStr, _.extend({}, _PRESETS.INFO_LABEL.attr, {\n                        fill: this.chart.options.chart.backgroundColor,\n                        stroke: this.options.color\n                    }), _.extend({}, _PRESETS.INFO_LABEL.css, {\n                        color: this.options.color\n                    }), tmpExport.$container);\n\n                    if (this.options.infoLabelAlign === 'right') {\n                        tmpExport.$infoLabel.attr({ align: this.options.infoLabelAlign });\n                    } else {\n                        tmpElementsRow.push({\n                            offsetX: 14,\n                            element: tmpExport.$infoLabel\n                        });\n                    }\n                }\n\n                if (this.$plLabel) {\n                    tmpExport.$plLabel = this.createLabel(this.$plLabel.text.textStr, _.extend({}, _PRESETS.PL_LABEL.attr, {\n                        stroke: this.options.color,\n                        fill: this.options.color\n                    }), _.extend({}, _PRESETS.PL_LABEL.css), tmpExport.$container);\n\n                    tmpElementsRow.push({\n                        offsetX: -2,\n                        element: tmpExport.$plLabel\n                    });\n                }\n\n                if (this.$tpslButton && this.$tpslButton.state === 2) {\n                    tmpExport.$tpslButton = this.createButton(tpslButtonIcon, null, _.extend({}, _PRESETS.BUTTON.NORMAL_STATE), _PRESETS.BUTTON.HOVER_STATE, {\n                        fill: this.options.color,\n                        icon: tpslSelectedButtonIcon\n                    }, null, tmpExport.$container);\n                    tmpExport.$tpslButton.press();\n\n                    tmpElementsRow.push({\n                        offsetX: 10,\n                        element: tmpExport.$tpslButton\n                    });\n                }\n\n                var onTmpChartRedraw = H.addEvent(chart, 'redraw', function () {\n                    // if (!this.getPlotLinePath(this.rate, chart)) return;\n\n                    var box = tmpExport.$rateLine.updateValue(_this5.rate);\n\n                    if (!box) {\n                        tmpExport.$container.hide();\n\n                        return;\n                    } else {\n                        tmpExport.$container.show();\n                    }\n\n                    if (tmpExport.$rateLabel) {\n                        tmpExport.$rateLabel.attr({\n                            y: box.y - tmpExport.$rateLabel.height / 2,\n                            x: box.x + box.width\n                        });\n                    }\n\n                    if (tmpExport.$infoLabel) {\n                        if (_this5.options.infoLabelAlign === 'right') {\n                            tmpExport.$infoLabel.attr({\n                                x: box.width - (10 + ChartsConfigurator.options.chart.label.offsetX),\n                                y: box.y - tmpExport.$infoLabel.height / 2\n                            });\n                        }\n                    }\n\n                    var totalOffsetX = 0;\n\n                    _.each(tmpElementsRow, function (item) {\n                        item.element.attr({\n                            x: totalOffsetX + item.offsetX,\n                            y: box.y - item.element.height / 2\n                        });\n                        totalOffsetX += item.element.width + item.offsetX;\n                    });\n                });\n\n                var onTmpChartDestroy = H.addEvent(chart, 'destroy', function () {\n                    _.each(ELEMENTS_KEYS, function (key) {\n                        if (tmpExport[key]) {\n                            tmpExport[key].destroy();\n                            tmpExport[key] = null;\n                        }\n                    });\n                    onTmpChartRedraw();\n                    // onTmpChartDestroy();\n                });\n            }\n        }, {\n            key: 'onChartDestroy',\n            value: function onChartDestroy() {\n                this.destroy(true);\n            }\n        }], [{\n            key: 'calcDragAndDropRangeCoords',\n            value: function calcDragAndDropRangeCoords(range, yAxis) {\n                range.x = yAxis.left;\n                range.width = yAxis.width;\n\n                range.y = yAxis.top + (range.max ? Math.max(yAxis.toPixels(range.max, true), 0) : 0);\n                range.height = yAxis.top - range.y + (range.min ? Math.min(yAxis.toPixels(range.min, true), yAxis.height) : yAxis.height);\n\n                return range;\n            }\n        }]);\n\n        return BaseRateLine;\n    }();\n\n    module.exports = BaseRateLine;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/rate-lines/base.rate.line.js\n// module id = 2131\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/rate-lines/base.rate.line.js?");

/***/ }),

/***/ 2141:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function($) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var View = __webpack_require__(15);\n    var _ = __webpack_require__(0);\n    var $ = __webpack_require__(7);\n    var core = __webpack_require__(5);\n\n    function _on(el, event, fn) {\n        el.addEventListener(event, fn, !0);\n    }\n\n    function _off(el, event, fn) {\n        el.removeEventListener(event, fn, !0);\n    }\n    var isRtl = $('html').attr('dir') === 'rtl';\n\n    module.exports = View.extend({\n        isHidden: true,\n        initialize: function initialize(options) {\n            View.prototype.initialize.apply(this, arguments);\n            this.options = options;\n            this.render();\n            this.addDragEvents();\n        },\n\n        render: function render() {\n            this.$el.html(this.template(this.options));\n        },\n\n        toggle: function toggle(isVisible) {\n            if (this.isHidden === isVisible) {\n                return;\n            }\n\n            this.isHidden = isVisible;\n            this.$el.css('display', !isVisible ? 'block' : 'none');\n            this.resetPosition();\n        },\n\n        resetPosition: function resetPosition() {\n            this.$el.css({ \"top\": \"\", \"bottom\": \"\", \"left\": \"\", \"right\": \"\" });\n        },\n\n        closePopup: function closePopup() {\n            this.toggle(true);\n        },\n\n        isDragReady: false,\n        dragoffset: {\n            x: 0,\n            y: 0\n        },\n        onMouseDown: function onMouseDown(e) {\n            this.isDragReady = true;\n\n            this.dragoffset.x = e.pageX - this.el.offsetLeft;\n            this.dragoffset.y = e.pageY - this.el.offsetTop;\n        },\n        onMouseUp: function onMouseUp(e) {\n            this.isDragReady = false;\n        },\n\n        onMouseMove: function onMouseMove(e) {\n            if (!this.isDragReady) {\n                return;\n            }\n            if (this.el.offsetHeight + Math.abs(e.pageY - this.dragoffset.y) < screen.height) {\n                this.el.style.top = e.pageY - this.dragoffset.y + \"px\";\n            }\n\n            if (isRtl) {\n                var right = screen.width - e.pageX - this.dragoffset.x;\n\n                if (right + this.el.offsetWidth > screen.width) {\n                    return;\n                }\n                this.el.style.right = right + \"px\";\n            } else {\n                var left = e.pageX - this.dragoffset.x;\n                if (left + this.el.offsetWidth > screen.width) {\n                    return;\n                }\n                this.el.style.left = left + \"px\";\n            }\n        },\n\n        addDragEvents: function addDragEvents() {\n            _on(this.el, 'mousedown', this.onMouseDown.bind(this));\n            _on(document, 'mouseup', this.onMouseUp.bind(this));\n            _on(document, 'mousemove', this.onMouseMove.bind(this));\n        },\n        removeDragEvents: function removeDragEvents() {\n            _off(this.el, 'mousedown', this.onMouseDown.bind(this));\n            _off(document, 'mouseup', this.onMouseUp.bind(this));\n            _off(document, 'mousemove', this.onMouseMove.bind(this));\n        },\n\n        destroy: function destroy() {\n            this.removeDragEvents();\n            View.prototype.destroy.call(this);\n        }\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/draggable/draggable.view.js\n// module id = 2141\n// module chunks = 2 3 4 6 34 47 68 70\n\n//# sourceURL=webpack:///./src/js/modules/draggable/draggable.view.js?");

/***/ }),

/***/ 2148:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_core__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_core__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react_classset__ = __webpack_require__(14);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react_classset___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_react_classset__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_utils_string__ = __webpack_require__(57);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_utils_string___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_utils_string__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_common_types__ = __webpack_require__(13);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_underscore__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_underscore__);\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\nvar buy = function buy(symbol) {\n    return __WEBPACK_IMPORTED_MODULE_1_core___default.a.trigger('ui:new-position', { direction: __WEBPACK_IMPORTED_MODULE_4_common_types__[\"BUY\"], symbolOrId: symbol });\n};\n\nvar PureButtonBuyLabel = function PureButtonBuyLabel(data) {\n    var hasValue = !__WEBPACK_IMPORTED_MODULE_5_underscore___default.a.isNaN(parseInt(data.ask));\n    var mainClass = __WEBPACK_IMPORTED_MODULE_2_react_classset___default()(_defineProperty({\n        'price-button': true,\n        'price-button_labeled': true,\n        'price-button_ani': true\n    }, data.className, true));\n    var buttonClasses = __WEBPACK_IMPORTED_MODULE_2_react_classset___default()({\n        'price-button__wrapper': true,\n        btn: true,\n        disabled: !data.buyTradable,\n        bar_loading: !hasValue\n    });\n\n    if (hasValue) {\n        data.ask = __WEBPACK_IMPORTED_MODULE_3_utils_string___default.a.divideValueByPipSize(data.ask, data.pipsPrecision);\n    }\n\n    return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'div',\n        { className: mainClass },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'buttton',\n            {\n                disabled: !data.buyTradable,\n                className: buttonClasses,\n                onClick: function onClick() {\n                    return data.buyTradable && buy(data.symbol);\n                },\n                'aria-label': data.notTradableMessage\n            },\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n                'div',\n                { className: 'price-button__subtitle' },\n                __('actions.buy')\n            ),\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n                'div',\n                { className: 'price-button__title' },\n                data.ask === true ? data.ask : __WEBPACK_IMPORTED_MODULE_3_utils_string___default.a.formatValueToStringOrComponent(data.ask, false)\n            )\n        )\n    );\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (PureButtonBuyLabel);\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/instruments/components/PureButtonBuyLabel.jsx\n// module id = 2148\n// module chunks = 2 4 5 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/instruments/components/PureButtonBuyLabel.jsx?");

/***/ }),

/***/ 2149:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react_classset__ = __webpack_require__(14);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react_classset___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react_classset__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_core__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_core__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_utils_string__ = __webpack_require__(57);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_utils_string___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_utils_string__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_common_types__ = __webpack_require__(13);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_underscore__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_underscore__);\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\nvar sell = function sell(symbol) {\n    return __WEBPACK_IMPORTED_MODULE_2_core___default.a.trigger('ui:new-position', { direction: __WEBPACK_IMPORTED_MODULE_4_common_types__[\"SELL\"], symbolOrId: symbol });\n};\n\nvar PureButtonSellLabel = function PureButtonSellLabel(data) {\n    var hasValue = !__WEBPACK_IMPORTED_MODULE_5_underscore___default.a.isNaN(parseInt(data.bid));\n    var mainClass = __WEBPACK_IMPORTED_MODULE_1_react_classset___default()(_defineProperty({\n        'price-button': true,\n        'price-button_labeled': true,\n        'price-button_ani': true\n    }, data.className, true));\n    var buttonClasses = __WEBPACK_IMPORTED_MODULE_1_react_classset___default()({\n        'price-button__wrapper': true,\n        btn: true,\n        disabled: !data.sellTradable,\n        bar_loading: !hasValue\n    });\n\n    if (hasValue) {\n        data.bid = __WEBPACK_IMPORTED_MODULE_3_utils_string___default.a.divideValueByPipSize(data.bid, data.pipsPrecision);\n    }\n\n    return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'div',\n        { className: mainClass },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'buttton',\n            {\n                disabled: !data.sellTradable,\n                className: buttonClasses,\n                onClick: function onClick() {\n                    return data.sellTradable && sell(data.symbol);\n                },\n                'aria-label': data.notTradableMessage\n            },\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n                'div',\n                { className: 'price-button__subtitle' },\n                __('actions.sell')\n            ),\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n                'div',\n                { className: 'price-button__title' },\n                data.bid === true ? data.bid : __WEBPACK_IMPORTED_MODULE_3_utils_string___default.a.formatValueToStringOrComponent(data.bid, false)\n            )\n        )\n    );\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (PureButtonSellLabel);\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/instruments/components/PureButtonSellLabel.jsx\n// module id = 2149\n// module chunks = 2 4 5 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/instruments/components/PureButtonSellLabel.jsx?");

/***/ }),

/***/ 2232:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react_classset__ = __webpack_require__(14);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react_classset___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react_classset__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_modules_chart_highcharts_chart_panel_chart_panel_main_view__ = __webpack_require__(2896);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_modules_chart_highcharts_chart_panel_chart_panel_main_view___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_modules_chart_highcharts_chart_panel_chart_panel_main_view__);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n\nvar ChartHighcharts = function (_React$Component) {\n    _inherits(ChartHighcharts, _React$Component);\n\n    function ChartHighcharts() {\n        _classCallCheck(this, ChartHighcharts);\n\n        return _possibleConstructorReturn(this, (ChartHighcharts.__proto__ || Object.getPrototypeOf(ChartHighcharts)).apply(this, arguments));\n    }\n\n    _createClass(ChartHighcharts, [{\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n            this.$chart = new __WEBPACK_IMPORTED_MODULE_2_modules_chart_highcharts_chart_panel_chart_panel_main_view___default.a({ parent: this.refs.component });\n        }\n    }, {\n        key: 'componentWillUnmount',\n        value: function componentWillUnmount() {\n            if (this.$chart) {\n                this.$chart.destroy();\n            }\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var _props = this.props,\n                height = _props.height,\n                className = _props.className;\n\n            var classes = __WEBPACK_IMPORTED_MODULE_1_react_classset___default()(_defineProperty({\n                'chart-box': true\n            }, className, !!className));\n            var styles = {};\n\n            if (height) {\n                styles = {\n                    height: height + 'px',\n                    minHeight: height + 'px',\n                    maxHeight: height + 'px'\n                };\n            }\n\n            return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div', { className: classes, style: styles, ref: 'component' });\n        }\n    }]);\n\n    return ChartHighcharts;\n}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ChartHighcharts);\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/components/ChartHighcharts.js\n// module id = 2232\n// module chunks = 68\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/components/ChartHighcharts.js?");

/***/ }),

/***/ 2233:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var H = __webpack_require__(452);\n\n    var POINT_TYPE_CIRCLE = 'circle';\n    var POINT_TYPE_RECT = 'rect';\n\n    var Point = function () {\n        _createClass(Point, null, [{\n            key: 'defaults',\n            get: function get() {\n                return {\n                    pointSize: 8,\n                    pointType: POINT_TYPE_RECT,\n                    draggable: true\n                };\n            }\n        }]);\n\n        function Point() {\n            _classCallCheck(this, Point);\n\n            switch (arguments.length) {\n                case 1:\n                    this.fromKeyPoint(arguments[0]);\n                    break;\n                case 2:\n                    this.setPixels(arguments[0], arguments[1]);\n                    break;\n                default:\n                    console.error('Wrong number of parameters');\n            }\n        }\n\n        _createClass(Point, [{\n            key: 'fromKeyPoint',\n            value: function fromKeyPoint(keyPoint) {\n                this.setValues(keyPoint.timestamp, keyPoint.value);\n            }\n        }, {\n            key: 'fromPoint',\n            value: function fromPoint(point) {\n                this.setPixels(point.x, point.y);\n            }\n        }, {\n            key: 'setValues',\n            value: function setValues(timestamp, value) {\n                this.timestamp = timestamp;\n                this.value = value;\n            }\n        }, {\n            key: 'setPixels',\n            value: function setPixels(x, y) {\n                this.x = x;\n                this.y = y;\n            }\n        }, {\n            key: 'getValues',\n            value: function getValues() {\n                return {\n                    timestamp: this._timestamp,\n                    value: this._value\n                };\n            }\n        }, {\n            key: 'getPixels',\n            value: function getPixels() {\n                return {\n                    x: this.x,\n                    y: this.y\n                };\n            }\n        }, {\n            key: 'convert',\n            value: function convert(backwards) {\n                if (backwards) {\n                    this.timestamp = this.drawing.xAxis.toValue(this.x);\n                    this.value = this.drawing.yAxis.toValue(this.y);\n                } else {\n                    this.x = this.drawing.xAxis.toPixels(this.timestamp);\n                    this.y = this.drawing.yAxis.toPixels(this.value);\n                }\n\n                return this;\n            }\n        }, {\n            key: 'initSVG',\n            value: function initSVG(index, drawing) {\n                var options = _.extend({}, Point.defaults, drawing.options);\n\n                this.index = index;\n\n                this.drawing = drawing;\n                this.type = options.pointType;\n                this.size = options.pointSize;\n                this.draggable = options.draggable;\n\n                if (this.x === undefined || this.y === undefined) {\n                    this.convert();\n                }\n\n                this.$svg = this.pointType === POINT_TYPE_CIRCLE ? Point.createPointCircle(this.x, this.y, drawing.$container, drawing.renderer, options) : Point.createPointRect(this.x, this.y, drawing.$container, drawing.renderer, options);\n\n                return this;\n            }\n        }, {\n            key: 'addEvents',\n            value: function addEvents() {\n                var _this = this;\n\n                var drawing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.drawing;\n\n                if (!this.$svg || !this.draggable) {\n                    return;\n                }\n\n                this.mouseHandlers = {};\n                this.mouseHandlers.mousedown = H.addEvent(this.$svg.element, 'mousedown', function (mouseDownEvent) {\n                    mouseDownEvent = _this.drawing.normalize(mouseDownEvent);\n\n                    if (!_this.drawing.chartDrawing.isInsideAxis(mouseDownEvent)) {\n                        return;\n                    }\n\n                    mouseDownEvent.stopImmediatePropagation();\n\n                    drawing.startEditing(_this);\n\n                    var moved = false;\n                    var prevEvent = drawing.normalize(mouseDownEvent);\n\n                    _this.mouseHandlers.mousemove = H.addEvent(drawing.ownerSVG, 'mousemove', function (mouseMoveEvent) {\n                        mouseMoveEvent = _this.drawing.normalize(mouseMoveEvent);\n\n                        if (!_this.drawing.chartDrawing.isInsideAxis(mouseMoveEvent)) {\n                            return;\n                        }\n\n                        moved = true;\n                        prevEvent = _this.onMove(false, drawing, mouseMoveEvent, prevEvent);\n                    });\n\n                    _this.mouseHandlers.mouseup = H.addEvent(drawing.ownerSVG, 'mouseup', function (mouseUpEvent) {\n                        mouseUpEvent = _this.drawing.normalize(mouseUpEvent);\n\n                        if (!_this.drawing.chartDrawing.isInsideAxis(mouseUpEvent)) {\n                            return;\n                        }\n\n                        _this.onMove(true, drawing, mouseUpEvent, prevEvent);\n                        _this.mouseHandlers.mousemove();\n                        _this.mouseHandlers.mouseup();\n                        drawing.stopEditing(moved, _this);\n                    });\n                });\n            }\n        }, {\n            key: 'updateSVG',\n            value: function updateSVG(convert) {\n                if (convert) {\n                    this.convert();\n                }\n\n                this.$svg.attr(this.type === POINT_TYPE_CIRCLE ? {\n                    cx: this.x,\n                    cy: this.y\n                } : {\n                    x: this.x - this.size / 2,\n                    y: this.y - this.size / 2\n                });\n            }\n        }, {\n            key: 'onMove',\n            value: function onMove(finished, drawing, currentEvent, previousEvent) {\n                currentEvent = drawing.normalize(currentEvent);\n                drawing.move(finished, currentEvent.chartX - previousEvent.chartX, currentEvent.chartY - previousEvent.chartY, this);\n\n                return currentEvent;\n            }\n        }, {\n            key: 'destroy',\n            value: function destroy() {\n                for (var handler in this.mouseHandlers) {\n                    this.mouseHandlers[handler]();\n                }\n            }\n        }, {\n            key: 'setColor',\n            value: function setColor(color) {\n                this.drawing.options.properties.defaultKeyPoint.lineColor = color;\n                this.drawing.options.properties.defaultKeyPoint.fillStyle = color;\n                this.$svg.attr({\n                    'stroke': color,\n                    'fill': color\n                });\n            }\n        }, {\n            key: 'x',\n            get: function get() {\n                return this._x;\n            },\n            set: function set(value) {\n                this._x = value;\n            }\n        }, {\n            key: 'y',\n            get: function get() {\n                return this._y;\n            },\n            set: function set(value) {\n                this._y = value;\n            }\n        }, {\n            key: 'timestamp',\n            get: function get() {\n                return this._timestamp;\n            },\n            set: function set(value) {\n                this._timestamp = value;\n            }\n        }, {\n            key: 'value',\n            get: function get() {\n                return this._value;\n            },\n            set: function set(value) {\n                this._value = value;\n            }\n        }, {\n            key: 'index',\n            get: function get() {\n                return this._index;\n            },\n            set: function set(value) {\n                this._index = value;\n            }\n        }], [{\n            key: 'createPointCircle',\n            value: function createPointCircle(x, y, parent, renderer, options) {\n                return renderer.circle(x, y, options.pointSize / 2).attr({\n                    'class': 'point',\n                    'stroke-width': options.properties.defaultKeyPoint.lineWidth,\n                    'stroke': options.properties.defaultKeyPoint.lineColor,\n                    'fill': options.properties.defaultKeyPoint.fillStyle\n                }).css({\n                    // visibility: \"hidden\"\n                }).add(parent);\n            }\n        }, {\n            key: 'createPointRect',\n            value: function createPointRect(x, y, parent, renderer, options) {\n                return renderer.rect(x - options.pointSize / 2, y - options.pointSize / 2, options.pointSize, options.pointSize).attr({\n                    'class': 'point',\n                    'stroke-width': options.properties.defaultKeyPoint.lineWidth,\n                    'stroke': options.properties.defaultKeyPoint.lineColor,\n                    'fill': options.properties.defaultKeyPoint.fillStyle\n                }).css({\n                    // visibility: \"hidden\"\n                }).add(parent);\n            }\n        }]);\n\n        return Point;\n    }();\n\n    module.exports = Point;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/drawings/models/point.js\n// module id = 2233\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/drawings/models/point.js?");

/***/ }),

/***/ 2234:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_, $) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n\n    var $ = __webpack_require__(7);\n\n    var BaseView = __webpack_require__(30);\n\n    var wizardElementsTemplates = __webpack_require__(86);\n\n    var template = _.template(__webpack_require__(2383));\n    var FormView = __webpack_require__(77);\n\n    module.exports = BaseView.extend({\n\n        initialize: function initialize(drawing) {\n            this.drawing = drawing;\n            BaseView.prototype.initialize.apply(this, arguments);\n            this.render();\n        },\n\n        events: function events() {\n            return _.extend({}, _.result(BaseView.prototype, 'events'), {\n                'click .fn-save': 'onSave',\n                'click .fn-cancel': 'onCancel'\n            });\n        },\n\n        getOptions: function getOptions(options) {\n            return _.extend({}, _.result(BaseView.prototype, 'getOptions'), {\n                parent: document.body,\n                isHeaderShowed: true,\n                caption: __('chart_drawings.settings.popup.header'),\n                headerStyle: 'wizard'\n            }, options);\n        },\n\n        render: function render() {\n            var _this = this;\n\n            BaseView.prototype.render.call(this);\n\n            this.$el.addClass('drawing-settings-popup');\n            this.setContent(template());\n            this.$form = this.$el.find('.drawing-settings-form');\n\n            _.each(this.drawing.configurableOptions, function (options) {\n                var $field = null;\n\n                switch (options.type) {\n                    case 'select':\n                        $field = wizardElementsTemplates.selectBox(_.extend(options, {\n                            translationPrefix: '',\n                            disable: false\n                        }));\n                        break;\n                    case 'textarea':\n                        $field = wizardElementsTemplates.textArea(_.extend(options, {\n                            disable: false,\n                            settings: {\n                                rows: 10,\n                                cols: 20\n                            }\n                        }));\n                        break;\n                    default:\n                    // console.log(options.type)\n                }\n\n                if ($field) {\n                    $($field).addClass('field');\n                    _this.$form.append($field);\n                }\n            });\n\n            this.$settingsFrom = new FormView({ el: this.$form });\n            _.each(this.drawing.configurableOptions, function (options) {\n                _this.$settingsFrom.getField(options.name).value(options.value);\n\n                if (options.type === 'textarea') {\n                    _this.$settingsFrom.getField(options.name).setRules({ max_length: [100, __('chart_drawings.settings.text_note.error', 100)] });\n                }\n            });\n\n            return this;\n        },\n\n        onSave: function onSave() {\n            if (!this.$settingsFrom.validate()) {\n                this.drawing.save(this.$settingsFrom.getData());\n                this.close();\n            }\n        },\n\n        onCancel: function onCancel(e) {\n            this.close();\n        }\n\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(7)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/drawings/settings/drawing.settings.popup.view.js\n// module id = 2234\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/drawings/settings/drawing.settings.popup.view.js?");

/***/ }),

/***/ 2235:
/***/ (function(module, exports) {

eval("module.exports = {\n    DASH: 'Dash',\n    DASH_DOT: 'DashDot',\n    DOT: 'Dot',\n    LONG_DASH: 'LongDash',\n    LONG_DASH_DOT: 'LongDashDot',\n    LONG_DASH_DOT_DOT: 'LongDashDotDot',\n    SHORT_DASH: 'ShortDash',\n    SHORT_DASH_DOT: 'ShortDashDot',\n    SHORT_DASH_DOT_DOT: 'ShortDashDotDot',\n    SHORT_DOT: 'ShortDot',\n    SOLID: 'Solid'\n};\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/drawings/dash.styles.js\n// module id = 2235\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/drawings/dash.styles.js?");

/***/ }),

/***/ 2236:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var BaseRateLine = __webpack_require__(2131);\n\n    var defaults = {\n        color: '#47a546',\n        dashstyle: BaseRateLine.DASH_STYLES.SHORT_DASH,\n        draggable: true,\n        handleEvents: true,\n        infoLabelKey: 'chart.line.profit',\n        infoLabelShowRate: true,\n        showCloseButton: true,\n        showEditButton: true,\n        showInfoLabel: true,\n        showProfitLossLabel: true\n    };\n\n    var TakeProfitRateLine = function (_BaseRateLine) {\n        _inherits(TakeProfitRateLine, _BaseRateLine);\n\n        _createClass(TakeProfitRateLine, [{\n            key: 'defaults',\n            get: function get() {\n                return defaults;\n            }\n        }]);\n\n        function TakeProfitRateLine(chart, options) {\n            _classCallCheck(this, TakeProfitRateLine);\n\n            var _this = _possibleConstructorReturn(this, (TakeProfitRateLine.__proto__ || Object.getPrototypeOf(TakeProfitRateLine)).call(this, chart, options));\n\n            _this.onInstrumentStatusChange();\n            _this.listenTo(_this.options.instrument, 'change:closable change:editable', _this.onInstrumentStatusChange.bind(_this));\n            return _this;\n        }\n\n        _createClass(TakeProfitRateLine, [{\n            key: 'onInstrumentStatusChange',\n            value: function onInstrumentStatusChange() {\n                this.options.instrument.status.isEditable() ? this.enableDragging() : this.disableDragging();\n\n                this.options.instrument.status.isEditable() ? this.$editButton.enable() : this.$editButton.disable();\n                this.options.instrument.status.isEditable() ? this.$closeButton.enable() : this.$closeButton.disable();\n            }\n        }]);\n\n        return TakeProfitRateLine;\n    }(BaseRateLine);\n\n    module.exports = TakeProfitRateLine;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/rate-lines/take.profit.rate.line.js\n// module id = 2236\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/rate-lines/take.profit.rate.line.js?");

/***/ }),

/***/ 2237:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var BaseRateLine = __webpack_require__(2131);\n\n    var defaults = {\n        color: '#ff433d',\n        dashstyle: BaseRateLine.DASH_STYLES.SHORT_DASH,\n        draggable: true,\n        handleEvents: true,\n        infoLabelKey: 'chart.line.loss',\n        infoLabelShowRate: true,\n        showCloseButton: true,\n        showEditButton: true,\n        showInfoLabel: true,\n        showProfitLossLabel: true\n    };\n\n    var StopLossRateLine = function (_BaseRateLine) {\n        _inherits(StopLossRateLine, _BaseRateLine);\n\n        _createClass(StopLossRateLine, [{\n            key: 'defaults',\n            get: function get() {\n                return defaults;\n            }\n        }]);\n\n        function StopLossRateLine(chart, options) {\n            _classCallCheck(this, StopLossRateLine);\n\n            var _this = _possibleConstructorReturn(this, (StopLossRateLine.__proto__ || Object.getPrototypeOf(StopLossRateLine)).call(this, chart, options));\n\n            _this.onInstrumentStatusChange();\n            _this.listenTo(_this.options.instrument, 'change:closable change:editable', _this.onInstrumentStatusChange.bind(_this));\n            return _this;\n        }\n\n        _createClass(StopLossRateLine, [{\n            key: 'onInstrumentStatusChange',\n            value: function onInstrumentStatusChange() {\n                this.options.instrument.status.isEditable() ? this.enableDragging() : this.disableDragging();\n\n                this.options.instrument.status.isEditable() ? this.$editButton.enable() : this.$editButton.disable();\n                this.options.instrument.status.isEditable() ? this.$closeButton.enable() : this.$closeButton.disable();\n            }\n        }]);\n\n        return StopLossRateLine;\n    }(BaseRateLine);\n\n    module.exports = StopLossRateLine;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/rate-lines/stop.loss.rate.line.js\n// module id = 2237\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/rate-lines/stop.loss.rate.line.js?");

/***/ }),

/***/ 2286:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var Line = __webpack_require__(2377);\n\n    var HorizontalLine = __webpack_require__(2378);\n\n    var VerticalLine = __webpack_require__(2379);\n\n    var TrendChannel = __webpack_require__(2380);\n\n    var FibonacciRetracement = __webpack_require__(2381);\n\n    var TextNote = __webpack_require__(2382);\n\n    var Measurer = __webpack_require__(2384);\n\n    var DEFAULT_TYPE = 'line';\n    var DRAWING_TYPES = {\n        // \"long_line\": {\n        //     class: LongLine,\n        //     label: 'Long line'\n        // },\n        'vertical_line': {\n            class: VerticalLine,\n            label: 'chart_drawings.vertical'\n        },\n        'horizontal_line': {\n            class: HorizontalLine,\n            label: 'chart_drawings.horizontal'\n        },\n        'line': {\n            class: Line,\n            label: 'chart_drawings.trending'\n        },\n        'trend_channel': {\n            class: TrendChannel,\n            label: 'chart_drawings.channel'\n        },\n        'fibonacci_retracements': {\n            class: FibonacciRetracement,\n            label: 'chart_drawings.fibonacci_retracement'\n        },\n        'text': {\n            class: TextNote,\n            label: 'chart_drawings.text'\n        },\n        'measurer': {\n            class: Measurer,\n            label: 'chart_drawings.measurer'\n        }\n    };\n\n    var DrawingFactory = function () {\n        function DrawingFactory(chart, parent) {\n            _classCallCheck(this, DrawingFactory);\n\n            this._parent = parent;\n            this._chart = chart;\n        }\n\n        _createClass(DrawingFactory, [{\n            key: 'createDrawing',\n            value: function createDrawing(options) {\n                var _drawing = DrawingFactory.types[options.type];\n\n                if (_drawing) {\n                    return new _drawing.class(this.chart, this.parent, options);\n                } else {\n                    // console.error(`Unknown type of drawing : ${options.type}`, options);\n                }\n            }\n        }, {\n            key: 'parent',\n            get: function get() {\n                return this._parent;\n            }\n        }, {\n            key: 'chart',\n            get: function get() {\n                return this._chart;\n            }\n        }], [{\n            key: 'types',\n            get: function get() {\n                return DRAWING_TYPES;\n            }\n        }, {\n            key: 'defaultType',\n            get: function get() {\n                return DEFAULT_TYPE;\n            }\n        }]);\n\n        return DrawingFactory;\n    }();\n\n    module.exports = DrawingFactory;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/drawings/drawing.factory.js\n// module id = 2286\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/drawings/drawing.factory.js?");

/***/ }),

/***/ 2374:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_, $) {var __WEBPACK_AMD_DEFINE_RESULT__;var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var View = __webpack_require__(15);\n    var moment = __webpack_require__(6);\n    var $ = __webpack_require__(7);\n    var _ = __webpack_require__(0);\n    var device = __webpack_require__(18);\n    var core = __webpack_require__(5);\n    var user = __webpack_require__(10);\n    var ChartView = __webpack_require__(2375);\n    var LoadingView = __webpack_require__(35);\n    var orders = __webpack_require__(117);\n    var settings = __webpack_require__(12);\n    var instruments = __webpack_require__(17);\n    var ChartsConfigurator = __webpack_require__(848);\n    var ComparisonInstrument = __webpack_require__(2403);\n    var ComparisonInstrumentsCollection = __webpack_require__(2404);\n    var ChartSearchView = __webpack_require__(2405);\n    var Instrument = __webpack_require__(215);\n    var PureButtonBuyLabel = __webpack_require__(2148).default;\n    var PureButtonSellLabel = __webpack_require__(2149).default;\n    var React = __webpack_require__(4);\n    var ReactDOM = __webpack_require__(19);\n    var GridCellRateWithButton = __webpack_require__(128);\n\n    var ChartDispatcher = void 0;\n\n    var BASKET_MIN_FONT_SIZE = 9;\n    var BASKET_MAX_HEIGHT = 40;\n\n    var RATE_LINE_PRICE_MAP = {\n        'buy': 'ask',\n        'middle': null,\n        'sell': 'bid',\n        'none': 'bid'\n    };\n\n    module.exports = View.extend({\n\n        className: 'chart-panel',\n\n        size: {},\n        settings: {},\n        instrument: null,\n        chart: null,\n        parent: null,\n        model: null,\n        period: null,\n        periodRanges: null,\n        enableTrading: !device.mobile(),\n\n        escapeKeyboardListener: null,\n\n        events: function events() {\n            return _.extend({}, _.result(View.prototype, 'events'), {\n                'click .fn-show-search': 'showSearch',\n                'click .fn-hide-search': 'hideSearch',\n                'wheel .chart-container': 'onMouseWheel'\n            });\n        },\n\n        chartNoDataTemplate: _.template(__webpack_require__(2406)),\n\n        initialize: function initialize() {\n            ChartDispatcher = __webpack_require__(456);\n\n            View.prototype.initialize.apply(this, arguments);\n\n            this.type = this.options.type || ChartsConfigurator.defaultType;\n            this.period = this.options.period || ChartsConfigurator.defaultPeriod;\n            this.range = this.options.range || ChartsConfigurator.defaultRange;\n            this.cursor = this.options.cursor || ChartsConfigurator.defaultCursor;\n            this.rateLine = this.options.rateLine || ChartsConfigurator.defaultRateLine;\n\n            if (this.type === ChartsConfigurator.comparisonType) {\n                if (settings.isChartInstrumentsComparisonEnabled()) {\n                    this.comparisonMode = true;\n                } else {\n                    this.type = ChartsConfigurator.defaultType;\n                    this.saveType(this.type);\n                }\n            }\n\n            this.listenTo(core, 'ui:aside-box-opened', this.handleReflow);\n            this.listenTo(core, 'ui:chart:reflow', this.handleReflow);\n            this.listenTo(core, 'ui:chart:resubscribe', this.resubscribeChart);\n            this.listenTo(core, 'ui:chart:drawing-stop', this.stopDrawing);\n            this.listenTo(core, 'ui:change-theme', this.changeTheme);\n        },\n\n        changeTheme: function changeTheme(name) {\n            this.chart.changeTheme(ChartDispatcher.getChartSettings(this.getMultiChartIndex()), name);\n        },\n\n        onMouseWheel: function onMouseWheel(event) {\n            event.deltaY < 0 ? this.zoomIn() : this.zoomOut();\n            event.preventDefault();\n        },\n\n        zoomIn: function zoomIn() {\n            this.chart.zoomIn();\n        },\n\n        zoomOut: function zoomOut() {\n            this.chart.zoomOut();\n        },\n\n        showLoading: function showLoading() {\n            this.$el.addClass('chart-loading');\n            this.loadingView && this.loadingView.destroy();\n            this.loadingView = new LoadingView({\n                parent: this.getLoadingContainer(),\n                position: 'absolute',\n                translucent: '2'\n            });\n        },\n\n        hideLoading: function hideLoading(success) {\n            this.chart.reflow();\n            this.$el.removeClass('chart-loading');\n            this.loadingView && this.loadingView.destroy();\n\n            if (!success) {\n                this.chart.destroy();\n                this.$chartContainer.html(this.chartNoDataTemplate());\n            }\n        },\n\n        onDataLoad: function onDataLoad(candles, instrumentChanged) {\n            var _this = this;\n\n            this.hideLoading(true);\n\n            if (this.comparisonMode) {\n                this.comparisonInstrument = new ComparisonInstrument({\n                    symbol: this.instrument.getSymbol(),\n                    name: this.instrument.getDisplayName()\n                });\n                this.$chartInstrumentsComparisonPanel.setMainInstrument(this.comparisonInstrument);\n            }\n\n            this.chart.handleHistoricalData(candles, this.comparisonMode ? this.comparisonInstrument : undefined);\n            this.chart.onDataLoad();\n\n            if (this.comparisonMode) {\n                if (this.comparisonInstruments && !this.comparisonInstruments.isEmpty()) {\n                    _.each(this.comparisonInstruments.models, function (instrument) {\n                        if (instrumentChanged) {\n                            instrument.getSubscription().changeRangeStart(_this.chartSubscription.getRangeStart());\n                        } else {\n                            instrument.getSubscription().stop();\n                            setTimeout(function () {\n                                ChartDispatcher.updateSubscription(instrument.getSubscription(), _this.range);\n                                instrument.getSubscription().start();\n                            }, 0);\n                        }\n                    });\n                }\n            } else {\n                this.tradingCentral && this.tradingCentral.subscribe({\n                    instrument: this.instrument,\n                    period: this.period\n                });\n            }\n        },\n\n        setInstrument: function setInstrument(instrument) {\n            var _this2 = this;\n\n            if (instrument === this.instrument) {\n                console.log('same instrument selected');\n                setTimeout(function () {\n                    return _this2.handleReflow();\n                }, 0);\n\n                return false;\n            }\n\n            if (this.instrument) {\n                this.instrument.off('change:precision');\n            }\n\n            this.instrument = instrument;\n\n            if (this.instrument) {\n                this.instrument.on('change:precision', this.precisionUpdated, this);\n            }\n\n            return true;\n        },\n\n        render: function render() {\n            var _this3 = this;\n\n            if (this.parent) {\n                $(this.parent).append(this.el);\n            }\n\n            this.$el.html(this.template());\n\n            this.$chartSplitterBox = $('.chart-splitter-box');\n\n            this.$title = this.$el.find('.chart-title');\n\n            if (ChartsConfigurator.defaultRateLines.indexOf(this.rateLine) < 0) {\n                this.rateLine = ChartsConfigurator.defaultRateLines[0];\n            }\n\n            this.$subtitle = this.$el.find('.chart-subtitle');\n\n            this.$chartBox = this.$el.parent();\n            this.$chartContainer = this.$el.find('.chart-container');\n            this.$fullscreenNotification = this.$el.find('.chart-fullscreen-notification');\n\n            this._fontSize = parseFloat(this.$el.find('.chart-basket').css('font-size'));\n\n            this.chart = new ChartView({ el: this.$chartContainer });\n\n            this.listenTo(this.chart, 'cursor:unselect', function () {\n                return _this3.chartToolbar && _this3.chartToolbar.setActiveCursor();\n            });\n            this.listenTo(this.chart, 'chart:drawings-save', this.saveDrawings);\n        },\n\n        onInstrumentSelected: function onInstrumentSelected(symbol, model, tradesVisibility) {\n            if (_.isUndefined(model)) {\n                model = instruments.getInstrumentBySymbol(symbol);\n\n                if (!model) {\n                    return false;\n                }\n            }\n\n            var changed = this.instrument !== null;\n\n            if (this.setInstrument(model)) {\n                this.setTradesVisibility(tradesVisibility);\n                this.resubscribeChart(changed);\n\n                return true;\n            } else {\n                this.setTradesVisibility(tradesVisibility, true);\n\n                return false;\n            }\n        },\n\n        setTradesVisibility: function setTradesVisibility(tradesVisibility, update) {\n            this.tradesVisibility = tradesVisibility;\n\n            if (update) {\n                this.chart.updateTradesVisibility(tradesVisibility);\n            }\n        },\n\n\n        showChartSettings: function showChartSettings() {\n            ChartDispatcher.showChartSettings(this.getMultiChartIndex());\n        },\n\n        showIndicatorsSettings: function showIndicatorsSettings() {\n            ChartDispatcher.showIndicatorsSettings(this.getMultiChartIndex());\n        },\n\n        saveDrawings: function saveDrawings(drawings) {\n            ChartDispatcher.saveDrawings(this.instrument.getSymbol(), drawings, this.getMultiChartIndex());\n        },\n\n        onOrdersUpdate: function onOrdersUpdate() {\n            if (this.instrument) {\n                var currentOrder = orders.getOrderById(this.instrument.get('orderChainId'));\n\n                if (currentOrder && currentOrder.hasChanged()) {\n                    this.instrument.set(_.pick(currentOrder.changedAttributes(), 'stopLoss', 'takeProfit', 'stopLimitPrice'));\n                }\n            }\n        },\n\n        handleReflow: function handleReflow(panelHeight) {\n            this.chart.reflow();\n        },\n\n        makeScreenshot: function makeScreenshot() {\n            this.chart.makeScreenshot();\n        },\n\n        toggleFullscreen: function toggleFullscreen() {\n            var _this4 = this;\n\n            if (this.size.minimized) {\n                this.toggleMinimize();\n            }\n\n            if (this.size.fullscreen) {\n                this.$el.removeClass('fullscreened');\n                this.$el.appendTo(this.size.parent);\n\n                this.size.escapeKeyboardListener && this.size.escapeKeyboardListener.remove();\n                core.trigger('ui:chart:fullscreen-out');\n            } else {\n                this.$el.addClass('fullscreened');\n                this.size.parent = this.$el.parent();\n                this.$el.appendTo($('body'));\n\n                if (device.desktop()) {\n                    this.$fullscreenNotification.css('display', 'block');\n                    this.$fullscreenNotification.fadeOut({\n                        duration: 2000,\n                        complete: function complete() {\n                            return _this4.$fullscreenNotification.css('display', 'none');\n                        },\n                        step: function step(delta) {\n                            return _this4.$fullscreenNotification.css('opacity', delta * 0.6);\n                        }\n                    });\n\n                    this.size.escapeKeyboardListener = this.addKeyboardListener(27, this.toggleFullscreen.bind(this));\n                }\n\n                core.trigger('ui:chart:fullscreen-in');\n            }\n\n            this.chart.reflow();\n            this.size.fullscreen = !this.size.fullscreen;\n            this.chartToolbar && this.chartToolbar.setActiveSize(this.size.fullscreen);\n        },\n\n\n        addKeyboardListener: function addKeyboardListener(code, fn, useCapture) {\n            var handler = function handler(e) {\n                e = e || window.event;\n                e.keyCode === code && fn();\n            };\n\n            document.addEventListener('keydown', handler, useCapture || false);\n\n            return {\n                remove: function remove() {\n                    document.removeEventListener('keydown', handler);\n                }\n            };\n        },\n\n        restoreSize: function restoreSize() {\n            if (this.size.fullscreen) {\n                this.toggleFullscreen();\n            }\n\n            if (this.size.minimized) {\n                this.toggleMinimize();\n            }\n        },\n\n        toggleMinimize: function toggleMinimize() {\n            if (this.size.fullscreen) {\n                this.toggleFullscreen();\n            }\n\n            if (this.size.minimized) {\n                this.$chartBox.removeClass('minimized');\n                this.$chartSplitterBox.css('display', 'block');\n                core.trigger('ui:chart:minimize-out');\n            } else {\n                this.$chartSplitterBox.css('display', 'none');\n                this.$chartBox.addClass('minimized');\n                core.trigger('ui:chart:minimize-in');\n            }\n\n            this.chart.reflow();\n            this.size.minimized = !this.size.minimized;\n        },\n\n        initBaskets: function initBaskets() {\n            var basket = this.instrument.getBasket();\n\n            if (basket) {\n                var basketText = __('baskets.consists', basket.instrumentSymbol);\n\n                for (var i = 0, len = basket.instruments.length; i < len; i++) {\n                    basketText += ' ' + basket.instruments[i].instrumentWeight + '% ' + basket.instruments[i].displayName;\n\n                    if (i < len - 1) {\n                        basketText += ', ';\n                    } else {\n                        basketText += '.';\n                    }\n                }\n\n                this.$el.find('.chart-basket-title').html(__('baskets.title') + ':');\n                this.$el.find('.chart-basket-info').html(basketText);\n\n                this._fitChartBasketHeight();\n            } else {\n                this.$el.find('.chart-basket-title').html('');\n                this.$el.find('.chart-basket-info').html('');\n            }\n        },\n\n        initHeader: function initHeader() {\n            this.$title.html(this.instrument.getDisplayName());\n            this.$subtitle.html(this.instrument.getDescription());\n        },\n\n        stopTradingCentral: function stopTradingCentral() {\n            this.tradingCentral && this.tradingCentral.unsubscribe();\n        },\n\n        onDataUpdate: function onDataUpdate(candles, firstCandle) {\n            return this.chart.handleStreamData(candles, firstCandle);\n        },\n\n        getMultiChartIndex: function getMultiChartIndex() {\n            return this.options.multiChartIndex;\n        },\n\n        resubscribeChart: function resubscribeChart(instrumentChanged) {\n            var _this5 = this;\n\n            if (!this.instrument) {\n                console.error('Resubscribe chart : instrument not selected');\n\n                return;\n            }\n\n            if (!this.chart) {\n                console.log('Resubscribe chart : chart component still not ready');\n\n                return;\n            }\n\n            this.showLoading();\n\n            this.stopTradingCentral();\n            this.stopDrawing();\n\n            this.initHeader();\n            this.initBaskets();\n            this.initBuySellButtons();\n\n            if (this.chartSubscription) {\n                this.chartSubscription.stop();\n            }\n\n            this.chartSubscription = ChartDispatcher.createSubscription(_extends({\n                chartId: this.options.chartId,\n                symbol: this.instrument.getSymbol()\n            }, this.comparisonMode ? { range: this.range } : { period: this.period }, {\n                price: RATE_LINE_PRICE_MAP[this.rateLine],\n                indicators: !this.comparisonMode ? ChartDispatcher.getActiveIndicators(this.getMultiChartIndex()) : null\n            }));\n\n            this.chart.resubscribe({\n                instrument: this.instrument,\n                chartSubscription: this.chartSubscription,\n                type: this.type,\n                period: this.period,\n                rateLine: this.rateLine,\n                cursor: this.cursor,\n                enableTrading: this.enableTrading,\n                tradesVisibility: this.tradesVisibility,\n                comparisonMode: !!this.comparisonMode,\n                settings: ChartDispatcher.getChartSettings(this.getMultiChartIndex()),\n                indicators: !this.comparisonMode ? ChartDispatcher.getActiveIndicators(this.getMultiChartIndex()) : [],\n                drawings: device.desktop() ? ChartDispatcher.getDrawings(this.instrument.getSymbol(), this.getMultiChartIndex()) : {}\n            });\n\n            this.chartSubscription.on({\n                start: function start() {\n                    return _this5.showLoading();\n                },\n                timeout: function timeout() {\n                    return _this5.hideLoading(false);\n                },\n                load: function load(candles) {\n                    return _this5.onDataLoad(candles, instrumentChanged);\n                },\n                update: function update(candles) {\n                    return _this5.onDataUpdate(candles, _this5.chartSubscription.getFirstCandle());\n                }\n            });\n\n            this.chartSubscription.start();\n        },\n\n        getInstrumentSymbol: function getInstrumentSymbol() {\n            return this.instrument && this.instrument.getSymbol();\n        },\n        subscribe: function subscribe(symbol, demoMode) {\n            this.onInstrumentSelected(symbol, undefined, demoMode);\n            this.hideSearch();\n        },\n\n\n        _fitChartBasketHeight: function _fitChartBasketHeight() {\n            var basketHeight = parseFloat(this.$el.find('.chart-basket').css('height'));\n            var chartBasketHeightOverDefault = basketHeight > parseFloat(this.$el.find('.chart-info').css('height'));\n\n            if (chartBasketHeightOverDefault && this._fontSize > BASKET_MIN_FONT_SIZE) {\n                this.$el.find('.chart-basket-title').html('');\n                this._fontSize--;\n                this.$el.find('.chart-basket').css('font-size', this._fontSize + 'px');\n                this._fitChartBasketHeight();\n\n                return;\n            }\n\n            if (basketHeight > BASKET_MAX_HEIGHT) {\n                this.$el.find('.chart-basket').css('display', 'none');\n            }\n        },\n\n        precisionUpdated: function precisionUpdated(model, precision) {\n            if (this.chart) {\n                this.chart.updatePrecision(precision);\n            }\n        },\n\n        destroyBuySellButtons: function destroyBuySellButtons() {\n            var buyEl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.$buyButton;\n            var sellEl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.$sellButton;\n\n            ReactDOM.unmountComponentAtNode(sellEl);\n            ReactDOM.unmountComponentAtNode(buyEl);\n        },\n\n        initBuySellButtons: function initBuySellButtons() {\n            var buyEl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.$buyButton;\n            var sellEl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.$sellButton;\n\n            if (!buyEl || !sellEl) {\n                return;\n            }\n\n            this.destroyBuySellButtons(buyEl, sellEl);\n\n            if (user.getUserCommonData().isAdvancedTradingView()) {\n                if (!settings.isNewInstrumentDetailsBehaviourEnabled() || device.mobile()) {\n                    var symbol = this.instrument.getSymbol();\n\n                    ReactDOM.render(React.createElement(Instrument.Bid, { symbol: symbol, render: PureButtonSellLabel }), sellEl);\n                    ReactDOM.render(React.createElement(Instrument.Ask, { symbol: symbol, render: PureButtonBuyLabel }), buyEl);\n                }\n            } else {\n                ReactDOM.render(React.createElement(GridCellRateWithButton, {\n                    type: 'Sell',\n                    column: { name: 'Sell', key: 'bid', direction: 'bidDirection' },\n                    model: this.instrument,\n                    display: 'block',\n                    isSelected: true\n                }), sellEl);\n                ReactDOM.render(React.createElement(GridCellRateWithButton, {\n                    type: 'Buy',\n                    column: { name: 'Buy', key: 'ask', direction: 'askDirection' },\n                    model: this.instrument,\n                    display: 'block',\n                    isSelected: false\n                }), buyEl);\n            }\n        },\n\n        startDrawing: function startDrawing(event) {\n            this.drawingType = _.isString(event) ? event : this.getTarget(event).dataset.type;\n            this.chart.startDrawing(this.drawingType);\n        },\n\n        stopDrawing: function stopDrawing() {\n            this.chart.stopDrawing();\n        },\n\n        clearDrawings: function clearDrawings() {\n            this.stopDrawing();\n            this.chart.clearDrawings();\n        },\n\n        getTarget: function getTarget(event) {\n            return event.currentTarget;\n        },\n\n        onChangePeriod: function onChangePeriod(period) {\n            this.period = period;\n            this.resubscribeChart();\n        },\n\n        onChangeRange: function onChangeRange(range) {\n            this.range = range;\n            this.period = ChartDispatcher.getPeriodByRange(range);\n            this.resubscribeChart();\n        },\n\n        onChangeType: function onChangeType(type) {\n            this.type = type;\n            this.chart.changeType(type);\n        },\n\n        onZoomIn: function onZoomIn() {\n            this.chart.zoomIn();\n        },\n\n        onZoomOut: function onZoomOut() {\n            this.chart.zoomOut();\n        },\n\n        onShowChartSettings: function onShowChartSettings() {\n            ChartDispatcher.showChartSettings(this.getMultiChartIndex(), this.chart.applySettings.bind(this.chart));\n        },\n\n        onShowIndicatorsSettings: function onShowIndicatorsSettings() {\n            ChartDispatcher.showIndicatorsSettings(this.getMultiChartIndex(), this.resubscribeChart.bind(this));\n        },\n\n        onChangeCursor: function onChangeCursor(cursor) {\n            this.chart.changeCursor(cursor);\n        },\n\n        onChangeRateLine: function onChangeRateLine(rateLine) {\n            this.rateLine = rateLine;\n            this.resubscribeChart();\n        },\n\n        onSearchResultClick: function onSearchResultClick(symbol) {\n            core.trigger('ui:instrument', symbol, true);\n        },\n\n        showSearch: function showSearch(firstUsage) {\n            if (!this.chartSearchView) {\n                this.chartSearchView = new ChartSearchView({\n                    el: this.$el.find('.chart-search-block-wrapper'),\n                    onRowClick: this.onSearchResultClick.bind(this)\n                });\n            }\n\n            this.chartSearchView.show(_.isBoolean(firstUsage) && firstUsage);\n        },\n\n        hideSearch: function hideSearch() {\n            this.chartSearchView && this.chartSearchView.hide();\n        },\n\n        initComparisonInstruments: function initComparisonInstruments() {\n            var instrument = this.instrument;\n\n            if (!this.comparisonInstruments) {\n                this.comparisonInstruments = new ComparisonInstrumentsCollection();\n                this.listenTo(this.comparisonInstruments, 'full', this.updateComparisonSearch);\n            }\n\n            this.comparisonInstrument = new ComparisonInstrument({\n                symbol: instrument && instrument.getSymbol(),\n                name: instrument && instrument.getDisplayName()\n            });\n            this.$chartInstrumentsComparisonPanel = ReactDOM.render(React.createElement(__webpack_require__(2407), {\n                mainInstrument: this.comparisonInstrument,\n                comparisonInstruments: this.comparisonInstruments\n            }), this.$el.find('.chart-instruments-comparison-panel')[0]);\n        },\n\n        enableComparisonMode: function enableComparisonMode() {\n            var range = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.range;\n\n            this.comparisonMode = true;\n            this.type = ChartsConfigurator.comparisonType;\n            this.range = range;\n            this.period = ChartDispatcher.getPeriodByRange(this.range);\n            this.initComparisonInstruments();\n            this.resubscribeChart();\n        },\n\n        disableComparisonMode: function disableComparisonMode(type, period) {\n            this.comparisonMode = false;\n            this.type = type;\n            this.period = period;\n            // this.initComparisonInstruments();\n            ReactDOM.unmountComponentAtNode(this.$el.find('.chart-instruments-comparison-panel')[0]);\n            this.resubscribeChart();\n            this.chart.changeCursor();\n        },\n\n        addComparisonInstrument: function addComparisonInstrument(symbol) {\n            var _this6 = this;\n\n            var instrument = instruments.getInstrumentBySymbol(symbol);\n\n            if (!this.comparisonInstruments.contains(symbol) && instrument) {\n                var comparisonInstrument = new ComparisonInstrument({\n                    symbol: instrument.getSymbol(),\n                    name: instrument.getDisplayName()\n                });\n\n                comparisonInstrument.setSubscription(ChartDispatcher.createSubscription({\n                    chartId: this.options.chartId,\n                    symbol: symbol,\n                    range: this.range,\n                    price: RATE_LINE_PRICE_MAP[this.rateLine]\n                }));\n                this.comparisonInstruments.add(comparisonInstrument);\n                this.chart.addComparisonInstrument(comparisonInstrument, this.comparisonInstruments.length);\n                comparisonInstrument.on('remove', function () {\n                    _this6.removeComparisonInstrument(comparisonInstrument.getSymbol());\n                });\n                comparisonInstrument.getSubscription().start(this.chartSubscription.getRangeStart());\n            }\n        },\n\n        removeComparisonInstrument: function removeComparisonInstrument(symbol) {},\n        updateComparisonSearch: function updateComparisonSearch(full) {\n            this.initToolbar();\n            this.chartToolbar.updateComparisonSearch(full);\n        },\n\n\n        destroy: function destroy() {\n            this.chartSubscription && this.chartSubscription.stop();\n            this.destroyBuySellButtons();\n            View.prototype.destroy.call(this);\n        }\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(7)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/chart-panel/chart.panel.view.js\n// module id = 2374\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/chart-panel/chart.panel.view.js?");

/***/ }),

/***/ 2375:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_, $) {var __WEBPACK_AMD_DEFINE_RESULT__;function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var device = __webpack_require__(18);\n    var moment = __webpack_require__(6);\n    var View = __webpack_require__(15);\n    var periods = __webpack_require__(289);\n    var ChartDrawing = __webpack_require__(2376);\n    var ChartsConfigurator = __webpack_require__(848);\n    var CandlesConverter = __webpack_require__(878);\n    var SimpleRateLine = __webpack_require__(2387);\n    var CurrentRateLine = __webpack_require__(2392);\n    var PositionRateLine = __webpack_require__(2393);\n    var OrderRateLine = __webpack_require__(2396);\n\n    var REGEX_GET_LINE_END_X = /(M\\s*\\S*\\s*\\S*\\s*L\\s*)(\\S*)(\\s*\\S*\\s*)/;\n    var REGEX_GET_LINE_END_Y = /(M\\s*\\S*\\s*\\S*\\s*L\\s*\\S*\\s*)(\\S*)(\\s*)/;\n\n    var ZOOM_IN_RATIO = 0.8;\n    var ZOOM_OUT_RATIO = 1.25;\n\n    var TC_MIN_RATIO = 0.9999;\n    var TC_MAX_RATIO = 1.0001;\n\n    var Highcharts = void 0;\n\n    var setExtremesWrapper = function setExtremesWrapper(proceed, min, max, redraw, animation, eventArguments) {\n        var _this = this;\n\n        var xData = this.chart.get(ChartsConfigurator.options.names.series.main).xData;\n\n        if (min !== undefined) {\n            arguments[1] = Math.min(min, xData[Math.max(0, xData.length - ChartsConfigurator.options.general.candles.overscroll.offset)]);\n        }\n\n        if (eventArguments && eventArguments.DOMEvent && eventArguments.DOMEvent.type === 'mouseup') {\n            setTimeout(function () {\n                var xAxis = _this.chart.get(ChartsConfigurator.options.names.axis.mainX);\n\n                _this.chart.navigator.render(xAxis.min, xAxis.max);\n            }, 0);\n        }\n\n        proceed.apply(this, Array.prototype.slice.call(arguments, 1));\n    };\n\n    var scaleGroupsWrapper = function scaleGroupsWrapper(proceed, attribs, clip) {\n        proceed.call(this, attribs, clip);\n        Highcharts.each(this.chart.series, function (series) {\n            series.chart[series.sharedClipKey] && series.chart[series.sharedClipKey].attr(clip || series.chart.clipBox);\n        });\n    };\n\n    var drawCrosshairWrapper = function drawCrosshairWrapper(proceed, e, point) {\n        proceed.call(this, e, point);\n\n        if (!Highcharts.defined(this.crosshair.label) || !this.crosshair.label.enabled || !this.cross) {\n            return;\n        }\n\n        var crossLabel = this.crossLabel;\n\n        if (!crossLabel) {\n            return;\n        }\n\n        // Fix for hiding unneeded crossLabels for another axes, which are should not be visible because mouse is not above these axes\n        if (!e && !this.isXAxis && point.series.yAxis.options.id !== this.options.id) {\n            this.crossLabel.hide();\n        }\n\n        if (!this.isXAxis) {\n            if (ChartsConfigurator.options.chart.label.offsetX) {\n                var path = this.cross.d.match(REGEX_GET_LINE_END_X);\n                var x = +path[2] + ChartsConfigurator.options.chart.label.offsetX;\n\n                this.cross.attr({ d: '' + path[1] + x + path[3] });\n                crossLabel.attr({ x: x });\n            }\n        } else {\n            // Increase y of lowest point (largest value) by offset value to place it right on the X axis labels\n            // Sample of d : \"M 554.5 0 L 554.5 136 M 554.5 144 L 554.5 212 M 554.5 221 L 554.5 289 M 554.5 298 L 554.5 366 M 554.5 374 L 554.5 442 M 554.5 68 L 554.5 136\"\n            if (ChartsConfigurator.options.chart.label.offsetY) {\n                var d = this.cross.d.split(' ');\n                var maxY = 0;\n                var maxI = -1;\n                var i = 5;\n                var len = d.length;\n\n                while (i < len) {\n                    if (d[i] > maxY) {\n                        maxY = d[i];\n                        maxI = i;\n                    }\n\n                    i += 6;\n                }\n\n                if (maxI >= 0) {\n                    var y = +d[maxI] + ChartsConfigurator.options.chart.label.offsetY;\n\n                    d[maxI] = y;\n                    d = d.join(' ');\n                    this.cross.attr({ d: d });\n                    crossLabel.attr({ y: y });\n                }\n            }\n        }\n    };\n\n    var setupCustomCrosshairLabel = function setupCustomCrosshairLabel(H) {\n        var AFTER_DRAW_CROSSHAIR_EVENT = 'afterDrawCrosshair';\n\n        var TOP_LEVEL_ORDER_INDEX = -1;\n\n        var CENTER = 'center';\n        var RIGHT = 'right';\n        var LEFT = 'left';\n\n        if (H.Axis.prototype.protoEvents && H.Axis.prototype.protoEvents[AFTER_DRAW_CROSSHAIR_EVENT]) {\n            H.each(H.Axis.prototype.protoEvents[AFTER_DRAW_CROSSHAIR_EVENT], function (event, index) {\n                event.order = index;\n            });\n        }\n\n        H.addEvent(H.Axis, AFTER_DRAW_CROSSHAIR_EVENT, function (event) {\n            if (!H.defined(this.crosshair.label) || !this.crosshair.label.enabled || !this.cross) {\n                return;\n            }\n\n            var chart = this.chart,\n                horiz = this.horiz,\n                opposite = this.opposite;\n\n\n            var options = this.options.crosshair.label;\n            var align = horiz ? CENTER : opposite ? this.labelAlign === RIGHT ? RIGHT : LEFT : this.labelAlign === LEFT ? LEFT : CENTER;\n\n            var crossLabel = this.crossLabel;\n\n            // If the label does not exist yet, create it.\n            if (!crossLabel) {\n                crossLabel = this.crossLabel = chart.renderer.label(null, null, null, options.shape || 'callout').addClass('highcharts-crosshair-label' + (this.series[0] && ' highcharts-color-' + this.series[0].colorIndex)).attr({\n                    align: options.align || align,\n                    padding: H.pick(options.padding, 8),\n                    r: H.pick(options.borderRadius, 3),\n                    zIndex: 8\n                }).add();\n\n                // Presentational\n                crossLabel.attr({\n                    fill: options.backgroundColor || this.series[0] && this.series[0].color || '#666666',\n                    stroke: options.borderColor || '',\n                    'stroke-width': options.borderWidth || 0\n                }).css(H.extend({\n                    color: '#ffffff',\n                    fontWeight: 'normal',\n                    fontSize: '11px',\n                    textAlign: CENTER\n                }, options.style));\n            }\n        }, { order: TOP_LEVEL_ORDER_INDEX });\n    };\n\n    var highchartPromiseLoader = new Promise(function(resolve) { resolve(); }).then(__webpack_require__.bind(null, 452));\n\n    highchartPromiseLoader.then(function (highstock) {\n        Highcharts = highstock;\n\n        Highcharts.forEachPolyfill = function (callback, context) {\n            var index = 0;\n            var length = this.length;\n\n            while (index < length) {\n                if (false === callback.call(context, this[index], index, this)) {\n                    return index;\n                }\n\n                index++;\n            }\n        };\n\n        setupCustomCrosshairLabel(Highcharts);\n\n        Highcharts.wrap(Highcharts.Axis.prototype, 'setExtremes', setExtremesWrapper);\n        Highcharts.wrap(Highcharts.Axis.prototype, 'drawCrosshair', drawCrosshairWrapper);\n        Highcharts.wrap(Highcharts.Pointer.prototype, 'scaleGroups', scaleGroupsWrapper);\n\n        __webpack_require__(892)(Highcharts);\n        __webpack_require__(893)(Highcharts);\n        __webpack_require__(2399)(Highcharts);\n        __webpack_require__(2400)(Highcharts);\n        __webpack_require__(2401)(Highcharts);\n        __webpack_require__(2402)(Highcharts);\n    });\n\n    module.exports = View.extend({\n\n        chart: null,\n        plotLines: null,\n        comparisonMode: false,\n\n        _initOverscroll: function _initOverscroll() {\n            var PERIOD = periods[this.period].seconds * 1000;\n\n            var lastCandle = this.chartSubscription.getLastCandle();\n\n            this.overscrollData = _.map(_.range(ChartsConfigurator.options.general.candles.overscroll.total), function (i) {\n                return [lastCandle.timestamp + (i + 1) * PERIOD, lastCandle.close];\n            });\n            this.chart.addSeries({\n                type: 'line',\n                color: 'transparent',\n                shadow: false,\n                animation: false,\n                data: this.overscrollData,\n                showInNavigator: true,\n                tooltip: {\n                    enabled: false,\n                    pointFormatter: function pointFormatter() {\n                        return null;\n                    }\n                }\n            });\n        },\n\n        onDataLoad: function onDataLoad() {\n            var _this2 = this;\n\n            if (!this.comparisonMode) {\n                if (device.desktop()) {\n                    this.chartDrawings = new ChartDrawing({\n                        chart: this.chart,\n                        options: this.drawings,\n                        start: this.chartSubscription.getFirstCandle().timestamp,\n                        onSave: function onSave(options) {\n                            return _this2.trigger('chart:drawings-save', options);\n                        },\n                        forExport: false\n                    });\n                    this.chartDrawings.externalHandlers.push(Highcharts.addEvent(this.chartDrawings, 'enableEditing', this.enableDrawingsEditing.bind(this)));\n                    this.chartDrawings.externalHandlers.push(Highcharts.addEvent(this.chartDrawings, 'disableEditing', this.disableDrawingsEditing.bind(this)));\n                    delete this.drawings;\n                }\n\n                this._initCurrentRatePlotLine();\n                this._initTradingPlotLines();\n                this._initOverscroll();\n                this._initExtremes();\n            } else {\n                if (this.plotLines && this.plotLines.currentRate) {\n                    this.plotLines.currentRate.destroy();\n                    delete this.plotLines.currentRate;\n                }\n\n                this._destroyTradingPlotLines();\n            }\n\n            this._redrawChart();\n        },\n\n        bindEvents: function bindEvents(series, comparisonInstrument) {\n            var handler = function handler(event) {\n                var point = series.searchPoint(event, true);\n\n                if (point) {\n                    comparisonInstrument.setChange(point.y);\n                }\n            };\n\n            if (Highcharts.hasTouch) {\n                var unbindTouchMove = Highcharts.addEvent(this.chart.container, 'touchmove', handler);\n                var unbindTouchStart = Highcharts.addEvent(this.chart.container, 'touchstart', handler);\n\n                return function () {\n                    unbindTouchMove();\n                    unbindTouchStart();\n                };\n            } else {\n                var unbindMouseMove = Highcharts.addEvent(this.chart.container, 'mousemove', handler);\n\n                return function () {\n                    unbindMouseMove();\n                };\n            }\n        },\n\n        handleHistoricalData: function handleHistoricalData(candles, comparisonInstrument) {\n            if (this.comparisonMode) {\n\n                var mainSeries = this._getMainSeries();\n\n                if (mainSeries) {\n                    mainSeries.setData(CandlesConverter.extendPoints(this.convertCandles(candles), this.chartSubscription), false);\n\n                    var unbindEvents = this.bindEvents(mainSeries, comparisonInstrument);\n\n                    comparisonInstrument.on('remove', function () {\n                        unbindEvents();\n                    });\n                    comparisonInstrument.setColor(mainSeries.color);\n                    this.changeCursor('comparison_crosshair');\n                } else {\n                    console.error('Chart has not been initialized');\n                }\n            } else {\n                this._setHistoricalData(candles);\n            }\n        },\n\n        _updateCurrentRateLine: function _updateCurrentRateLine() {\n            if (this.rateLine === 'none' || this.comparisonMode) {\n                return;\n            }\n\n            this.plotLines && this.plotLines.currentRate && this.plotLines.currentRate.updateRate(this.chartSubscription.getLastCandle().close);\n        },\n\n        handleStreamData: function handleStreamData(candles, firstCandle) {\n            this._updateHistoricalData(candles, firstCandle);\n\n            // this._updateHistoricalData2(data);\n\n            this._updateCurrentRateLine();\n            this._redrawChart();\n        },\n\n        changeType: function changeType(type) {\n            this._changeType(type);\n        },\n\n        changeCursor: function changeCursor(type) {\n            this._changeCursor(type);\n        },\n\n        changeTheme: function changeTheme(settings, name) {\n            this.applySettings(settings);\n        },\n\n        applySettings: function applySettings(settings) {\n            if (this.isExists()) {\n                this._applyChartSettings(settings);\n                this._redrawChart();\n            }\n        },\n\n        reflow: function reflow() {\n            if (this.isExists()) {\n                this.chart.reflow();\n            }\n        },\n\n        makeScreenshot: function makeScreenshot() {\n            this._exportChart();\n        },\n\n        destroy: function destroy() {\n            this.stopListening();\n\n            if (this.chartDrawings) {\n                this.chartDrawings.destroy();\n            }\n\n            if (this.chart && this.chart.destroy) {\n                this.chart.destroy();\n                this.chart = null;\n            }\n        },\n\n        zoomIn: function zoomIn() {\n            this._zoom(ZOOM_IN_RATIO);\n        },\n\n        zoomOut: function zoomOut() {\n            this._zoom(ZOOM_OUT_RATIO);\n        },\n\n        isExists: function isExists() {\n            return _.isObject(this.chart);\n        },\n\n        isOpenPositionsVisible: function isOpenPositionsVisible() {\n            return this.tradesVisibility.showTrades && this.tradesVisibility.showAllOpenPositions;\n        },\n\n        isOrdersVisible: function isOrdersVisible() {\n            return this.tradesVisibility.showTrades && this.tradesVisibility.showAllOrders;\n        },\n\n        _initCurrentRatePlotLine: function _initCurrentRatePlotLine() {\n            if (!this.plotLines) {\n                this.plotLines = {};\n            } else {\n                this.plotLines.currentRate && this.plotLines.currentRate.destroy();\n                delete this.plotLines.currentRate;\n            }\n\n            if (this.rateLine !== 'none') {\n                this.plotLines.currentRate = new CurrentRateLine(this.chart, {\n                    showInfoLabel: true,\n                    infoLabelKey: 'chart.line.' + this.rateLine,\n                    instrument: this.instrument\n                });\n                this._updateCurrentRateLine();\n            }\n        },\n\n        updateTradesVisibilityForType: function updateTradesVisibilityForType(typeName, typeLinesKey, typeClass, typeCollection, showAll, allVisibleTradesIds) {\n            var _this3 = this;\n\n            if (!this.plotLines[typeLinesKey]) {\n                this.plotLines[typeLinesKey] = [];\n            }\n\n            var typePlotLines = this.plotLines[typeLinesKey];\n\n            var allIds = _.pluck(typeCollection.models, 'cid');\n            var oldVisibleIds = _.map(typePlotLines, function (line) {\n                return line.options[typeName].cid;\n            });\n            var newVisibleIds = showAll ? allIds : _.intersection(allIds, allVisibleTradesIds);\n\n            var addedIds = _.difference(newVisibleIds, oldVisibleIds);\n            var removedIds = _.difference(oldVisibleIds, newVisibleIds);\n\n            if (removedIds.length) {\n                var i = 0;\n\n                var len = typePlotLines.length;\n\n                while (i < len) {\n                    if (removedIds.indexOf(typePlotLines[i].options[typeName].cid) >= 0) {\n                        typePlotLines[i].destroy();\n                        typePlotLines.splice(i, 1);\n                        len--;\n                    } else {\n                        i++;\n                    }\n                }\n            }\n\n            _.each(addedIds, function (cid) {\n                var _ref;\n\n                typePlotLines.push(new typeClass(_this3.chart, (_ref = {}, _defineProperty(_ref, typeName, typeCollection.get(cid)), _defineProperty(_ref, 'instrument', _this3.instrument), _ref)));\n            });\n        },\n\n        updateTradesVisibility: function updateTradesVisibility() {\n            var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.tradesVisibility;\n\n            if (this.enableTrading && this.plotLines && config.showTrades) {\n                this.updateTradesVisibilityForType('order', 'orders', OrderRateLine, this.instrument.getOrders(), config.showAllOrders, config.visibleTradesIds);\n                this.updateTradesVisibilityForType('position', 'positions', PositionRateLine, this.instrument.getPositions(), config.showAllOpenPositions, config.visibleTradesIds);\n            }\n\n            this.tradesVisibility = config;\n        },\n\n        updateTradingCentral: function updateTradingCentral(data) {\n            var _this4 = this;\n\n            if (this.isExists()) {\n                this.tcExremes = {\n                    min: data.support3 * TC_MIN_RATIO,\n                    max: data.resistance3 * TC_MAX_RATIO\n                };\n                var index = 0;\n\n                if (!this.plotLines) {\n                    this.plotLines = {};\n                }\n\n                if (!this.plotLines.tc) {\n                    this.plotLines.tc = {};\n                }\n\n                _.each(ChartsConfigurator.tradingCentralSettings, function (config, type) {\n                    if (data[type]) {\n                        if (!_this4.plotLines.tc[type] || _this4.plotLines.tc[type].destroyed) {\n                            _this4.plotLines.tc[type] = new SimpleRateLine(_this4.chart, {\n                                className: 'tc-' + type,\n                                color: data.lines[index++ / 3 >> 0].colors[0],\n                                showInfoLabel: true,\n                                infoLabelAlign: config.align,\n                                infoLabelValue: config.text,\n                                precision: _this4.instrument.getPrecision()\n                            });\n                        }\n\n                        _this4.plotLines.tc[type].updateRate(data[type]);\n                    } else {\n                        index++;\n                    }\n                });\n\n                if (data.pivot === data.resistance1) {\n                    this.plotLines.tc.resistance1.destroy();\n                    delete this.plotLines.tc.resistance1;\n                } else if (data.pivot === data.support1) {\n                    this.plotLines.tc.support1.destroy();\n                    delete this.plotLines.tc.support1;\n                }\n\n                this._updateValueExtremes();\n                this._redrawChart();\n            }\n        },\n\n        updatePrecision: function updatePrecision(precision) {\n            var _this5 = this;\n\n            highchartPromiseLoader.then(function () {\n                _this5.chart.update({\n                    tooltip: { valueDecimals: precision }\n                });\n            });\n        },\n\n        startDrawing: function startDrawing(type) {\n            if (this.isExists() && this.chartDrawings) {\n                this.chartDrawings.startDrawing(type);\n                $(this.chart.container).addClass('drawing-started');\n            }\n        },\n\n        stopDrawing: function stopDrawing() {\n            if (this.isExists() && this.chartDrawings) {\n                this.chartDrawings.stopDrawing();\n                this.chartDrawings.setActiveDrawing();\n                $(this.chart.container).removeClass('drawing-started');\n            }\n        },\n\n        clearDrawings: function clearDrawings() {\n            if (this.isExists() && this.chartDrawings) {\n                this.chartDrawings.clearDrawings();\n                $(this.chart.container).removeClass('drawing-started');\n            }\n        },\n\n        _exportChart: function _exportChart() {\n            var _this6 = this;\n\n            if (this.isExists()) {\n                this.chart.exportChartLocal({\n                    filename: this.instrument.getDisplayName() + '_' + moment().format('YYYYMMDDHHmmss'),\n                    type: /Edge\\/|Trident\\/|MSIE /.test(window.navigator.userAgent) ? 'image/svg+xml' : 'image/png'\n                }, this.configurator.createExportingConfig({\n                    onLoad: function onLoad(chart) {\n                        if (_this6.chartDrawings) {\n                            var drawings = new ChartDrawing({\n                                chart: chart,\n                                options: _this6.chartDrawings.options,\n                                forExport: true\n                            });\n                        }\n\n                        _this6.configurator.addChartInfoExporting(chart);\n\n                        if (_this6.plotLines) {\n                            if (_this6.plotLines.currentRate) {\n                                _this6.plotLines.currentRate.exportTo(chart);\n                            }\n\n                            _.each(_this6.plotLines.positions, function (line) {\n                                return line.exportTo(chart);\n                            });\n                            _.each(_this6.plotLines.orders, function (line) {\n                                return line.exportTo(chart);\n                            });\n                            _.each(_this6.plotLines.tc, function (line) {\n                                return line.exportTo(chart);\n                            });\n                        }\n                    },\n                    onRedraw: function onRedraw(chart) {\n                        _this6._redrawHandler(chart);\n                    }\n                }));\n            } else {\n                console.error('Chart has not been initialized');\n            }\n        },\n\n        resubscribe: function resubscribe(_ref2) {\n            var _this7 = this;\n\n            var instrument = _ref2.instrument,\n                period = _ref2.period,\n                type = _ref2.type,\n                rateLine = _ref2.rateLine,\n                indicators = _ref2.indicators,\n                settings = _ref2.settings,\n                drawings = _ref2.drawings,\n                tradesVisibility = _ref2.tradesVisibility,\n                enableTrading = _ref2.enableTrading,\n                cursor = _ref2.cursor,\n                comparisonMode = _ref2.comparisonMode,\n                chartSubscription = _ref2.chartSubscription;\n\n            highchartPromiseLoader.then(function () {\n                _this7.destroy();\n                _this7.instrument = instrument;\n                _this7.tradesVisibility = tradesVisibility;\n                _this7.drawings = drawings;\n                _this7.period = period;\n                _this7.rateLine = rateLine;\n                _this7.comparisonMode = comparisonMode;\n\n                _this7.enableTrading = enableTrading;\n\n                _this7.chartSubscription = chartSubscription;\n                _this7.extremes = null;\n                _this7.tcExremes = null;\n\n                if (_this7.chartDrawings) {\n                    _this7.chartDrawings.destroy();\n                    _this7.chartDrawings = undefined;\n                }\n\n                _this7._destroyTradingPlotLines();\n\n                cursor = _this7.configurator ? _this7.configurator.previousCursor : cursor;\n\n                _this7.configurator = new ChartsConfigurator({\n                    instrumentInfo: _this7.instrument,\n                    type: type, settings: settings, indicators: indicators, comparisonMode: comparisonMode,\n\n                    onSetExtremes: _this7._setExtremesHandler.bind(_this7),\n                    onRedraw: _this7._redrawHandler.bind(_this7)\n                });\n\n                _this7.chart = new Highcharts.StockChart(_this7.el, _this7.configurator.createHighchartsConfig());\n\n                _this7._detectIndicatorsSeries();\n                _this7._changeCursor(cursor);\n\n                _this7.colors = {\n                    '#42aa2d': true, '#de67a7': true, '#dd7130': true, '#7a43b0': true\n                };\n            });\n        },\n\n        _redrawHandler: function _redrawHandler(chart) {},\n\n        _setExtremesHandler: function _setExtremesHandler(extremes) {\n            this.extremes = _.pick(extremes, 'min', 'max');\n            this._updateValueExtremes();\n        },\n\n        _initExtremes: function _initExtremes() {\n            var data = this.getTimestamps();\n\n            var candles = ChartsConfigurator.options.general.candles;\n            var visibleCandles = candles.visible;\n\n            if (data.length === 1 || visibleCandles >= data.length) {\n                this._getMainXAxis().setExtremes(_.first(data), _.last(data), false, null);\n            } else {\n                var min = data[data.length - (candles.overscroll.total - candles.overscroll.visible) - visibleCandles];\n                var max = data[data.length - (candles.overscroll.total - candles.overscroll.visible) - 1];\n\n                this._getMainXAxis().setExtremes(min, max, false, null);\n            }\n        },\n\n        _getMainSeries: function _getMainSeries() {\n            return this.chart.get(ChartsConfigurator.options.names.series.main);\n        },\n\n        _getVolumeSeries: function _getVolumeSeries() {\n            return this.chart.get(ChartsConfigurator.options.names.series.volume);\n        },\n\n        _getMainXAxis: function _getMainXAxis() {\n            var chart = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.chart;\n\n            return chart ? chart.get(ChartsConfigurator.options.names.axis.mainX) : null;\n        },\n\n        _getMainYAxis: function _getMainYAxis() {\n            var chart = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.chart;\n\n            return chart ? chart.get(ChartsConfigurator.options.names.axis.mainY) : null;\n        },\n\n        convertCandles: function convertCandles(candles) {\n            var candleToPoint = this.configurator.getTypeConverter();\n            var prevPoint = void 0;\n            var prevCandle = _.first(candles);\n\n            return _.map(candles, function (candle) {\n                if (!candle.expansion) {\n                    prevPoint = candleToPoint(candle, prevPoint, prevCandle);\n\n                    return prevPoint;\n                }\n            });\n        },\n\n        _changeType: function _changeType(type) {\n            if (this.configurator.type !== type) {\n                if (this.isExists()) {\n                    var mainSeries = this._getMainSeries();\n\n                    if (mainSeries) {\n                        mainSeries.remove(false);\n                        this.configurator.type = type;\n                        this.chart.addSeries(this.configurator.createMainSeriesConfig(this.convertCandles(this.chartSubscription.getCandles())), false);\n                        this._redrawChart();\n                    }\n                } else {\n                    console.error('Chart has not been initialized');\n                }\n            }\n        },\n\n        _setHistoricalData: function _setHistoricalData(candles) {\n            var _this8 = this;\n\n            var mainSeries = this._getMainSeries();\n\n            if (mainSeries) {\n                var indicatorsData = [];\n                var volumeData = [];\n                var candleToPoint = this.configurator.getTypeConverter();\n\n                var prevPoint = void 0;\n                var firstCandle = _.first(candles);\n                var data = [];\n\n                _.each(candles, function (candle) {\n                    if (candle.studyValues) {\n                        _.each(candle.studyValues.values, function (value, index) {\n                            if ('NaN' !== value) {\n                                indicatorsData[index] = indicatorsData[index] || [];\n                                indicatorsData[index].push(_this8._toIndicatorPoint(candle.timestamp, value));\n                            }\n                        });\n                    }\n\n                    if (!candle.expansion) {\n                        volumeData.push(_this8._toIndicatorPoint(candle.timestamp, candle.volume));\n\n                        prevPoint = candleToPoint(candle, prevPoint, firstCandle);\n                        data.push(prevPoint);\n                    }\n                });\n                mainSeries.setData(data, false);\n\n                if (this.configurator.hasVolume) {\n                    this._getVolumeSeries().setData(volumeData, false);\n                }\n\n                _.each(this.inicatorsSeries, function (series, index) {\n                    return series.setData(indicatorsData[index], false);\n                });\n            } else {\n                console.error('Chart has not been initialized');\n            }\n        },\n\n        _updateHistoricalData: function _updateHistoricalData(candles, firstCandle) {\n            var _this9 = this;\n\n            var series = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._getMainSeries();\n\n            var candleToPoint = this.configurator.getTypeConverter();\n\n            if (series) {\n                _.each(candles, function (candle) {\n                    if (candle.studyValues) {\n                        _.each(candle.studyValues.values, function (value, index) {\n                            if ('NaN' !== value) {\n                                _this9.addOrUpdatePoint(_this9.inicatorsSeries[index], _this9._toIndicatorPoint(candle.timestamp, value));\n                            }\n                        });\n                    }\n\n                    if (!candle.expansion) {\n                        if (_this9.configurator.hasVolume) {\n                            _this9.addOrUpdatePoint(_this9._getVolumeSeries(), _this9._toIndicatorPoint(candle.timestamp, candle.volume));\n                        }\n\n                        _this9.addOrUpdatePoint(series, candleToPoint(candle, _this9._getLastPoint(), firstCandle));\n                    }\n                });\n            } else {\n                console.error('Chart has not been initialized');\n            }\n        },\n\n        _toIndicatorPoint: function _toIndicatorPoint(timestamp, value) {\n            return [timestamp, value];\n        },\n\n        addOrUpdatePoint: function addOrUpdatePoint(series, point) {\n            if (series.xData[series.xData.length - 1] < point[0]) {\n                this._addPoint(series, point);\n\n                return { added: true };\n            } else {\n                return { added: false, updatedIndex: this._updatePoint(series, point) };\n            }\n        },\n\n        _addPoint: function _addPoint(series, point) {\n            series.addPoint(point, false, !this.comparisonMode, false);\n        },\n        _updatePoint: function _updatePoint(series, point) {\n            var index = series.xData.indexOf(point[0]);\n            var pointForUpdate = _.findWhere(series.points, { index: index });\n\n            if (pointForUpdate && pointForUpdate.x === point[0]) {\n                pointForUpdate.update(point, false, false);\n            } else {\n                series.removePoint(index, false, false);\n                series.addPoint(point, false, false, false);\n            }\n\n            return index;\n        },\n\n\n        _getLastPoint: function _getLastPoint() {\n            var _lp = this._getMainSeries().yData;\n\n            _lp = _lp[_lp.length - 2];\n\n            return _.isArray(_lp) ? [0, _lp[0], _lp[1], _lp[2], _lp[3]] : [0, 0, 0, 0, _lp];\n        },\n\n        _updateValueExtremes: function _updateValueExtremes() {\n            if (this.tcExremes) {\n                var seriesExtremes = this._getMainYAxis().getExtremes();\n\n                this._getMainYAxis().setExtremes(Math.min(seriesExtremes.dataMin, this.tcExremes.min), Math.max(seriesExtremes.dataMax, this.tcExremes.max), false);\n            }\n        },\n\n        _redrawChart: function _redrawChart() {\n            this.chart.redraw();\n        },\n\n        getTimestamps: function getTimestamps() {\n            return _.union(_.pluck(this.chartSubscription.getCandles(), 'timestamp'), _.pluck(this.overscrollData, '0'));\n        },\n\n        _zoom: function _zoom(ratio) {\n            if (!this.isExists() || !_.isUndefined(this.chartDrawings) && this.chartDrawings.isDrawingEditingEnabled() || this.comparisonMode) {\n                return;\n            }\n\n            var data = this.getTimestamps();\n\n            if (!this.extremes) {\n                this.extremes = _.pick(this._getMainXAxis().getExtremes(), 'min', 'max');\n            }\n\n            var min = Math.max(this.extremes.min, _.first(data));\n            var max = Math.min(this.extremes.max, _.last(data));\n\n            min = _.sortedIndex(data, min);\n            max = _.sortedIndex(data, max);\n\n            var distance = (max - min) * ratio;\n            var average = (max + min) / 2;\n\n            min = Math.max(Math.round(average - distance / 2), 0);\n            max = Math.min(Math.round(average + distance / 2), data.length - 1);\n\n            if (data[min] && data[max]) {\n                this._getMainXAxis().setExtremes(data[min], data[max]);\n            } else {\n                console.error('Error during zoom', ratio, min, max);\n            }\n        },\n\n        _initTradingPlotLines: function _initTradingPlotLines() {\n            var _this10 = this;\n\n            this._destroyTradingPlotLines();\n\n            if (this.enableTrading) {\n                this.listenTo(this.instrument.getPositions(), 'add', function (position) {\n                    if (_this10.isOpenPositionsVisible()) {\n                        _this10.plotLines.positions.push(new PositionRateLine(_this10.chart, {\n                            position: position,\n                            instrument: _this10.instrument\n                        }));\n                    }\n                });\n                this.listenTo(this.instrument.getOrders(), 'add', function (order) {\n                    if (_this10.isOrdersVisible()) {\n                        _this10.plotLines.orders.push(new OrderRateLine(_this10.chart, {\n                            order: order,\n                            instrument: _this10.instrument\n                        }));\n                    }\n                });\n\n                this.plotLines.positions = [];\n                this.plotLines.orders = [];\n\n                this.updateTradesVisibility();\n            }\n        },\n\n        _destroyTradingPlotLines: function _destroyTradingPlotLines() {\n            if (!this.plotLines) {\n                return;\n            }\n\n            if (this.plotLines.positions) {\n                _.each(this.plotLines.positions, function (line) {\n                    return line.destroy();\n                });\n                delete this.plotLines.positions;\n            }\n\n            if (this.plotLines.orders) {\n                _.each(this.plotLines.orders, function (line) {\n                    return line.destroy();\n                });\n                delete this.plotLines.orders;\n            }\n        },\n\n        _applyChartSettings: function _applyChartSettings(settings) {\n            var volumeVisibilityChanged = settings.switchers.showVolume !== this.configurator.settings.switchers.showVolume;\n            var tradesVisibilityChanged = settings.switchers.showTrades !== this.configurator.settings.switchers.showTrades;\n\n            this.configurator.settings = settings;\n            var highchartsConfig = this.configurator.createHighchartsConfig();\n\n            this._updateChart(this.chart, highchartsConfig);\n            this._updateAxes(this.chart.xAxis);\n            this._updateAxes(this.chart.yAxis);\n            this._updateNavigator(this.chart.navigator, highchartsConfig);\n            this._updateMainSeries(this._getMainSeries(), highchartsConfig);\n            this._updateVolumeSeries(volumeVisibilityChanged, highchartsConfig);\n\n            if (tradesVisibilityChanged) {\n                this.tradesVisibility.showTrades = settings.switchers.showTrades;\n\n                if (this.tradesVisibility.showTrades) {\n                    this._initTradingPlotLines();\n                } else {\n                    this._destroyTradingPlotLines();\n                }\n            } else {\n                this._updatePlotLines(settings);\n            }\n\n            this._updateChartDrawings(settings);\n        },\n\n        _updateChart: function _updateChart(chart, highchartsSettings) {\n            // update background\n            chart.update({ chart: highchartsSettings.chart }, false);\n        },\n\n        _updateAxes: function _updateAxes(axes) {\n            var _this11 = this;\n\n            // update foreground and grid\n            _.each(axes, function (axis) {\n                if (axis.options.id === undefined || axis.options.id.indexOf('navigator') < 0) {\n                    axis.update(_this11.configurator.getAxisSettings(axis.isXAxis, axis.options.id === ChartsConfigurator.options.names.axis.volume), false);\n                }\n            });\n        },\n\n        _updateNavigator: function _updateNavigator(navigator, highchartsSettings) {\n            // update foreground and grid of navigator\n            navigator.update(highchartsSettings.navigator, false);\n        },\n\n        _updateMainSeries: function _updateMainSeries(series, highchartsConfig) {\n            // update current main series colors\n            series.update(highchartsConfig.plotOptions[this.configurator.type], false);\n        },\n\n        _updatePlotLines: function _updatePlotLines(settings) {\n            if (this.plotLines) {\n                if (this.plotLines.currentRate) {\n                    this.plotLines.currentRate.applySettings(settings);\n                }\n\n                _.each(this.plotLines.positions, function (line) {\n                    return line.applySettings(settings);\n                });\n                _.each(this.plotLines.orders, function (line) {\n                    return line.applySettings(settings);\n                });\n                _.each(this.plotLines.tc, function (line) {\n                    return line.applySettings(settings);\n                });\n            }\n        },\n\n        _updateChartDrawings: function _updateChartDrawings(settings) {\n            if (this.chartDrawings) {\n                this.chartDrawings.applySettings(settings);\n            }\n        },\n\n        _updateVolumeSeries: function _updateVolumeSeries(volumeVisibilityChanged, highchartsSettings) {\n            var _this12 = this;\n\n            // update visibility of volumes\n            if (volumeVisibilityChanged) {\n                if (this.configurator.hasVolume) {\n                    this.chart.addAxis(_.last(highchartsSettings.yAxis), false, false);\n                    this.chart.addSeries(_.last(highchartsSettings.series), false).setData(_.map(this.historicalData, function (candle) {\n                        return _this12._toIndicatorPoint(candle.timestamp, candle.volume);\n                    }, false));\n                } else {\n                    this.chart.get(ChartsConfigurator.options.names.series.volume).remove(false);\n                    this.chart.get(ChartsConfigurator.options.names.axis.volume).remove(false);\n                }\n            }\n\n            // update color of volume\n            if (this.configurator.hasVolume) {\n                this.chart.get(ChartsConfigurator.options.names.series.volume).update(highchartsSettings.plotOptions['column'], false);\n            }\n        },\n\n        _detectIndicatorsSeries: function _detectIndicatorsSeries() {\n            this.inicatorsSeries = _.filter(this.chart.series, function (series) {\n                return series.options.id !== this.main && series.options.id !== this.volume && series.options.id !== this.navigator;\n            }, ChartsConfigurator.options.names.series);\n        },\n\n        _changeCursor: function _changeCursor(type) {\n            if (!device.desktop() && type !== 'comparison_crosshair') {\n                return;\n            }\n\n            var xAxis = this._getMainXAxis();\n            var yAxis = this._getMainYAxis();\n\n            if (!xAxis || !yAxis) {\n                return;\n            }\n\n            if (type && type === this.configurator.currentCursor) {\n                return;\n            }\n\n            type = type || this.configurator.previousCursor || ChartsConfigurator.options.general.cursor;\n\n            this._setCursorTypeClassName(this.$el, type);\n            var config = this.configurator.createCursorConfig(type, this.period);\n\n            xAxis.update(config.xAxis, false);\n\n            _.each(this.chart.yAxis, function (axis) {\n                if (axis.options.id !== ChartsConfigurator.options.names.axis.navigatorY && axis.options.id !== ChartsConfigurator.options.names.axis.volume) {\n                    axis.update(config.yAxis, false);\n                }\n            });\n\n            if (type === 'drawing' || type === 'comparison_crosshair') {\n                this.trigger('cursor:unselect');\n            } else {\n                this.configurator.previousCursor = type;\n            }\n\n            this.configurator.currentCursor = type;\n\n            if (config.tooltip.enabled) {\n                this.configurator.enableTooltip();\n            } else {\n                this.configurator.disableTooltip();\n                this.chart.tooltip.hide(0);\n            }\n\n            this.chart.pointer.followTouchMove = !!config.tooltip.followTouchMove;\n\n            this.chart.update({ tooltip: config.tooltip }, false);\n            this._redrawChart();\n        },\n\n        enableDrawingsEditing: function enableDrawingsEditing() {\n            this.changeCursor('drawing');\n        },\n\n        disableDrawingsEditing: function disableDrawingsEditing() {\n            this.changeCursor();\n        },\n\n        _setCursorTypeClassName: function _setCursorTypeClassName(element, type) {\n            var prefix = 'cursor-';\n\n            _.each(_.filter(element[0].classList, function (_class) {\n                return _class.indexOf(prefix) === 0;\n            }), function (_class) {\n                element.removeClass(_class);\n            });\n            element.addClass(prefix + type);\n        },\n\n        initialize: function initialize() {\n            View.prototype.initialize.apply(this, arguments);\n        },\n\n        addComparisonInstrument: function addComparisonInstrument(comparisonInstrument, index) {\n            var _this13 = this;\n\n            var subscription = comparisonInstrument.getSubscription();\n\n            var color = void 0;\n            var series = void 0;\n            var unbindEvents = void 0;\n\n            for (var c in this.colors) {\n                if (this.colors[c]) {\n                    color = c;\n                    this.colors[c] = false;\n                    break;\n                }\n            }\n\n            function onRemove() {\n                unbindEvents();\n                series = null;\n                this.colors[color] = true;\n            }\n\n            subscription.on({\n                start: function start() {},\n                timeout: function timeout() {},\n                stop: function stop() {\n                    if (series) {\n                        series.remove();\n                        series = null;\n                    }\n                },\n                load: function load(candles) {\n                    var data = CandlesConverter.extendPoints(_this13.convertCandles(candles), subscription);\n\n                    series = _this13.chart.addSeries(_.extend(_this13.configurator._createSeriesConfig(data, 'ic-' + subscription.getInstrument().getSymbol(), subscription.getInstrument().getDisplayName()), { color: color }));\n\n                    unbindEvents = _this13.bindEvents(series, comparisonInstrument);\n\n                    var unbindRemoveSeriesEvent = Highcharts.addEvent(series, 'remove', function () {\n                        onRemove.call(_this13);\n                        unbindRemoveSeriesEvent();\n                    });\n\n                    var unbindDestroySeriesEvent = Highcharts.addEvent(series, 'destroy', function () {\n                        onRemove.call(_this13);\n                        unbindDestroySeriesEvent();\n                    });\n\n                    comparisonInstrument.on('remove', function () {\n                        subscription.stop();\n                    });\n                    comparisonInstrument.setColor(series.color);\n                    _this13.colors[color] = false;\n                },\n                update: function update(candles) {\n                    if (series) {\n                        _.each(candles, function (candle) {\n                            if (!candle.expansion) {\n                                _this13.addOrUpdatePoint(series, _this13.configurator.getTypeConverter()(candle, _this13._getLastPoint(), comparisonInstrument.getSubscription().getFirstCandle()));\n                            }\n                        });\n                    }\n                }\n            });\n        }\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(7)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/chart.view.js\n// module id = 2375\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/chart.view.js?");

/***/ }),

/***/ 2376:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var H = __webpack_require__(452);\n    var ChartsConfigurator = __webpack_require__(848);\n    var DrawingFactory = __webpack_require__(2286);\n    var DrawingSettingsBar = __webpack_require__(2385);\n\n    var drawingTracker = {\n        enabled: false,\n        handlers: []\n    };\n\n    var MouseEvent = {\n        DOWN: 'mousedown',\n        MOVE: 'mousemove',\n        UP: 'mouseup'\n    };\n\n    var KeyboardEvents = {\n        DELETE: 46,\n        ESC: 27\n    };\n\n    var ChartDrawing = function () {\n        _createClass(ChartDrawing, [{\n            key: 'chart',\n            get: function get() {\n                return this._chart;\n            }\n        }, {\n            key: 'drawings',\n            get: function get() {\n                return this._drawings;\n            },\n            set: function set(drawings) {\n                this._drawings = drawings;\n            }\n        }, {\n            key: 'options',\n            get: function get() {\n                return this._options;\n            },\n            set: function set(value) {\n                this._options = value;\n            }\n        }, {\n            key: 'mainGroup',\n            get: function get() {\n                return this._mainGroup;\n            }\n        }, {\n            key: 'backgroundRect',\n            get: function get() {\n                return this._backgroundRect;\n            }\n        }, {\n            key: 'drawingFactory',\n            get: function get() {\n                return this._drawingFactory;\n            }\n        }, {\n            key: 'onSave',\n            get: function get() {\n                return this._onSave;\n            },\n            set: function set(value) {\n                this._onSave = value;\n            }\n        }, {\n            key: 'start',\n            get: function get() {\n                return this._start;\n            }\n        }, {\n            key: 'yAxis',\n            get: function get() {\n                return this.chart.get(ChartsConfigurator.options.names.axis.mainY);\n            }\n        }, {\n            key: 'xAxis',\n            get: function get() {\n                return this.chart.get(ChartsConfigurator.options.names.axis.mainX);\n            }\n        }]);\n\n        function ChartDrawing(_ref) {\n            var chart = _ref.chart,\n                options = _ref.options,\n                start = _ref.start,\n                onSave = _ref.onSave,\n                forExport = _ref.forExport;\n\n            _classCallCheck(this, ChartDrawing);\n\n            this._chart = chart;\n            this._options = _.compact(options);\n            this._onSave = onSave;\n            this._start = start;\n            this._type = DrawingFactory.defaultType;\n\n            this.chart.chartDrawing = this;\n\n            this.initSVG();\n\n            this.externalHandlers = [];\n\n            if (!forExport) {\n                this.initDrawingSettings();\n            }\n        }\n\n        _createClass(ChartDrawing, [{\n            key: 'enableEditing',\n            value: function enableEditing() {\n                drawingTracker.enabled = true;\n                drawingTracker.moved = false;\n                H.fireEvent(this, 'enableEditing');\n            }\n        }, {\n            key: 'disableEditing',\n            value: function disableEditing() {\n                drawingTracker.enabled = false;\n                drawingTracker.moved = false;\n                H.fireEvent(this, 'disableEditing');\n            }\n        }, {\n            key: 'destroy',\n            value: function destroy() {\n                this.removeActiveDrawingHandler.remove();\n\n                this.setActiveDrawing(null);\n                _.each(this.externalHandlers, function (handler) {\n                    return handler();\n                });\n                _.each(this.drawings, function (drawing) {\n                    return drawing.destroy();\n                });\n                this.drawings = [];\n            }\n        }, {\n            key: 'startDrawing',\n            value: function startDrawing() {\n                var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DrawingFactory.defaultType;\n\n                this.enableEditing();\n                this._type = type;\n\n                this.bindEvents();\n            }\n        }, {\n            key: 'stopDrawing',\n            value: function stopDrawing() {\n                this.disableEditing();\n                this._type = null;\n\n                this.unbindEvents();\n            }\n        }, {\n            key: 'initSVG',\n            value: function initSVG() {\n                this.initBackgroundRect();\n                this.initClipRect();\n                this.initMainGroup();\n                this.initLoadedDrawings();\n                this.initGlobalEvents();\n            }\n        }, {\n            key: 'redraw',\n            value: function redraw() {\n                this.updateClipRect();\n                this.updateDrawings();\n            }\n        }, {\n            key: 'updateDrawings',\n            value: function updateDrawings() {\n                _.each(this.drawings, function (drawing) {\n                    return drawing.redraw();\n                });\n            }\n        }, {\n            key: 'initBackgroundRect',\n            value: function initBackgroundRect() {\n                this._backgroundRect = this.chart.renderer.rect(0, 0, 0, 0).attr({\n                    'class': 'drawings-background',\n                    'height': '100%',\n                    'pointer-events': 'visible',\n                    'width': '100%',\n                    'zIndex': 6\n                }).add();\n            }\n        }, {\n            key: 'initClipRect',\n            value: function initClipRect() {\n                var config = {\n                    x: this.yAxis.left,\n                    y: this.yAxis.top,\n                    width: this.yAxis.width,\n                    height: this.yAxis.height\n                };\n\n                this._clipRect = this.chart.renderer.clipRect(config);\n            }\n        }, {\n            key: 'updateClipRect',\n            value: function updateClipRect() {\n                this._clipRect.attr({\n                    x: this.yAxis.left,\n                    y: this.yAxis.top,\n                    width: this.yAxis.width,\n                    height: this.yAxis.height\n                });\n            }\n        }, {\n            key: 'initMainGroup',\n            value: function initMainGroup() {\n                this._mainGroup = this.chart.renderer.g('drawings-container').attr({\n                    zIndex: 7\n                }).add().clip(this._clipRect);\n            }\n        }, {\n            key: 'filterDrawings',\n            value: function filterDrawings(drawings, start, lessThanStart) {\n                if (!start) {\n                    return drawings;\n                }\n\n                return _.filter(drawings, function (drawing) {\n                    var length = _.filter(drawing.keyPoints, function (keyPoint) {\n                        return keyPoint.timestamp > start;\n                    }).length;\n\n                    //length === drawing.keyPoints.length\n                    return lessThanStart ? length === 0 : length !== 0;\n                });\n            }\n        }, {\n            key: 'initLoadedDrawings',\n            value: function initLoadedDrawings() {\n                var _this = this;\n\n                this._drawingFactory = new DrawingFactory(this.chart, this.mainGroup);\n                this.drawings = _.compact(_.map(this.filterDrawings(this.options, this.start), function (options) {\n                    return _this.drawingFactory.createDrawing(options);\n                }));\n            }\n        }, {\n            key: 'initGlobalEvents',\n            value: function initGlobalEvents() {\n                H.wrap(H.Pointer.prototype, 'drag', function (callback, event) {\n                    if (!drawingTracker.enabled) {\n                        callback.call(this, event);\n                    }\n                });\n\n                H.addEvent(this.chart, 'redraw', this.redraw.bind(this));\n\n                H.addEvent(this.backgroundRect.element, MouseEvent.DOWN, function (e) {\n                    if (e.currentTarget === e.target && !drawingTracker.enabled && drawingTracker.drawing) {\n                        drawingTracker.drawing.deactivate();\n                    }\n                });\n            }\n        }, {\n            key: 'setActiveDrawing',\n            value: function setActiveDrawing(drawing) {\n                if (drawingTracker.drawing === drawing) {\n                    return;\n                }\n\n                if (drawingTracker.drawing) {\n                    drawingTracker.drawing.deactivate(true);\n                    drawingTracker.drawing = null;\n                    this.drawingSettingsBar.hide();\n                }\n\n                if (drawing) {\n                    drawingTracker.drawing = drawing;\n                    drawingTracker.drawing.activate(true);\n                    this.drawingSettingsBar.resetPosition();\n                    this.drawingSettingsBar.show();\n                }\n            }\n        }, {\n            key: 'bindEvents',\n            value: function bindEvents() {\n                this.addEvent(MouseEvent.DOWN, this.mouseDownHandler.bind(this));\n            }\n        }, {\n            key: 'unbindEvents',\n            value: function unbindEvents() {\n                for (var event in MouseEvent) {\n                    ChartDrawing.removeEvent(MouseEvent[event]);\n                }\n            }\n        }, {\n            key: 'rebindEvents',\n            value: function rebindEvents() {\n                this.unbindEvents();\n                this.bindEvents();\n            }\n        }, {\n            key: 'mouseDownHandler',\n            value: function mouseDownHandler(e) {\n                this.enableEditing();\n\n                this.createDrawing();\n                this.updateDrawing(e);\n\n                if (drawingTracker.drawing.defaults.points > 1) {\n                    drawingTracker.currentPointIndex = 1;\n                }\n\n                this.addEvent(MouseEvent.MOVE, this.mouseMoveHandler.bind(this));\n                this.addEvent(MouseEvent.UP, this.mouseUpHandler.bind(this));\n            }\n        }, {\n            key: 'mouseMoveHandler',\n            value: function mouseMoveHandler(e) {\n                drawingTracker.moved = true;\n                this.updateDrawing(e);\n            }\n        }, {\n            key: 'mouseUpHandler',\n            value: function mouseUpHandler(e) {\n                if (!drawingTracker.moved) {\n                    drawingTracker.currentPointIndex = 0;\n                }\n\n                this.updateDrawing(e);\n\n                drawingTracker.currentPointIndex++;\n\n                if (drawingTracker.drawing.defaults.points === drawingTracker.currentPointIndex) {\n\n                    drawingTracker.drawing.addEvents();\n                    this.rebindEvents();\n\n                    if (drawingTracker.drawing.isFinished(e)) {\n                        this.finalizeDrawing(true);\n                    } else {\n                        this.unbindEvents();\n                    }\n                } else {\n                    ChartDrawing.removeEvent(MouseEvent.DOWN);\n                }\n            }\n        }, {\n            key: 'finalizeDrawing',\n            value: function finalizeDrawing(save) {\n                this.disableEditing();\n                this.rebindEvents();\n\n                if (save) {\n                    this.saveDrawing();\n                }\n            }\n        }, {\n            key: 'createDrawing',\n            value: function createDrawing() {\n                var options = {\n                    type: this._type,\n                    id: this._type + '_' + _.now()\n                };\n\n                var drawing = this.drawingFactory.createDrawing(options);\n\n                drawing.notSaved = true;\n                drawing.init(true);\n                drawing.activate();\n                drawingTracker.currentPointIndex = 0;\n            }\n        }, {\n            key: 'updateDrawing',\n            value: function updateDrawing(event) {\n                drawingTracker.drawing.update(drawingTracker.currentPointIndex, event.chartX, event.chartY);\n            }\n        }, {\n            key: 'saveDrawing',\n            value: function saveDrawing(onEdit) {\n                if (onEdit && drawingTracker.drawing.notSaved) {\n                    return;\n                }\n\n                if (drawingTracker.drawing && drawingTracker.drawing.notSaved) {\n                    this.drawings.push(drawingTracker.drawing);\n                    delete drawingTracker.drawing.notSaved;\n                    this.drawingSettingsBar.render();\n                }\n\n                this.options = _.uniq(_.pluck(this.drawings, 'options').concat(this.filterDrawings(this.options, this.start, true)), 'id');\n                _.isFunction(this.onSave) && this.onSave(this.options);\n            }\n        }, {\n            key: 'clearDrawings',\n            value: function clearDrawings() {\n                this.setActiveDrawing(null);\n                _.each(this.drawings, function (drawing) {\n                    return drawing.destroy();\n                });\n                this.drawings = [];\n                this.options = [];\n                _.isFunction(this.onSave) && this.onSave(this.options);\n            }\n        }, {\n            key: 'addEvent',\n            value: function addEvent(type, fn) {\n                var _this2 = this;\n\n                ChartDrawing.removeEvent(type);\n                drawingTracker.handlers[type] = {\n                    remove: H.addEvent(this.chart.container, type, function (event) {\n                        event = _this2.normalize(event);\n\n                        if (_this2.isInsideAxis(event)) {\n                            fn(event);\n                        }\n                    })\n                };\n            }\n        }, {\n            key: 'normalize',\n            value: function normalize(e) {\n                e = e || window.event;\n\n                return e.chartX && e.chartY ? e : this.chart.pointer.normalize(e);\n            }\n        }, {\n            key: 'isInsideAxis',\n            value: function isInsideAxis(e) {\n                return e.chartX >= this.yAxis.left && e.chartY >= this.yAxis.top && e.chartX <= this.yAxis.left + this.yAxis.width && e.chartY <= this.yAxis.top + this.yAxis.height;\n            }\n        }, {\n            key: 'removeActiveDrawing',\n            value: function removeActiveDrawing() {\n                if (drawingTracker.drawing) {\n                    var drawing = drawingTracker.drawing;\n\n                    drawing.deactivate();\n                    drawing.destroy();\n                    var index = this.drawings.indexOf(drawing);\n\n                    if (index >= 0) {\n                        this.drawings.splice(index, 1);\n                        this.saveDrawing();\n                    }\n                }\n            }\n        }, {\n            key: 'getActiveDrawing',\n            value: function getActiveDrawing() {\n                return drawingTracker.drawing;\n            }\n        }, {\n            key: 'addKeyboardListener',\n            value: function addKeyboardListener(code, fn, useCapture) {\n                var handler = function handler(e) {\n                    e = e || window.event;\n                    e.keyCode === code && fn();\n                };\n\n                document.addEventListener('keydown', handler, useCapture || false);\n\n                return {\n                    remove: function remove() {\n                        return document.removeEventListener('keydown', handler);\n                    }\n                };\n            }\n        }, {\n            key: 'initDrawingSettings',\n            value: function initDrawingSettings() {\n                this.removeActiveDrawingHandler = this.addKeyboardListener(KeyboardEvents.DELETE, this.removeActiveDrawing.bind(this));\n                this.drawingSettingsBar = new DrawingSettingsBar({\n                    chartDrawing: this,\n                    parent: this.chart.container\n                });\n                this.drawingSettingsBar.hide();\n            }\n        }, {\n            key: 'isDrawingEditingEnabled',\n            value: function isDrawingEditingEnabled() {\n                return drawingTracker.enabled;\n            }\n        }, {\n            key: 'applySettings',\n            value: function applySettings(settings) {\n                _.each(this.drawings, function (drawing) {\n                    return drawing.applySettings && drawing.applySettings(settings);\n                });\n            }\n        }], [{\n            key: 'removeEvent',\n            value: function removeEvent(type) {\n                if (drawingTracker.handlers[type]) {\n                    if (_.isFunction(drawingTracker.handlers[type].remove)) {\n                        drawingTracker.handlers[type].remove();\n                        delete drawingTracker.handlers[type];\n                    } else {\n                        throw new Error('Handler for \"' + type + '\" is not a function');\n                    }\n                } else {\n                    console.log('Not found handler for : ' + type);\n                }\n            }\n        }]);\n\n        return ChartDrawing;\n    }();\n\n    module.exports = ChartDrawing;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/drawings/chart.drawing.js\n// module id = 2376\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/drawings/chart.drawing.js?");

/***/ }),

/***/ 2377:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var Drawing = __webpack_require__(2121);\n\n    // \"#2e86ab\"\n    // \"#f102f1\"\n\n    var fxclientOptions = {\n        id: null,\n        keyPoints: [],\n        type: 'line',\n        properties: {\n            line: { 'lineColor': '#2e86ab', 'lineWidth': 1, 'lineDash': [] },\n            activeLine: { 'lineColor': '#ffc800', 'lineWidth': 1, 'lineDash': [] },\n            labels: { 'showPrice': false, 'pricePlacement': 'right' },\n            defaultKeyPoint: {\n                'shape': 'square',\n                'side': 6,\n                'lineWidth': 0,\n                'fillStyle': '#2e86ab',\n                'lineColor': '#2e86ab',\n                'opacity': 1\n            },\n            activeKeyPoint: {\n                'shape': 'square',\n                'side': 6,\n                'lineWidth': 0,\n                'fillStyle': '#ffc800',\n                'lineColor': '#ffc800',\n                'opacity': 1\n            },\n            addingKeyPoint: { 'shape': 'none' }\n        },\n        data: {}\n    };\n\n    var Line = function (_Drawing) {\n        _inherits(Line, _Drawing);\n\n        function Line(chart, parent, options) {\n            _classCallCheck(this, Line);\n\n            return _possibleConstructorReturn(this, (Line.__proto__ || Object.getPrototypeOf(Line)).call(this, chart, parent, options));\n        }\n\n        _createClass(Line, [{\n            key: '_init',\n            value: function _init() {\n                this.$container = this.createG();\n                this.$element = this.createLine();\n                this.$hoverElement = this.createLineHover();\n                this.$points = this.createPoints();\n            }\n        }, {\n            key: '_update',\n            value: function _update(pointIndex, point) {}\n        }, {\n            key: '_move',\n            value: function _move(finished, dx, dy, point) {}\n        }, {\n            key: '_render',\n            value: function _render(pointsLength) {\n                var d = void 0;\n\n                switch (pointsLength) {\n                    case 1:\n                        break;\n                    case 2:\n                        d = this.initPath();\n                        this.$element.attr({ d: d });\n                        this.$hoverElement.attr({ d: d });\n                        break;\n                    default:\n                        console.error('Wrong number of points for ' + this.options.type + ': ', pointsLength);\n                }\n            }\n        }, {\n            key: '_destroy',\n            value: function _destroy() {\n                this.$container.destroy();\n            }\n        }, {\n            key: 'initPath',\n            value: function initPath() {\n                return ['M', this.$points[0].x, this.$points[0].y, 'L', this.$points[1].x, this.$points[1].y];\n            }\n        }, {\n            key: '_setColor',\n            value: function _setColor(color) {\n                this.$element.attr({ stroke: color });\n                _.each(this.$points, function (point) {\n                    return point.setColor(color);\n                });\n            }\n        }, {\n            key: 'defaults',\n            get: function get() {\n                return _.extend(_get(Line.prototype.__proto__ || Object.getPrototypeOf(Line.prototype), 'defaults', this), {\n                    points: 2\n                });\n            }\n        }, {\n            key: 'fxclientOptions',\n            get: function get() {\n                return fxclientOptions;\n            }\n        }]);\n\n        return Line;\n    }(Drawing);\n\n    module.exports = Line;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/drawings/models/line.js\n// module id = 2377\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/drawings/models/line.js?");

/***/ }),

/***/ 2378:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var Drawing = __webpack_require__(2121);\n\n    var fxclientOptions = {\n        id: null,\n        keyPoints: [],\n        type: 'horizontal_line',\n        properties: {\n            line: { 'lineColor': '#2e86ab', 'lineWidth': 1, 'lineDash': [] },\n            activeLine: { 'lineColor': '#ffc800', 'lineWidth': 1, 'lineDash': [] },\n            defaultKeyPoint: { 'shape': 'none' },\n            activeKeyPoint: { 'shape': 'none' },\n            addingKeyPoint: { 'shape': 'none' },\n            style: { 'extendLeft': true, 'extendRight': true }\n        },\n        data: {}\n    };\n\n    var HorizontalLine = function (_Drawing) {\n        _inherits(HorizontalLine, _Drawing);\n\n        function HorizontalLine(chart, parent, options) {\n            _classCallCheck(this, HorizontalLine);\n\n            return _possibleConstructorReturn(this, (HorizontalLine.__proto__ || Object.getPrototypeOf(HorizontalLine)).call(this, chart, parent, options));\n        }\n\n        _createClass(HorizontalLine, [{\n            key: '_init',\n            value: function _init() {\n                this.$container = this.createG();\n                this.$points = this.createPoints();\n                this.$element = this.createLine();\n                this.$hoverElement = this.createLineHover();\n            }\n        }, {\n            key: '_update',\n            value: function _update(pointIndex, point) {}\n        }, {\n            key: '_move',\n            value: function _move(finished, dx, dy, point) {}\n        }, {\n            key: '_render',\n            value: function _render() {\n                switch (this.options.keyPoints.length) {\n                    case 1:\n                        {\n                            var d = this.initPath();\n\n                            this.$element.attr({ d: d });\n                            this.$hoverElement.attr({ d: d });\n                            break;\n                        }\n\n                    default:\n                        console.error('Wrong number of points for ' + this.options.type + ': ', this.options.keyPoints.length);\n                }\n            }\n        }, {\n            key: '_destroy',\n            value: function _destroy() {\n                this.$container.destroy();\n            }\n        }, {\n            key: 'initPath',\n            value: function initPath() {\n                return ['M', 0, this.$points[0].y, 'L', this.yAxis.width, this.$points[0].y];\n            }\n        }, {\n            key: '_setColor',\n            value: function _setColor(color) {\n                this.$element.attr({ stroke: color });\n                _.each(this.$points, function (point) {\n                    return point.setColor(color);\n                });\n            }\n        }, {\n            key: 'defaults',\n            get: function get() {\n                return _.extend(_get(HorizontalLine.prototype.__proto__ || Object.getPrototypeOf(HorizontalLine.prototype), 'defaults', this), {\n                    points: 1\n                });\n            }\n        }, {\n            key: 'fxclientOptions',\n            get: function get() {\n                return fxclientOptions;\n            }\n        }]);\n\n        return HorizontalLine;\n    }(Drawing);\n\n    module.exports = HorizontalLine;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/drawings/models/horizontal.line.js\n// module id = 2378\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/drawings/models/horizontal.line.js?");

/***/ }),

/***/ 2379:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var Drawing = __webpack_require__(2121);\n\n    var fxclientOptions = {\n        id: null,\n        keyPoints: [],\n        type: 'vertical_line',\n        properties: {\n            line: { 'lineColor': '#2e86ab', 'lineWidth': 1, 'lineDash': [] },\n            activeLine: { 'lineColor': '#ffc800', 'lineWidth': 1, 'lineDash': [] },\n            defaultKeyPoint: { 'shape': 'none' },\n            activeKeyPoint: { 'shape': 'none' },\n            addingKeyPoint: { 'shape': 'none' }\n        },\n        data: {}\n    };\n\n    var VerticalLine = function (_Drawing) {\n        _inherits(VerticalLine, _Drawing);\n\n        function VerticalLine(chart, parent, options) {\n            _classCallCheck(this, VerticalLine);\n\n            return _possibleConstructorReturn(this, (VerticalLine.__proto__ || Object.getPrototypeOf(VerticalLine)).call(this, chart, parent, options));\n        }\n\n        _createClass(VerticalLine, [{\n            key: '_init',\n            value: function _init() {\n                this.$container = this.createG();\n                this.$points = this.createPoints();\n                this.$element = this.createLine();\n                this.$hoverElement = this.createLineHover();\n            }\n        }, {\n            key: '_update',\n            value: function _update(pointIndex, point) {}\n        }, {\n            key: '_move',\n            value: function _move(finished, dx, dy, point) {}\n        }, {\n            key: '_render',\n            value: function _render(pointsLength) {\n                switch (pointsLength) {\n                    case 1:\n                        {\n                            var d = this.initPath();\n\n                            this.$element.attr({ d: d });\n                            this.$hoverElement.attr({ d: d });\n                            break;\n                        }\n\n                    default:\n                        console.error('Wrong number of points for ' + this.options.type + ': ', pointsLength);\n                }\n            }\n        }, {\n            key: '_destroy',\n            value: function _destroy() {\n                this.$container.destroy();\n            }\n        }, {\n            key: 'initPath',\n            value: function initPath() {\n                return ['M', this.$points[0].x, 0, 'L', this.$points[0].x, this.yAxis.height];\n            }\n        }, {\n            key: '_setColor',\n            value: function _setColor(color) {\n                this.$element.attr({ stroke: color });\n                _.each(this.$points, function (point) {\n                    return point.setColor(color);\n                });\n            }\n        }, {\n            key: 'defaults',\n            get: function get() {\n                return _.extend(_get(VerticalLine.prototype.__proto__ || Object.getPrototypeOf(VerticalLine.prototype), 'defaults', this), {\n                    points: 1\n                });\n            }\n        }, {\n            key: 'fxclientOptions',\n            get: function get() {\n                return fxclientOptions;\n            }\n        }]);\n\n        return VerticalLine;\n    }(Drawing);\n\n    module.exports = VerticalLine;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/drawings/models/vertical.line.js\n// module id = 2379\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/drawings/models/vertical.line.js?");

/***/ }),

/***/ 2380:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var Drawing = __webpack_require__(2121);\n    var Point = __webpack_require__(2233);\n\n    var fxclientOptions = {\n        'id': null,\n        'keyPoints': [],\n        'type': 'trend_channel',\n        'properties': {\n            'line': { 'lineColor': '#2e86ab', 'lineWidth': 1, 'lineDash': [] },\n            'activeLine': { 'lineColor': '#ffc800', 'lineWidth': 1, 'lineDash': [] },\n            'defaultKeyPoint': {\n                'shape': 'square',\n                'side': 6,\n                'lineWidth': 0,\n                'fillStyle': '#2e86ab',\n                'lineColor': '#2e86ab',\n                'opacity': 1\n            },\n            'activeKeyPoint': {\n                'shape': 'square',\n                'side': 6,\n                'lineWidth': 0,\n                'fillStyle': '#ffc800',\n                'lineColor': '#ffc800',\n                'opacity': 1\n            },\n            'addingKeyPoint': { 'shape': 'none' }\n        },\n        'data': {}\n    };\n\n    var TrendChannel = function (_Drawing) {\n        _inherits(TrendChannel, _Drawing);\n\n        function TrendChannel(chart, parent, options) {\n            _classCallCheck(this, TrendChannel);\n\n            return _possibleConstructorReturn(this, (TrendChannel.__proto__ || Object.getPrototypeOf(TrendChannel)).call(this, chart, parent, options));\n        }\n\n        _createClass(TrendChannel, [{\n            key: '_init',\n            value: function _init() {\n                this.$container = this.createG();\n\n                this.$filledArea = this.createFilledArea();\n                this.$element = this.createLine();\n\n                this.$hoverElement = this.createLineHover();\n                this.$points = this.createPoints();\n\n                this.hidden = {};\n            }\n        }, {\n            key: '_update',\n            value: function _update(pointIndex, point) {\n                if (pointIndex === 2) {\n                    var p = TrendChannel.parallelogram(this.$points[0], this.$points[1], point);\n\n                    point.setPixels((p[2].x + p[3].x) / 2, (p[2].y + p[3].y) / 2);\n                }\n            }\n        }, {\n            key: '_move',\n            value: function _move(finished, dx, dy, point) {\n                if (!_.isUndefined(point)) {\n                    if (point.index !== 2 && this.hidden.height !== null) {\n                        var midX = (this.$points[0].x + this.$points[1].x) / 2;\n                        var midY = (this.$points[0].y + this.$points[1].y) / 2;\n\n                        midY += this.hidden.height;\n                        this.$points[2].setPixels(midX, midY);\n                        this.$points[2].convert(true);\n                    } else {\n                        var p = TrendChannel.parallelogram(this.$points[0], this.$points[1], this.$points[2]);\n\n                        this.hidden.height = p[3].y - p[0].y;\n                        this.$points[2].setPixels((p[2].x + p[3].x) / 2, (p[2].y + p[3].y) / 2);\n                    }\n                }\n            }\n        }, {\n            key: '_render',\n            value: function _render(pointsLength) {\n                var d = void 0;\n\n                switch (pointsLength) {\n                    case 1:\n                        break;\n                    case 2:\n                        d = ['M', this.$points[0].x, this.$points[0].y, 'L', this.$points[1].x, this.$points[1].y];\n                        this.$element.attr({ d: d });\n                        this.$hoverElement.attr({ d: d });\n                        break;\n\n                    case 3:\n                        {\n                            var p = TrendChannel.parallelogram(this.$points[0], this.$points[1], this.$points[2]);\n\n                            this.hidden.height = p[3].y - p[0].y;\n                            this.$filledArea.attr({\n                                d: ['M', p[0].x, p[0].y, 'L', p[1].x, p[1].y, 'L', p[2].x, p[2].y, 'L', p[3].x, p[3].y]\n                            });\n\n                            d = ['M', p[0].x, p[0].y, 'L', p[1].x, p[1].y, 'M', p[2].x, p[2].y, 'L', p[3].x, p[3].y];\n                            this.$element.attr({ d: d });\n                            this.$hoverElement.attr({ d: d });\n                            break;\n                        }\n\n                    default:\n                        console.error('Wrong number of points for ' + this.options.type + ': ', pointsLength);\n                }\n            }\n        }, {\n            key: '_destroy',\n            value: function _destroy() {\n                this.$container.destroy();\n            }\n        }, {\n            key: '_setColor',\n            value: function _setColor(color) {\n                this.$element.attr({ stroke: color });\n                this.$filledArea.attr({ fill: color });\n                _.each(this.$points, function (point) {\n                    return point.setColor(color);\n                });\n            }\n        }, {\n            key: 'defaults',\n            get: function get() {\n                return _.extend(_get(TrendChannel.prototype.__proto__ || Object.getPrototypeOf(TrendChannel.prototype), 'defaults', this), {\n                    points: 3\n                });\n            }\n        }, {\n            key: 'fxclientOptions',\n            get: function get() {\n                return fxclientOptions;\n            }\n        }], [{\n            key: 'parallelogram',\n            value: function parallelogram(a, b, c) {\n                var ab = new Point(b.x - a.x, b.y - a.y);\n                var ac = new Point(c.x - a.x, c.y - a.y);\n                var abc = ac.x * ab.y - ac.y * ab.x;\n\n                if (Math.abs(ab.x) < 0.1) {\n                    return [a, b, a, b];\n                }\n\n                var h = abc / ab.x;\n\n                return [a, b, new Point(b.x, b.y - h), new Point(a.x, a.y - h)];\n            }\n        }]);\n\n        return TrendChannel;\n    }(Drawing);\n\n    module.exports = TrendChannel;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/drawings/models/trend.channel.js\n// module id = 2380\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/drawings/models/trend.channel.js?");

/***/ }),

/***/ 2381:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var Drawing = __webpack_require__(2121);\n\n    var COEFFICIENTS = [0, 0.236, 0.382, 0.5, 0.618, 0.764, 1, 1.618, 2.618, 3.618, 4.236];\n    var LABEL_OFFSET = 2;\n\n    var fxclientOptions = {\n        id: null,\n        keyPoints: [],\n        type: 'line',\n        properties: {\n            line: { 'lineColor': '#2e86ab', 'lineWidth': 1, 'lineDash': [] },\n            activeLine: { 'lineColor': '#ffc800', 'lineWidth': 1, 'lineDash': [] },\n            labels: { 'showPrice': false, 'pricePlacement': 'right' },\n            defaultKeyPoint: {\n                'shape': 'square',\n                'side': 6,\n                'lineWidth': 0,\n                'fillStyle': '#2e86ab',\n                'lineColor': '#2e86ab',\n                'opacity': 1\n            },\n            activeKeyPoint: {\n                'shape': 'square',\n                'side': 6,\n                'lineWidth': 0,\n                'fillStyle': '#ffc800',\n                'lineColor': '#ffc800',\n                'opacity': 1\n            },\n            addingKeyPoint: { 'shape': 'none' }\n        },\n        data: {}\n    };\n\n    var FibonacciRetracement = function (_Drawing) {\n        _inherits(FibonacciRetracement, _Drawing);\n\n        function FibonacciRetracement(chart, parent, options) {\n            _classCallCheck(this, FibonacciRetracement);\n\n            var _this = _possibleConstructorReturn(this, (FibonacciRetracement.__proto__ || Object.getPrototypeOf(FibonacciRetracement)).call(this, chart, parent, options));\n\n            _this.precision = chart.options.tooltip.valueDecimals;\n            return _this;\n        }\n\n        _createClass(FibonacciRetracement, [{\n            key: '_init',\n            value: function _init() {\n                this.$container = this.createG();\n\n                this.$levels = [];\n\n                for (var i = 0; i < COEFFICIENTS.length; i++) {\n                    this.$levels.push({\n                        $levelLine: this.createLine(),\n                        $priceLabel: this.createLabel(),\n                        $coefLabel: this.createLabel()\n                    });\n                }\n\n                this.$element = this.createLine();\n                this.$hoverElement = this.createLineHover();\n                this.$points = this.createPoints();\n            }\n        }, {\n            key: '_update',\n            value: function _update(pointIndex, point) {}\n        }, {\n            key: '_move',\n            value: function _move(finished, dx, dy, point) {}\n        }, {\n            key: '_render',\n            value: function _render(pointsLength) {\n                var d = void 0;\n\n                switch (pointsLength) {\n                    case 1:\n                        break;\n\n                    case 2:\n                        {\n\n                            var startIndex = this.$points[0].x < this.$points[1].x ? 0 : 1;\n\n                            var endIndex = 1 - startIndex;\n\n                            var startPoint = this.$points[startIndex];\n                            var endPoint = this.$points[endIndex];\n\n                            if (startPoint === endPoint) {\n                                return;\n                            }\n\n                            startPoint.convert(true);\n                            endPoint.convert(true);\n\n                            var heightDelta = startPoint.y - endPoint.y;\n\n                            for (var index = 0; index < this.$levels.length; index++) {\n                                var level = this.$levels[index];\n\n                                var levelY = endPoint.y + heightDelta * COEFFICIENTS[index];\n                                var levelPrice = endPoint.value + (startPoint.value - endPoint.value) * COEFFICIENTS[index];\n\n                                level.$levelLine.attr({ d: ['M', startPoint.x, levelY, 'L', endPoint.x, levelY] });\n\n                                level.$priceLabel.attr({\n                                    text: levelPrice.toFixed(this.precision)\n                                });\n\n                                level.$priceLabel.attr({\n                                    x: endPoint.x - this.$levels[index].$priceLabel.width,\n                                    y: levelY + LABEL_OFFSET\n                                });\n\n                                level.$coefLabel.attr({\n                                    text: COEFFICIENTS[index].toFixed(3),\n                                    x: startPoint.x,\n                                    y: levelY + LABEL_OFFSET\n                                });\n                            }\n\n                            d = this.initPath();\n                            this.$element.attr({ d: d });\n                            this.$hoverElement.attr({ d: d });\n                            break;\n                        }\n\n                    default:\n                        console.error('Wrong number of points for ' + this.options.type + ': ', pointsLength);\n                }\n            }\n        }, {\n            key: '_destroy',\n            value: function _destroy() {\n                this.$container.destroy();\n            }\n        }, {\n            key: 'initPath',\n            value: function initPath() {\n                return ['M', this.$points[0].x, this.$points[0].y, 'L', this.$points[1].x, this.$points[1].y];\n            }\n        }, {\n            key: '_setColor',\n            value: function _setColor(color) {\n                this.$element.attr({ stroke: color });\n                _.each(this.$levels, function (level) {\n                    return level.$levelLine.attr({ stroke: color });\n                });\n                _.each(this.$points, function (point) {\n                    return point.setColor(color);\n                });\n            }\n        }, {\n            key: 'defaults',\n            get: function get() {\n                return _.extend(_get(FibonacciRetracement.prototype.__proto__ || Object.getPrototypeOf(FibonacciRetracement.prototype), 'defaults', this), {\n                    points: 2\n                });\n            }\n        }, {\n            key: 'fxclientOptions',\n            get: function get() {\n                return fxclientOptions;\n            }\n        }]);\n\n        return FibonacciRetracement;\n    }(Drawing);\n\n    module.exports = FibonacciRetracement;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/drawings/models/fibonacci.retracement.js\n// module id = 2381\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/drawings/models/fibonacci.retracement.js?");

/***/ }),

/***/ 2382:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_, $) {var __WEBPACK_AMD_DEFINE_RESULT__;var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var $ = __webpack_require__(7);\n    var Drawing = __webpack_require__(2121);\n    var DrawingSettingsPopup = __webpack_require__(2234);\n\n    // \"#2e86ab\"\n    // \"#f102f1\"\n\n    //keypoints - 1\n    var fxclientOptions = {\n        id: null,\n        keyPoints: [],\n        type: 'text',\n        properties: {\n            line: { 'lineColor': '#a3c4e3', 'lineWidth': 1, 'lineDash': [] },\n            activeLine: { 'lineColor': '#ffc800', 'lineWidth': 1, 'lineDash': [] },\n            labels: { 'showPrice': false, 'pricePlacement': 'right' },\n            defaultKeyPoint: {\n                'shape': 'square',\n                'side': 6,\n                'lineWidth': 0,\n                'fillStyle': '#2e86ab',\n                'lineColor': '#2e86ab',\n                'opacity': 1\n            },\n            activeKeyPoint: {\n                'shape': 'square',\n                'side': 6,\n                'lineWidth': 0,\n                'fillStyle': '#ffc800',\n                'lineColor': '#ffc800',\n                'opacity': 1\n            },\n            addingKeyPoint: { 'shape': 'none' },\n            text: {\n                'textFill': 'rgba(255, 255, 255, 1)',\n                'textBg': 'transparent',\n                'textSize': '11px',\n                'backgroundOffsetWidth': 7,\n                'backgroundOffsetHeight': 5\n            }\n        },\n        data: { text: '' }\n    };\n\n    var TextNote = function (_Drawing) {\n        _inherits(TextNote, _Drawing);\n\n        function TextNote(chart, parent, options) {\n            _classCallCheck(this, TextNote);\n\n            return _possibleConstructorReturn(this, (TextNote.__proto__ || Object.getPrototypeOf(TextNote)).call(this, chart, parent, options));\n        }\n\n        _createClass(TextNote, [{\n            key: '_init',\n            value: function _init() {\n                var _this2 = this;\n\n                this.$container = this.createG();\n                this.$element = this.createLine();\n                this.$hoverElement = this.createLineHover();\n                this.$text = this.createText({ text: this.prepareSvgText(this.options.data.text) });\n                this.$points = this.createPoints();\n\n                this.$text.on('mousedown', function (e) {\n                    e.stopImmediatePropagation();\n                    _this2.activate();\n                });\n                this.$text.on('dblclick', function (e) {\n                    e.stopImmediatePropagation();\n                    _this2.activate();\n                    // eslint-disable-next-line no-new\n                    new DrawingSettingsPopup(_this2);\n                });\n            }\n        }, {\n            key: '_update',\n            value: function _update(pointIndex, point) {}\n        }, {\n            key: '_move',\n            value: function _move(finished, dx, dy, point) {\n                if (this.$textNoteInput) {\n                    this.$textNoteInput.updatePosition(finished, dx, dy, point);\n                }\n            }\n        }, {\n            key: '_isFinished',\n            value: function _isFinished(event) {\n                this.waitForText(event);\n\n                return false;\n            }\n        }, {\n            key: 'prepareSvgText',\n            value: function prepareSvgText(text) {\n                return _.isString(text) ? text.replace(/\\n/g, '<br/>') : null;\n            }\n        }, {\n            key: 'waitForText',\n            value: function waitForText(event) {\n                if (!event) {\n                    // eslint-disable-next-line no-new\n                    new DrawingSettingsPopup(this);\n                } else {\n                    if (!this.$textNoteInput) {\n                        this.$textNoteInput = new TextNote.Input(event, this);\n                    }\n                }\n            }\n        }, {\n            key: 'save',\n            value: function save(data) {\n                if (_.isObject(data) || _.isString(data)) {\n                    if (_.isObject(data)) {\n                        this.options.properties.text.textSize = data['font-size'] + 'px';\n                        this.options.data.text = data['text-note'];\n                    } else if (_.isString(data)) {\n                        this.options.data.text = data;\n\n                        if (this.$textNoteInput) {\n                            this.$textNoteInput.remove();\n                            delete this.$textNoteInput;\n                        }\n                    } else {\n                        return;\n                    }\n\n                    if (_.isString(this.options.data.text) && !!this.options.data.text.trim()) {\n                        _get(TextNote.prototype.__proto__ || Object.getPrototypeOf(TextNote.prototype), 'finalize', this).call(this, true);\n\n                        this.$text.attr({\n                            text: this.prepareSvgText(this.options.data.text)\n                        }).css({\n                            'fontSize': parseInt(this.options.properties.text.textSize) + 'px'\n                        });\n                        this._render(this.$points.length);\n                    } else {\n                        this.remove();\n                        _get(TextNote.prototype.__proto__ || Object.getPrototypeOf(TextNote.prototype), 'finalize', this).call(this, false);\n                    }\n                } else {\n                    _get(TextNote.prototype.__proto__ || Object.getPrototypeOf(TextNote.prototype), 'save', this).call(this);\n                }\n            }\n        }, {\n            key: '_render',\n            value: function _render(pointsLength) {\n                switch (pointsLength) {\n                    case 1:\n                        {\n                            var startX = this.$points[0].x;\n\n                            if (this.$points[0].x + this.$text.getBBox().width > this.yAxis.width) {\n                                startX -= this.$text.getBBox().width;\n                            }\n\n                            var startY = this.$points[0].y;\n\n                            this.$text.attr({\n                                x: startX,\n                                y: startY\n                            });\n\n                            var d = ['M', startX, startY, 'h', this.$text.getBBox().width, 'v', this.$text.getBBox().height, 'h', -this.$text.getBBox().width, 'Z'];\n\n                            this.$hoverElement.attr({ d: d });\n\n                            break;\n                        }\n\n                    default:\n                        console.error('Wrong number of points for ' + this.options.type + ': ', pointsLength);\n                }\n            }\n        }, {\n            key: '_destroy',\n            value: function _destroy() {\n                if (this.$textNoteInput) {\n                    this.$textNoteInput.remove();\n                }\n\n                this.$container.destroy();\n            }\n        }, {\n            key: '_setColor',\n            value: function _setColor(color) {\n                this.$text.attr({ fill: this.getFillColor(color) });\n                this.$text.attr({ stroke: color });\n                _.each(this.$points, function (point) {\n                    return point.setColor(color);\n                });\n            }\n        }, {\n            key: 'getFillColor',\n            value: function getFillColor() {\n                var color = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getColor();\n\n                return color === '#a3c4e3' ? 'rgba(239, 247, 254)' : Drawing.lightenDarkenColor(color, 75);\n            }\n        }, {\n            key: 'defaults',\n            get: function get() {\n                return _.extend(_get(TextNote.prototype.__proto__ || Object.getPrototypeOf(TextNote.prototype), 'defaults', this), {\n                    points: 1\n                });\n            }\n        }, {\n            key: 'fxclientOptions',\n            get: function get() {\n                return fxclientOptions;\n            }\n        }, {\n            key: 'configurableOptions',\n            get: function get() {\n                return [{\n                    name: 'font-size',\n                    title: __('chart_drawings.settings.text_size'),\n                    type: 'select',\n                    options: ['10', '11', '12', '13', '14', '15', '16'],\n                    value: parseInt(this.options.properties.text.textSize)\n                }, {\n                    name: 'text-note',\n                    title: __('chart_drawings.settings.text_note'),\n                    type: 'textarea',\n                    value: this.options.data.text\n                }];\n            }\n        }]);\n\n        return TextNote;\n    }(Drawing);\n\n    TextNote.Input = function () {\n        function _class(event, textNote) {\n            var _this3 = this;\n\n            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : { text: '', fontSize: '11px' };\n\n            _classCallCheck(this, _class);\n\n            this.xAxis = textNote.xAxis;\n            this.position = _.pick(event, 'clientX', 'clientY', 'chartX', 'chartY');\n            this.onSaveCallback = textNote.save.bind(textNote);\n\n            this.$container = $('<div>', {\n                class: 'text-note-area'\n            }).css({\n                fontSize: options.fontSize,\n                top: this.position.clientY + 'px',\n                left: this.position.clientX + 'px'\n            }).appendTo(document.body);\n\n            this.$textarea = $('<textarea>', {\n                'maxlength': '100',\n                'white-space': 'pre'\n            }).val(options.text).appendTo(this.$container);\n\n            this.$textarea[0].focus();\n\n            this.updateSize();\n\n            this.$textarea.on('change drop keydown paste cut', this.onChange.bind(this));\n\n            setTimeout(function () {\n                var availableElements = [_this3.$textarea[0], _this3.$container[0], textNote.$points[0].$svg.element];\n\n                _this3.outsideClickHandler = function (e) {\n                    if (availableElements.indexOf(e.target) < 0) {\n                        _this3.applyText();\n                    }\n                };\n\n                document.body.addEventListener('mousedown', _this3.outsideClickHandler, true);\n            }, 1);\n        }\n\n        _createClass(_class, [{\n            key: 'updateSize',\n            value: function updateSize() {\n                this.$textarea.css('width', '0px');\n                this.$textarea.css('height', '0px');\n                var width = Math.max(50, this.$textarea[0].scrollWidth);\n\n                this.$textarea.css('width', width + 'px');\n                var height = Math.max(10, this.$textarea[0].scrollHeight);\n\n                this.$textarea.css('height', height + 'px');\n\n                return { width: width, height: height };\n            }\n        }, {\n            key: 'updatePosition',\n            value: function updatePosition(finished, dx, dy) {\n                this.$container.css({\n                    display: finished ? 'block' : 'none',\n                    top: parseInt(this.$container.css('top')) + dy + 'px',\n                    left: parseInt(this.$container.css('left')) + dx + 'px'\n                });\n\n                this.position.clientX += dx;\n                this.position.clientY += dy;\n                this.position.chartX += dx;\n                this.position.chartY += dy;\n\n                if (finished) {\n                    this.$textarea[0].focus();\n                    this.render();\n                }\n            }\n        }, {\n            key: 'applyText',\n            value: function applyText() {\n                this.onSaveCallback(this.$textarea.val());\n            }\n        }, {\n            key: 'remove',\n            value: function remove() {\n                document.body.removeEventListener('mousedown', this.outsideClickHandler, true);\n                this.$container.remove();\n                delete this.$container;\n            }\n        }, {\n            key: 'render',\n            value: function render() {\n                if (!this.$container) {\n                    return;\n                }\n\n                this.updateSize();\n                var width = parseInt(this.$container.css('width'));\n\n                this.$container.css('left', this.position.clientX - (this.position.chartX + width > this.xAxis.width ? width : 0) + 'px');\n            }\n        }, {\n            key: 'onChange',\n            value: function onChange(changeEvent) {\n                var _this4 = this;\n\n                if (changeEvent && (changeEvent.ctrlKey && changeEvent.keyCode === 13 || changeEvent.keyCode === 27)) {\n                    this.applyText();\n                } else {\n                    setTimeout(function () {\n                        return _this4.render();\n                    }, 0);\n                }\n            }\n        }]);\n\n        return _class;\n    }();\n\n    module.exports = TextNote;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(7)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/drawings/models/text.note.js\n// module id = 2382\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/drawings/models/text.note.js?");

/***/ }),

/***/ 2383:
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"drawing-settings-panel\\\">\\n    <div class=\\\"drawing-settings-form\\\">\\n\\n    </div>\\n    <div class=\\\"drawing-settings-footer\\\">\\n        <div class=\\\"action-buttons\\\">\\n            <button class=\\\"btn btn-primary fn-save\\\"><%=__('actions.save')%></button>\\n            <button class=\\\"btn fn-cancel\\\"><%=__('actions.cancel')%></button>\\n        </div>\\n    </div>\\n</div>\\n\\n\";\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/drawings/settings/templates/drawing.settings.popup.view.html\n// module id = 2383\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/drawings/settings/templates/drawing.settings.popup.view.html?");

/***/ }),

/***/ 2384:
/***/ (function(module, exports, __webpack_require__) {

eval("var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar $ = __webpack_require__(7);\nvar Drawing = __webpack_require__(2121);\nvar _ = __webpack_require__(0);\nvar moment = __webpack_require__(6);\nvar DashStyles = __webpack_require__(2235);\n\nvar labelTemplate = _.template('\\n        <span class=\"ml-key\"><%= __(\\'chart_drawings.measurer.start\\')%> : </span><span class=\"ml-val\" style=\"font-weight: bold; text-anchor: end\"><%= start%></span>\\n        <br/>\\n        <span class=\"ml-key\"><%= __(\\'chart_drawings.measurer.end\\')%> : </span><span class=\"ml-val\" style=\"font-weight: bold; text-anchor: end\"><%= end%></span>\\n        <br/>\\n        <span class=\"ml-key\"><%= __(\\'chart_drawings.measurer.high\\')%> : </span><span class=\"ml-val\" style=\"font-weight: bold; text-anchor: end\"><%= high%></span>\\n        <br/>\\n        <span class=\"ml-key\"><%= __(\\'chart_drawings.measurer.low\\')%> : </span><span class=\"ml-val\" style=\"font-weight: bold; text-anchor: end\"><%= low%></span>\\n        <br/>\\n        <span class=\"ml-key\"><%= __(\\'chart_drawings.measurer.difference\\')%> : </span><span class=\"ml-val\" style=\"font-weight: bold; text-anchor: end\"><%= difference%></span>\\n        <br/>\\n        <span class=\"ml-key\"><%= __(\\'chart_drawings.measurer.candles\\')%> : </span><span class=\"ml-val\" style=\"font-weight: bold; text-anchor: end\"><%= candles%></span>\\n');\n\nvar INDEXES = {\n    TIMESTAMP: 0,\n    CANDLE_CLOSE: 4,\n    POINT_CLOSE: 1\n};\n\nvar fxclientOptions = {\n    id: null,\n    keyPoints: [],\n    type: 'measurer',\n    properties: {\n        line: { 'lineColor': '#2e86ab', 'lineWidth': 1, 'lineDash': [] },\n        activeLine: { 'lineColor': '#ffc800', 'lineWidth': 1, 'lineDash': [] },\n        labels: { 'showPrice': false, 'pricePlacement': 'right' },\n        defaultKeyPoint: {\n            'shape': 'square',\n            'side': 6,\n            'lineWidth': 0,\n            'fillStyle': '#2e86ab',\n            'lineColor': '#2e86ab',\n            'opacity': 1\n        },\n        activeKeyPoint: {\n            'shape': 'square',\n            'side': 6,\n            'lineWidth': 0,\n            'fillStyle': '#ffc800',\n            'lineColor': '#ffc800',\n            'opacity': 1\n        },\n        addingKeyPoint: { 'shape': 'none' }\n    },\n    data: {}\n};\n\nvar CALLOUT_OFFSET = 7;\n\nvar Measurer = function (_Drawing) {\n    _inherits(Measurer, _Drawing);\n\n    function Measurer(chart, parent, options) {\n        _classCallCheck(this, Measurer);\n\n        var _this = _possibleConstructorReturn(this, (Measurer.__proto__ || Object.getPrototypeOf(Measurer)).call(this, chart, parent, options));\n\n        _this.precision = chart.options.tooltip.valueDecimals;\n        return _this;\n    }\n\n    _createClass(Measurer, [{\n        key: '_init',\n        value: function _init() {\n            this.$container = this.createG();\n\n            this.$filledArea = this.createFilledArea();\n            this.$filledArea.attr({\n                'fill-opacity': '0.1',\n                'stroke-width': 1,\n                'stroke': this.getColor(),\n                'dashstyle': DashStyles.DASH\n            });\n            this.$label = this.createLabel({\n                shape: 'callout',\n                className: 'measurer-label'\n            }).attr({\n                align: 'left',\n                fill: this.chartDrawing.chart.options.chart.backgroundColor,\n                stroke: '#919292',\n                'stroke-width': 1,\n                'padding': 4,\n                r: 0\n            }).css({\n                color: this.chartDrawing.chart.options.xAxis[0].labels.style.color\n            });\n\n            this.$element = this.createLine();\n            this.$gridElement = this.createLine().attr({\n                'dashstyle': DashStyles.DOT\n            });\n            this.$hoverElement = this.createLineHover();\n            this.$points = this.createPoints();\n        }\n    }, {\n        key: '_update',\n        value: function _update(pointIndex, point) {}\n    }, {\n        key: '_move',\n        value: function _move(finished, dx, dy, point) {}\n    }, {\n        key: '_render',\n        value: function _render(pointsLength) {\n            switch (pointsLength) {\n                case 1:\n                    break;\n\n                case 2:\n                    {\n                        var startIndex = this.$points[0].x < this.$points[1].x ? 0 : 1;\n                        var endIndex = 1 - startIndex;\n                        var startPoint = this.$points[startIndex];\n                        var endPoint = this.$points[endIndex];\n\n                        if (startPoint === endPoint) {\n                            return;\n                        }\n\n                        startPoint.convert(true);\n                        endPoint.convert(true);\n\n                        var difference = startPoint.value - endPoint.value;\n                        var percentage = 100 * difference / startPoint.value;\n                        var candles = this.getCandlesCount(startPoint, endPoint);\n\n                        var _getHighAndLow = this.getHighAndLow(startPoint, endPoint),\n                            high = _getHighAndLow.high,\n                            low = _getHighAndLow.low;\n\n                        this.$label.attr({\n                            text: labelTemplate({\n                                start: moment(startPoint.timestamp).utc().format('DD/MM/YYYY HH:mm') + ' : ' + startPoint.value.toFixed(this.precision),\n                                end: moment(endPoint.timestamp).utc().format('DD/MM/YYYY HH:mm') + ' : ' + endPoint.value.toFixed(this.precision),\n                                high: moment(high.timestamp).utc().format('DD/MM/YYYY HH:mm') + ' : ' + high.value.toFixed(this.precision),\n                                low: moment(low.timestamp).utc().format('DD/MM/YYYY HH:mm') + ' : ' + low.value.toFixed(this.precision),\n                                difference: difference.toFixed(this.precision) + ' (' + percentage.toFixed(2) + '%)',\n                                candles: candles\n                            })\n                        });\n\n                        //Trick for correct Table view\n                        var width = this.$label.text.element.getBBox().width;\n\n                        _.each($(this.$label.element).find('.ml-val'), function (tspan) {\n                            if (!tspan.getAttribute('x')) {\n                                tspan.setAttribute('x', width);\n                                tspan.removeAttribute('dx');\n                            }\n                        });\n\n                        this.$label.attr(Measurer.getLabelPosition(this.$label, this.yAxis, startPoint, endPoint));\n\n                        this.$element.attr({ d: this.initPath() });\n                        this.$filledArea.attr({\n                            d: ['M', startPoint.x, startPoint.y, 'L', endPoint.x, startPoint.y, 'L', endPoint.x, endPoint.y, 'L', startPoint.x, endPoint.y, 'Z']\n                        });\n\n                        this.$gridElement.attr({\n                            d: ['M', 0, startPoint.y, 'L', startPoint.x, startPoint.y, 'L', startPoint.x, 0, 'M', endPoint.x, 0, 'L', endPoint.x, startPoint.y, 'L', this.yAxis.width, startPoint.y, 'M', this.yAxis.width, endPoint.y, 'L', endPoint.x, endPoint.y, 'L', endPoint.x, this.yAxis.height, 'M', startPoint.x, this.yAxis.height, 'L', startPoint.x, endPoint.y, 'L', 0, endPoint.y, 'M', (startPoint.x + endPoint.x) / 2, startPoint.y, 'L', (startPoint.x + endPoint.x) / 2, endPoint.y, 'M', startPoint.x, (startPoint.y + endPoint.y) / 2, 'L', endPoint.x, (startPoint.y + endPoint.y) / 2]\n                        });\n                        this.$hoverElement.attr({\n                            d: ['M', startPoint.x, startPoint.y, 'L', endPoint.x, startPoint.y, 'L', endPoint.x, endPoint.y, 'L', startPoint.x, endPoint.y, 'L', startPoint.x, startPoint.y, 'L', endPoint.x, startPoint.y, 'M', startPoint.x, startPoint.y, 'L', endPoint.x, endPoint.y]\n                        });\n                        break;\n                    }\n\n                default:\n                    console.error('Wrong number of points for ' + this.options.type + ': ', pointsLength);\n            }\n        }\n    }, {\n        key: 'getCandlesCount',\n        value: function getCandlesCount(start, end) {\n            var xData = _.union.apply(this, _.map(this.xAxis.series, function (s) {\n                return s.xData;\n            }));\n\n            return _.sortedIndex(xData, end.timestamp) - _.sortedIndex(xData, start.timestamp);\n        }\n    }, {\n        key: '_destroy',\n        value: function _destroy() {\n            this.$container.destroy();\n        }\n    }, {\n        key: 'initPath',\n        value: function initPath() {\n            return ['M', this.$points[0].x, this.$points[0].y, 'L', this.$points[1].x, this.$points[1].y];\n        }\n    }, {\n        key: '_setColor',\n        value: function _setColor(color) {\n            this.$element.attr({ stroke: color });\n            this.$filledArea.attr({ fill: color, stroke: color });\n            this.$gridElement.attr({ stroke: color });\n            _.each(this.$points, function (point) {\n                return point.setColor(color);\n            });\n        }\n    }, {\n        key: 'applySettings',\n        value: function applySettings(settings) {\n            if (this.$label) {\n                this.$label.attr({\n                    fill: settings.colors.common.background\n                }).css({\n                    color: settings.colors.common.foreground\n                });\n            }\n        }\n    }, {\n        key: 'getHighAndLow',\n        value: function getHighAndLow(start, end) {\n            var high = { value: 0, timestamp: null };\n            var low = { value: 10000000000, timestamp: null };\n\n            _.each(this.xAxis.chart.series[0].options.data, function (candle) {\n                var timestamp = candle[INDEXES.TIMESTAMP];\n\n                if (timestamp >= start.timestamp && timestamp <= end.timestamp) {\n                    var value = candle[INDEXES.CANDLE_CLOSE] || candle[INDEXES.POINT_CLOSE];\n\n                    if (value > high.value) {\n                        high.value = value;\n                        high.timestamp = timestamp;\n                    }\n\n                    if (value < low.value) {\n                        low.value = value;\n                        low.timestamp = timestamp;\n                    }\n                }\n            });\n\n            return { high: high, low: low };\n        }\n    }, {\n        key: 'fxclientOptions',\n        get: function get() {\n            return fxclientOptions;\n        }\n    }, {\n        key: 'defaults',\n        get: function get() {\n            return _.extend(_get(Measurer.prototype.__proto__ || Object.getPrototypeOf(Measurer.prototype), 'defaults', this), {\n                points: 2\n            });\n        }\n    }], [{\n        key: 'getLabelPosition',\n        value: function getLabelPosition(_ref, _ref2, startPoint, endPoint) {\n            var labelHeight = _ref.height,\n                labelWidth = _ref.width;\n            var axisHeight = _ref2.height,\n                axisWidth = _ref2.width;\n\n            var coords = {\n                min: {\n                    x: Math.min(startPoint.x, endPoint.x),\n                    y: Math.min(startPoint.y, endPoint.y)\n                },\n                max: {\n                    x: Math.max(startPoint.x, endPoint.x),\n                    y: Math.max(startPoint.y, endPoint.y)\n                },\n                middle: {\n                    x: (startPoint.x + endPoint.x) / 2,\n                    y: (startPoint.y + endPoint.y) / 2\n                }\n            };\n\n            var bounds = {\n                top: coords.min.y - CALLOUT_OFFSET - labelHeight,\n                bottom: coords.max.y + CALLOUT_OFFSET + labelHeight,\n                left: coords.min.x - CALLOUT_OFFSET - labelWidth,\n                right: coords.max.x + CALLOUT_OFFSET + labelWidth\n            };\n\n            switch (true) {\n                case axisHeight > bounds.bottom:\n                    return {\n                        x: coords.middle.x - labelWidth / 2,\n                        y: coords.max.y + CALLOUT_OFFSET,\n                        anchorX: coords.middle.x,\n                        anchorY: coords.max.y\n                    };\n\n                case bounds.top > 0:\n                    return {\n                        x: coords.middle.x - labelWidth / 2,\n                        y: coords.min.y - labelHeight - CALLOUT_OFFSET,\n                        anchorX: coords.middle.x,\n                        anchorY: coords.min.y\n                    };\n\n                case bounds.left > 0:\n                    return {\n                        x: coords.min.x - labelWidth - CALLOUT_OFFSET,\n                        y: coords.middle.y - labelHeight / 2,\n                        anchorX: coords.min.x,\n                        anchorY: coords.middle.y\n                    };\n\n                case axisWidth > bounds.right:\n                    return {\n                        x: coords.max.x + CALLOUT_OFFSET,\n                        y: coords.middle.y - labelHeight / 2,\n                        anchorX: coords.max.x,\n                        anchorY: coords.middle.y\n                    };\n\n                default:\n                    return {\n                        x: -labelWidth,\n                        y: -labelHeight,\n                        anchorX: -CALLOUT_OFFSET,\n                        anchorY: -CALLOUT_OFFSET\n                    };\n            }\n        }\n    }]);\n\n    return Measurer;\n}(Drawing);\n\nmodule.exports = Measurer;\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/drawings/models/measurer.js\n// module id = 2384\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/drawings/models/measurer.js?");

/***/ }),

/***/ 2385:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_, $) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n\n    var $ = __webpack_require__(7);\n\n    var core = __webpack_require__(5);\n\n    var View = __webpack_require__(2141);\n\n    var ColorPickerView = __webpack_require__(290);\n\n    var DrawingSettingsPopup = __webpack_require__(2234);\n\n    module.exports = View.extend({\n\n        className: 'floating-drawing-settings',\n\n        template: _.template(__webpack_require__(2386)),\n\n        events: function events() {\n            return _.extend({}, _.result(View.prototype, 'events'), {\n                'click .fn-drawing-remove': 'removeDrawing',\n                'click .fn-drawing-settings': 'showDrawingSettings'\n            });\n        },\n\n        onMouseDown: function onMouseDown(e) {\n            View.prototype.onMouseDown.apply(this, arguments);\n            e.stopPropagation();\n        },\n\n        onMouseUp: function onMouseUp(e) {\n            View.prototype.onMouseUp.apply(this, arguments);\n        },\n\n        onMouseMove: function onMouseMove(e) {\n            View.prototype.onMouseMove.apply(this, arguments);\n\n            if (this.isDragReady) {\n                e.stopPropagation();\n            }\n        },\n\n        initialize: function initialize(options) {\n            this.chartDrawing = options.chartDrawing;\n            View.prototype.initialize.apply(this, arguments);\n            $(this.parent).append(this.el);\n        },\n\n        removeDrawing: function removeDrawing() {\n            this.chartDrawing.removeActiveDrawing();\n        },\n\n        showDrawingSettings: function showDrawingSettings() {\n            return new DrawingSettingsPopup(this.chartDrawing.getActiveDrawing());\n        },\n\n        hide: function hide() {\n            this.$el.css({ 'display': 'none' });\n        },\n\n        show: function show() {\n            this.render();\n            this.$el.css({ 'display': 'block' });\n        },\n\n        render: function render() {\n            this.options.settingsAvailable = false;\n            this.options.colorAvailable = false;\n\n            var activeDrawing = this.options.chartDrawing.getActiveDrawing();\n\n            if (activeDrawing && !activeDrawing.notSaved) {\n                this.options.settingsAvailable = activeDrawing.configurableOptions && activeDrawing.configurableOptions.length > 0;\n                this.options.colorAvailable = activeDrawing.getColor && activeDrawing.getColor();\n            }\n\n            View.prototype.render.call(this);\n\n            if (this.options.colorAvailable) {\n                var fieldInstance = new ColorPickerView({\n                    el: this.$el.find('.drawing-color')[0],\n                    value: activeDrawing.getColor(),\n                    container: this.$el\n                });\n\n                this.listenTo(fieldInstance, 'change', function (field, color) {\n                    return activeDrawing.setColor(color);\n                });\n            }\n        },\n\n        resetPosition: function resetPosition() {\n            this.$el.css({ 'top': '', 'bottom': '', 'left': '', 'right': '' });\n        }\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(7)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/drawings/settings/drawing.settings.bar.view.js\n// module id = 2385\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/drawings/settings/drawing.settings.bar.view.js?");

/***/ }),

/***/ 2386:
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"floating-drawing-settings-container\\\">\\n    <div class=\\\"separator dots-separator\\\"></div>\\n    <% if (settingsAvailable) {%>\\n    <div class=\\\"icon icon-settings drawing-settings fn-drawing-settings\\\"></div>\\n    <%}%>\\n    <% if (colorAvailable) {%>\\n    <div class=\\\"drawing-color\\\"></div>\\n    <%}%>\\n    <div class=\\\"icon icon-recycle-blue drawing-remove fn-drawing-remove\\\"></div>\\n</div>\\n\";\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/drawings/settings/templates/drawing.settings.bar.view.html\n// module id = 2386\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/drawings/settings/templates/drawing.settings.bar.view.html?");

/***/ }),

/***/ 2387:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var BaseRateLine = __webpack_require__(2131);\n\n    var defaults = {\n        color: '#38424b',\n        dashstyle: BaseRateLine.DASH_STYLES.SOLID,\n        showRateLabel: true\n    };\n\n    var SimpleRateLine = function (_BaseRateLine) {\n        _inherits(SimpleRateLine, _BaseRateLine);\n\n        _createClass(SimpleRateLine, [{\n            key: 'defaults',\n            get: function get() {\n                return defaults;\n            }\n        }]);\n\n        function SimpleRateLine(chart, options) {\n            _classCallCheck(this, SimpleRateLine);\n\n            return _possibleConstructorReturn(this, (SimpleRateLine.__proto__ || Object.getPrototypeOf(SimpleRateLine)).call(this, chart, options));\n        }\n\n        return SimpleRateLine;\n    }(BaseRateLine);\n\n    module.exports = SimpleRateLine;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/rate-lines/simple.rate.line.js\n// module id = 2387\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/rate-lines/simple.rate.line.js?");

/***/ }),

/***/ 2388:
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__.p + \"images/64f113f33482.png\";\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/images/common/chart/rate-line-buttons/edit.png\n// module id = 2388\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/images/common/chart/rate-line-buttons/edit.png?");

/***/ }),

/***/ 2389:
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__.p + \"images/e55d8022bf98.png\";\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/images/common/chart/rate-line-buttons/close.png\n// module id = 2389\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/images/common/chart/rate-line-buttons/close.png?");

/***/ }),

/***/ 2390:
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__.p + \"images/673da6b1b7fa.png\";\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/images/common/chart/rate-line-buttons/tpsl.png\n// module id = 2390\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/images/common/chart/rate-line-buttons/tpsl.png?");

/***/ }),

/***/ 2391:
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__.p + \"images/abf4f0300532.png\";\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/images/common/chart/rate-line-buttons/tpsl-selected.png\n// module id = 2391\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/images/common/chart/rate-line-buttons/tpsl-selected.png?");

/***/ }),

/***/ 2392:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var BaseRateLine = __webpack_require__(2131);\n\n    var defaults = {\n        color: '#de67a7',\n        dashstyle: BaseRateLine.DASH_STYLES.SOLID,\n        showRateLabel: true\n    };\n\n    var CurrentRateLine = function (_BaseRateLine) {\n        _inherits(CurrentRateLine, _BaseRateLine);\n\n        _createClass(CurrentRateLine, [{\n            key: 'defaults',\n            get: function get() {\n                return defaults;\n            }\n        }]);\n\n        function CurrentRateLine(chart, options) {\n            _classCallCheck(this, CurrentRateLine);\n\n            return _possibleConstructorReturn(this, (CurrentRateLine.__proto__ || Object.getPrototypeOf(CurrentRateLine)).call(this, chart, options));\n        }\n\n        return CurrentRateLine;\n    }(BaseRateLine);\n\n    module.exports = CurrentRateLine;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/rate-lines/current.rate.line.js\n// module id = 2392\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/rate-lines/current.rate.line.js?");

/***/ }),

/***/ 2393:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var core = __webpack_require__(5);\n\n    var BaseRateLine = __webpack_require__(2131);\n    var PositionTakeProfitRateLine = __webpack_require__(2394);\n    var PositionStopLossRateLine = __webpack_require__(2395);\n\n    var Editor = __webpack_require__(2122);\n\n    var defaults = {\n        color: '#2e86ab',\n        dashstyle: BaseRateLine.DASH_STYLES.SOLID,\n        handleEvents: true,\n        infoLabelKey: 'chart.line.open',\n        infoLabelShowRate: true,\n        showCloseButton: true,\n        showEditButton: true,\n        showInfoLabel: true,\n        showProfitLossLabel: true,\n        showRateLabel: false,\n        showTpslButton: true\n    };\n\n    var PositionRateLine = function (_BaseRateLine) {\n        _inherits(PositionRateLine, _BaseRateLine);\n\n        _createClass(PositionRateLine, [{\n            key: 'defaults',\n            get: function get() {\n                return defaults;\n            }\n        }]);\n\n        function PositionRateLine(chart, options) {\n            _classCallCheck(this, PositionRateLine);\n\n            var _this = _possibleConstructorReturn(this, (PositionRateLine.__proto__ || Object.getPrototypeOf(PositionRateLine)).call(this, chart, options));\n\n            _this.updateTplsButtonVisibility();\n            _this.onInstrumentStatusChange();\n\n            _this.updateRate(_this.options.position.getCostBasis());\n            _this.updatePl(_this.options.position.getPLOpen() || 0);\n\n            _this.listenTo(_this.options.instrument, 'change:closable change:editable', _this.onInstrumentStatusChange.bind(_this));\n            _this.listenTo(_this.options.position, 'change:plOpen', function (model, value) {\n                return _this.updatePl(value);\n            });\n            _this.listenTo(_this.options.position, 'change:takeProfit', _this.onTakeProfitChange.bind(_this));\n            _this.listenTo(_this.options.position, 'change:stopLoss', _this.onStopLossChange.bind(_this));\n            _this.listenTo(_this.options.position, 'remove', _this.destroy.bind(_this));\n            return _this;\n        }\n\n        _createClass(PositionRateLine, [{\n            key: 'exportTo',\n            value: function exportTo(chart) {\n                _get(PositionRateLine.prototype.__proto__ || Object.getPrototypeOf(PositionRateLine.prototype), 'exportTo', this).call(this, chart);\n\n                if (this.tpRateLine) {\n                    this.tpRateLine.exportTo(chart);\n                }\n\n                if (this.slRateLine) {\n                    this.slRateLine.exportTo(chart);\n                }\n            }\n        }, {\n            key: 'updateTplsButtonVisibility',\n            value: function updateTplsButtonVisibility() {\n                if (!this.options.position.getTakeProfit() && !this.options.position.getStopLoss()) {\n                    if (!this.tpRateLine && !this.slRateLine) {\n                        this.$tpslButton.hide();\n                        this.$tpslButton.enable();\n                        this.tpslEnabled = false;\n                    }\n                } else {\n                    this.$tpslButton.show(true);\n                }\n            }\n        }, {\n            key: 'destroy',\n            value: function destroy() {\n                this.destroyTPRateLine();\n                this.destroySLRateLine();\n\n                if (this.editPositionModel) {\n                    this.editPositionModel.destroy();\n                    this.editPositionModel = null;\n                }\n\n                _get(PositionRateLine.prototype.__proto__ || Object.getPrototypeOf(PositionRateLine.prototype), 'destroy', this).call(this);\n            }\n        }, {\n            key: 'onEditButtonCLick',\n            value: function onEditButtonCLick() {\n                core.trigger('ui:edit-position', this.options.position, true);\n            }\n        }, {\n            key: 'onCloseButtonClick',\n            value: function onCloseButtonClick() {\n                core.trigger('ui:close-position', this.options.position);\n            }\n        }, {\n            key: 'onInstrumentStatusChange',\n            value: function onInstrumentStatusChange() {\n                this.options.instrument.status.isEditable() ? this.enableDragging() : this.disableDragging();\n\n                this.options.instrument.status.isEditable() ? this.$editButton.enable() : this.$editButton.disable();\n                this.options.instrument.status.isClosable() ? this.$closeButton.enable() : this.$closeButton.disable();\n            }\n        }, {\n            key: 'onTpslButtonClick',\n            value: function onTpslButtonClick() {\n                if (this.tpslEnabled) {\n                    this.editPositionModel.destroy();\n                    this.editPositionModel = null;\n\n                    this.destroyTPRateLine();\n                    this.destroySLRateLine();\n                    this.$tpslButton.enable();\n                } else {\n                    this.editPositionModel = Editor.createEditPositionModel(this.options.position, this.options.instrument);\n\n                    if (this.options.position.getTakeProfit()) {\n                        this.createTPRateLine();\n                    }\n\n                    if (this.options.position.getStopLoss()) {\n                        this.createSLRateLine();\n                    }\n\n                    this.$tpslButton.press();\n                }\n\n                this.tpslEnabled = !this.tpslEnabled;\n            }\n        }, {\n            key: 'onTakeProfitChange',\n            value: function onTakeProfitChange() {\n                if (this.tpslEnabled) {\n                    if (this.options.position.getTakeProfit()) {\n                        if (!this.tpRateLine) {\n                            this.createTPRateLine();\n                        } else {\n                            this.tpRateLine.updateRate(this.options.position.getTakeProfit().fixedPrice);\n                        }\n                    } else {\n                        this.destroyTPRateLine();\n                    }\n                }\n\n                this.updateTplsButtonVisibility();\n            }\n        }, {\n            key: 'onStopLossChange',\n            value: function onStopLossChange() {\n                if (this.tpslEnabled) {\n                    if (this.options.position.getStopLoss()) {\n                        if (!this.slRateLine) {\n                            this.createSLRateLine();\n                        } else {\n                            this.slRateLine.updateRate(this.options.position.getStopLoss().fixedPrice);\n                        }\n                    } else {\n                        this.destroySLRateLine();\n                    }\n                }\n\n                this.updateTplsButtonVisibility();\n            }\n        }, {\n            key: 'createSLRateLine',\n            value: function createSLRateLine() {\n                this.slRateLine = new PositionStopLossRateLine(this.chart, {\n                    editPositionModel: this.editPositionModel,\n                    position: this.options.position,\n                    instrument: this.options.instrument\n                });\n            }\n        }, {\n            key: 'createTPRateLine',\n            value: function createTPRateLine() {\n                this.tpRateLine = new PositionTakeProfitRateLine(this.chart, {\n                    editPositionModel: this.editPositionModel,\n                    position: this.options.position,\n                    instrument: this.options.instrument\n                });\n            }\n        }, {\n            key: 'destroySLRateLine',\n            value: function destroySLRateLine() {\n                if (this.slRateLine) {\n                    this.slRateLine.destroy();\n                    this.slRateLine = null;\n                }\n            }\n        }, {\n            key: 'destroyTPRateLine',\n            value: function destroyTPRateLine() {\n                if (this.tpRateLine) {\n                    this.tpRateLine.destroy();\n                    this.tpRateLine = null;\n                }\n            }\n        }, {\n            key: 'applySettings',\n            value: function applySettings(settings) {\n                _get(PositionRateLine.prototype.__proto__ || Object.getPrototypeOf(PositionRateLine.prototype), 'applySettings', this).call(this, settings);\n\n                if (this.slRateLine) {\n                    this.slRateLine.applySettings(settings);\n                }\n\n                if (this.tpRateLine) {\n                    this.tpRateLine.applySettings(settings);\n                }\n            }\n        }]);\n\n        return PositionRateLine;\n    }(BaseRateLine);\n\n    module.exports = PositionRateLine;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/rate-lines/positions.rate.line.js\n// module id = 2393\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/rate-lines/positions.rate.line.js?");

/***/ }),

/***/ 2394:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var core = __webpack_require__(5);\n    var TakeProfitRateLine = __webpack_require__(2236);\n\n    var Editor = __webpack_require__(2122);\n\n    var PositionTakeProfitRateLine = function (_TakeProfitRateLine) {\n        _inherits(PositionTakeProfitRateLine, _TakeProfitRateLine);\n\n        function PositionTakeProfitRateLine(chart, options) {\n            _classCallCheck(this, PositionTakeProfitRateLine);\n\n            var _this = _possibleConstructorReturn(this, (PositionTakeProfitRateLine.__proto__ || Object.getPrototypeOf(PositionTakeProfitRateLine)).call(this, chart, options));\n\n            _this.editPositionModel = _this.options.editPositionModel;\n\n            _this.updateRate(_this.options.position.getTakeProfit().fixedPrice);\n            _this.updatePl(_this.editPositionModel.getProfit());\n\n            Editor.initEditing(_this, _this.editPositionModel, true, {\n                onChangeProfitForTakeProfit: function onChangeProfitForTakeProfit() {\n                    _this.updatePl(_this.editPositionModel.getProfit());\n                },\n                onChangeRate: _this.updateDragAndDropRange.bind(_this)\n            });\n            return _this;\n        }\n\n        _createClass(PositionTakeProfitRateLine, [{\n            key: 'onEditButtonCLick',\n            value: function onEditButtonCLick() {\n                core.trigger('ui:edit-position', this.options.position, true);\n            }\n        }, {\n            key: 'onCloseButtonClick',\n            value: function onCloseButtonClick() {\n                Editor.removePositionTakeProfit(this.editPositionModel);\n            }\n        }, {\n            key: 'onDrop',\n            value: function onDrop() {\n                return Editor.updatePositionTakeProfit(this.editPositionModel);\n            }\n        }, {\n            key: 'getDragAndDropRange',\n            value: function getDragAndDropRange() {\n                var range = {};\n                var model = this.editPositionModel;\n\n                if (model.isBuy()) {\n                    range.min = model.getValidationValueForProfit();\n                } else {\n                    range.max = model.getValidationValueForProfit();\n                }\n\n                return range;\n            }\n        }, {\n            key: 'onRateUpdated',\n            value: function onRateUpdated() {\n                _get(PositionTakeProfitRateLine.prototype.__proto__ || Object.getPrototypeOf(PositionTakeProfitRateLine.prototype), 'onRateUpdated', this).call(this);\n                this.editPositionModel.setTakeProfit(this.rate);\n            }\n        }, {\n            key: 'destroy',\n            value: function destroy() {\n                _get(PositionTakeProfitRateLine.prototype.__proto__ || Object.getPrototypeOf(PositionTakeProfitRateLine.prototype), 'destroy', this).call(this);\n                Editor.stopEditing(this, this.editPositionModel, true);\n            }\n        }]);\n\n        return PositionTakeProfitRateLine;\n    }(TakeProfitRateLine);\n\n    module.exports = PositionTakeProfitRateLine;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/rate-lines/sltp-rate-lines/position.take.profit.rate.line.js\n// module id = 2394\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/rate-lines/sltp-rate-lines/position.take.profit.rate.line.js?");

/***/ }),

/***/ 2395:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var core = __webpack_require__(5);\n    var user = __webpack_require__(10);\n    var StopLossRateLine = __webpack_require__(2237);\n\n    var Editor = __webpack_require__(2122);\n\n    var PositionStopLossRateLine = function (_StopLossRateLine) {\n        _inherits(PositionStopLossRateLine, _StopLossRateLine);\n\n        function PositionStopLossRateLine(chart, options) {\n            _classCallCheck(this, PositionStopLossRateLine);\n\n            var _this = _possibleConstructorReturn(this, (PositionStopLossRateLine.__proto__ || Object.getPrototypeOf(PositionStopLossRateLine)).call(this, chart, options));\n\n            _this.editPositionModel = _this.options.editPositionModel;\n\n            _this.updateRate(_this.options.position.getStopLoss().fixedPrice);\n            _this.updatePl(-_this.editPositionModel.getLoss());\n\n            Editor.initEditing(_this, _this.editPositionModel, true, {\n                onChangeLossForStopLoss: function onChangeLossForStopLoss() {\n                    _this.updatePl(-_this.editPositionModel.getLoss());\n                },\n                onChangeRate: _this.updateDragAndDropRange.bind(_this)\n            });\n            return _this;\n        }\n\n        _createClass(PositionStopLossRateLine, [{\n            key: 'onEditButtonCLick',\n            value: function onEditButtonCLick() {\n                core.trigger('ui:edit-position', this.options.position, true);\n            }\n        }, {\n            key: 'onCloseButtonClick',\n            value: function onCloseButtonClick() {\n                Editor.removePositionStopLoss(this.editPositionModel);\n            }\n        }, {\n            key: 'onDrop',\n            value: function onDrop() {\n                return Editor.updatePositionStopLoss(this.editPositionModel);\n            }\n        }, {\n            key: 'getDragAndDropRange',\n            value: function getDragAndDropRange() {\n                var range = {};\n                var model = this.editPositionModel;\n\n                if (model.isBuy()) {\n                    range.max = model.getValidationValueForLoss();\n\n                    if (user.isGuaranteedStopLossEnabled()) {\n                        range.min = model.getGSLLimit();\n                    }\n                } else {\n                    range.min = model.getValidationValueForLoss();\n\n                    if (user.isGuaranteedStopLossEnabled()) {\n                        range.max = model.getGSLLimit();\n                    }\n                }\n\n                return range;\n            }\n        }, {\n            key: 'onRateUpdated',\n            value: function onRateUpdated() {\n                _get(PositionStopLossRateLine.prototype.__proto__ || Object.getPrototypeOf(PositionStopLossRateLine.prototype), 'onRateUpdated', this).call(this);\n                this.editPositionModel.setStopLoss(this.rate);\n            }\n        }, {\n            key: 'destroy',\n            value: function destroy() {\n                _get(PositionStopLossRateLine.prototype.__proto__ || Object.getPrototypeOf(PositionStopLossRateLine.prototype), 'destroy', this).call(this);\n                Editor.stopEditing(this, this.editPositionModel, true);\n            }\n        }]);\n\n        return PositionStopLossRateLine;\n    }(StopLossRateLine);\n\n    module.exports = PositionStopLossRateLine;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/rate-lines/sltp-rate-lines/position.stop.loss.rate.line.js\n// module id = 2395\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/rate-lines/sltp-rate-lines/position.stop.loss.rate.line.js?");

/***/ }),

/***/ 2396:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var core = __webpack_require__(5);\n\n    var BaseRateLine = __webpack_require__(2131);\n    var OrderTakeProfitRateLine = __webpack_require__(2397);\n    var OrderStopLossRateLine = __webpack_require__(2398);\n\n    var Editor = __webpack_require__(2122);\n\n    var defaults = {\n        color: '#7a43b0',\n        dashstyle: BaseRateLine.DASH_STYLES.SOLID,\n        draggable: true,\n        handleEvents: true,\n        infoLabelShowRate: true,\n        showCloseButton: true,\n        showEditButton: true,\n        showInfoLabel: true,\n        showRateLabel: false,\n        showTpslButton: true\n    };\n\n    var OrderRateLine = function (_BaseRateLine) {\n        _inherits(OrderRateLine, _BaseRateLine);\n\n        _createClass(OrderRateLine, [{\n            key: 'defaults',\n            get: function get() {\n                return defaults;\n            }\n        }]);\n\n        function OrderRateLine(chart, options) {\n            _classCallCheck(this, OrderRateLine);\n\n            options.infoLabelKey = 'chart.line.order.' + options.order.getType().toLowerCase();\n\n            var _this = _possibleConstructorReturn(this, (OrderRateLine.__proto__ || Object.getPrototypeOf(OrderRateLine)).call(this, chart, options));\n\n            _this.updateTplsButtonVisibility();\n            _this.onInstrumentStatusChange();\n\n            _this.editOrderModel = Editor.createEditOrderModel(_this.options.order, _this.options.instrument);\n\n            _this.updateRate(_this.options.order.getPrice());\n\n            Editor.initEditing(_this, _this.editOrderModel, false, {\n                onChangeProfitForTakeProfit: function onChangeProfitForTakeProfit() {\n                    _this.updatePl(_this.editOrderModel.getProfit());\n                },\n                onChangeRate: _this.updateDragAndDropRange.bind(_this)\n            });\n\n            _this.listenTo(_this.options.instrument, 'change:closable change:editable', _this.onInstrumentStatusChange.bind(_this));\n            _this.listenTo(_this.options.order, 'change:stopLimitPrice change:modifiedTime', _this.onPriceChange.bind(_this));\n            _this.listenTo(_this.options.order, 'change:takeProfit', _this.onTakeProfitChange.bind(_this));\n            _this.listenTo(_this.options.order, 'change:stopLoss', _this.onStopLossChange.bind(_this));\n            _this.listenTo(_this.options.order, 'change:quantity', _this.onQuantityChange.bind(_this));\n            _this.listenTo(_this.options.order, 'remove', _this.destroy.bind(_this));\n            return _this;\n        }\n\n        _createClass(OrderRateLine, [{\n            key: 'destroy',\n            value: function destroy() {\n                _get(OrderRateLine.prototype.__proto__ || Object.getPrototypeOf(OrderRateLine.prototype), 'destroy', this).call(this);\n\n                this.destroyTPRateLine();\n                this.destroySLRateLine();\n\n                if (this.editOrderModel) {\n                    Editor.stopEditing(this, this.editOrderModel, true);\n                    this.editOrderModel.destroy();\n                    this.editOrderModel = null;\n                }\n            }\n        }, {\n            key: 'onEditButtonCLick',\n            value: function onEditButtonCLick() {\n                core.trigger('ui:edit-order', this.options.order);\n            }\n        }, {\n            key: 'onCloseButtonClick',\n            value: function onCloseButtonClick() {\n                core.trigger('ui:cancel-order', this.options.order);\n            }\n        }, {\n            key: 'onTpslButtonClick',\n            value: function onTpslButtonClick() {\n                if (this.tpslEnabled) {\n                    this.destroyTPRateLine();\n                    this.destroySLRateLine();\n                    this.$tpslButton.enable();\n                } else {\n                    if (this.options.order.isTakeProfit()) {\n                        this.createTPRateLine();\n                        // this.tpRateLine.updateRate(this.options.model.get('takeProfit').fixedPrice)\n                    }\n\n                    if (this.options.order.isStopLoss()) {\n                        this.createSLRateLine();\n                        // this.slRateLine.updateRate(this.options.model.get('stopLoss').fixedPrice)\n                    }\n\n                    this.$tpslButton.press();\n                }\n\n                this.tpslEnabled = !this.tpslEnabled;\n            }\n        }, {\n            key: 'onRateUpdated',\n            value: function onRateUpdated(diff) {\n                _get(OrderRateLine.prototype.__proto__ || Object.getPrototypeOf(OrderRateLine.prototype), 'onRateUpdated', this).call(this);\n                this.editOrderModel.setCurrentPrice(this.rate);\n\n                if (this.tpRateLine) {\n                    this.tpRateLine.updateRate(this.tpRateLine.rate + diff);\n                }\n\n                if (this.slRateLine) {\n                    this.slRateLine.updateRate(this.slRateLine.rate + diff);\n                }\n            }\n        }, {\n            key: 'onDrop',\n            value: function onDrop(diff) {\n                if (this.editOrderModel.getTakeProfit() && !this.tpRateLine) {\n                    this.editOrderModel.setTakeProfit(this.editOrderModel.getTakeProfit() + diff);\n                }\n\n                if (this.editOrderModel.getStopLoss() && !this.slRateLine) {\n                    this.editOrderModel.setStopLoss(this.editOrderModel.getStopLoss() + diff);\n                }\n\n                return Editor.updateOrder(this.editOrderModel);\n            }\n        }, {\n            key: 'getDragAndDropRange',\n            value: function getDragAndDropRange() {\n                var range = {};\n                var model = this.editOrderModel;\n\n                if (this.options.order.getType() === 'STOP') {\n                    if (model.isBuy()) {\n                        range.min = model.getValidationValueForProfit();\n                    } else {\n                        range.max = model.getValidationValueForProfit();\n                        range.min = model.getInstrumentModel().getPrecisionAsFloat();\n                    }\n                } else {\n                    if (model.isBuy()) {\n                        range.max = model.getValidationValueForLoss();\n                        range.min = model.getInstrumentModel().getPrecisionAsFloat();\n                    } else {\n                        range.min = model.getValidationValueForLoss();\n                    }\n                }\n\n                return range;\n            }\n        }, {\n            key: 'exportTo',\n            value: function exportTo(chart) {\n                _get(OrderRateLine.prototype.__proto__ || Object.getPrototypeOf(OrderRateLine.prototype), 'exportTo', this).call(this, chart);\n\n                if (this.tpRateLine) {\n                    this.tpRateLine.exportTo(chart);\n                }\n\n                if (this.slRateLine) {\n                    this.slRateLine.exportTo(chart);\n                }\n            }\n        }, {\n            key: 'updateTplsButtonVisibility',\n            value: function updateTplsButtonVisibility() {\n                if (!this.options.order.isTakeProfit() && !this.options.order.isStopLoss()) {\n                    if (!this.tpRateLine && !this.slRateLine) {\n                        this.$tpslButton.hide();\n                        this.$tpslButton.enable();\n                        this.tpslEnabled = false;\n                    }\n                } else {\n                    this.$tpslButton.show(true);\n                }\n            }\n        }, {\n            key: 'onPriceChange',\n            value: function onPriceChange() {\n                this.updateRate(this.options.order.getPrice());\n            }\n        }, {\n            key: 'onInstrumentStatusChange',\n            value: function onInstrumentStatusChange() {\n                this.options.instrument.status.isEditable() ? this.enableDragging() : this.disableDragging();\n\n                this.options.instrument.status.isEditable() ? this.$editButton.enable() : this.$editButton.disable();\n                this.options.instrument.status.isClosable() ? this.$closeButton.enable() : this.$closeButton.disable();\n            }\n        }, {\n            key: 'onQuantityChange',\n            value: function onQuantityChange() {\n                this.editOrderModel.setAmount(this.options.order.get('quantity'));\n            }\n        }, {\n            key: 'onTakeProfitChange',\n            value: function onTakeProfitChange() {\n                if (this.tpslEnabled) {\n                    if (this.options.order.isTakeProfit()) {\n                        if (!this.tpRateLine) {\n                            this.createTPRateLine();\n                        } else {\n                            this.tpRateLine.updateRate(this.options.order.getTakeProfit());\n                        }\n                    } else {\n                        this.destroyTPRateLine();\n                    }\n                }\n\n                this.updateTplsButtonVisibility();\n            }\n        }, {\n            key: 'onStopLossChange',\n            value: function onStopLossChange() {\n                if (this.tpslEnabled) {\n                    if (this.options.order.isStopLoss()) {\n                        if (!this.slRateLine) {\n                            this.createSLRateLine();\n                        } else {\n                            this.slRateLine.updateRate(this.options.order.getStopLoss());\n                        }\n                    } else {\n                        this.destroySLRateLine();\n                    }\n                }\n\n                this.updateTplsButtonVisibility();\n            }\n        }, {\n            key: 'createSLRateLine',\n            value: function createSLRateLine() {\n                this.slRateLine = new OrderStopLossRateLine(this.chart, {\n                    editOrderModel: this.editOrderModel,\n                    order: this.options.order,\n                    instrument: this.options.instrument\n                });\n            }\n        }, {\n            key: 'createTPRateLine',\n            value: function createTPRateLine() {\n                this.tpRateLine = new OrderTakeProfitRateLine(this.chart, {\n                    editOrderModel: this.editOrderModel,\n                    order: this.options.order,\n                    instrument: this.options.instrument\n                });\n            }\n        }, {\n            key: 'destroySLRateLine',\n            value: function destroySLRateLine() {\n                if (this.slRateLine) {\n                    this.slRateLine.destroy();\n                    this.slRateLine = null;\n                }\n            }\n        }, {\n            key: 'destroyTPRateLine',\n            value: function destroyTPRateLine() {\n                if (this.tpRateLine) {\n                    this.tpRateLine.destroy();\n                    this.tpRateLine = null;\n                }\n            }\n        }, {\n            key: 'applySettings',\n            value: function applySettings(settings) {\n                _get(OrderRateLine.prototype.__proto__ || Object.getPrototypeOf(OrderRateLine.prototype), 'applySettings', this).call(this, settings);\n\n                if (this.slRateLine) {\n                    this.slRateLine.applySettings(settings);\n                }\n\n                if (this.tpRateLine) {\n                    this.tpRateLine.applySettings(settings);\n                }\n            }\n        }]);\n\n        return OrderRateLine;\n    }(BaseRateLine);\n\n    module.exports = OrderRateLine;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/rate-lines/order.rate.line.js\n// module id = 2396\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/rate-lines/order.rate.line.js?");

/***/ }),

/***/ 2397:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var core = __webpack_require__(5);\n    var TakeProfitRateLine = __webpack_require__(2236);\n\n    var Editor = __webpack_require__(2122);\n\n    var OrderTakeProfitRateLine = function (_TakeProfitRateLine) {\n        _inherits(OrderTakeProfitRateLine, _TakeProfitRateLine);\n\n        function OrderTakeProfitRateLine(chart, options) {\n            _classCallCheck(this, OrderTakeProfitRateLine);\n\n            var _this = _possibleConstructorReturn(this, (OrderTakeProfitRateLine.__proto__ || Object.getPrototypeOf(OrderTakeProfitRateLine)).call(this, chart, options));\n\n            _this.editOrderModel = options.editOrderModel;\n            _this.updateRate(_this.options.order.getTakeProfit());\n            _this.updatePl(_this.editOrderModel.getProfit());\n\n            Editor.initEditing(_this, _this.editOrderModel, true, {\n                onChangeProfitForTakeProfit: function onChangeProfitForTakeProfit() {\n                    _this.updatePl(_this.editOrderModel.getProfit());\n                }\n            });\n\n            _this.listenTo(_this.options.order, 'change:modifiedTime', function () {\n                if (_this.options.order.isTakeProfit()) {\n                    _this.updateRate(_this.options.order.getTakeProfit());\n                }\n            });\n            return _this;\n        }\n\n        _createClass(OrderTakeProfitRateLine, [{\n            key: 'onEditButtonCLick',\n            value: function onEditButtonCLick() {\n                core.trigger('ui:edit-order', this.options.order);\n            }\n        }, {\n            key: 'onCloseButtonClick',\n            value: function onCloseButtonClick() {\n                Editor.removeOrderTakeProfit(this.editOrderModel);\n            }\n        }, {\n            key: 'onDrop',\n            value: function onDrop() {\n                return Editor.updateOrderTakeProfit(this.editOrderModel);\n            }\n        }, {\n            key: 'getDragAndDropRange',\n            value: function getDragAndDropRange() {\n                var range = {};\n                var model = this.editOrderModel;\n\n                if (model.isBuy()) {\n                    range.min = model.getPrice() + model.minOrderDistance(true);\n                } else {\n                    range.max = model.getPrice() - model.minOrderDistance(true);\n                }\n\n                return range;\n            }\n        }, {\n            key: 'onRateUpdated',\n            value: function onRateUpdated() {\n                _get(OrderTakeProfitRateLine.prototype.__proto__ || Object.getPrototypeOf(OrderTakeProfitRateLine.prototype), 'onRateUpdated', this).call(this);\n                this.editOrderModel.setTakeProfit(this.rate);\n            }\n        }, {\n            key: 'destroy',\n            value: function destroy() {\n                _get(OrderTakeProfitRateLine.prototype.__proto__ || Object.getPrototypeOf(OrderTakeProfitRateLine.prototype), 'destroy', this).call(this);\n                Editor.stopEditing(this, this.editOrderModel, true);\n            }\n        }]);\n\n        return OrderTakeProfitRateLine;\n    }(TakeProfitRateLine);\n\n    module.exports = OrderTakeProfitRateLine;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/rate-lines/sltp-rate-lines/order.take.profit.rate.line.js\n// module id = 2397\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/rate-lines/sltp-rate-lines/order.take.profit.rate.line.js?");

/***/ }),

/***/ 2398:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var core = __webpack_require__(5);\n    var StopLossRateLine = __webpack_require__(2237);\n    var user = __webpack_require__(10);\n\n    var Editor = __webpack_require__(2122);\n\n    var OrderStopLossRateLine = function (_StopLossRateLine) {\n        _inherits(OrderStopLossRateLine, _StopLossRateLine);\n\n        function OrderStopLossRateLine(chart, options) {\n            _classCallCheck(this, OrderStopLossRateLine);\n\n            var _this = _possibleConstructorReturn(this, (OrderStopLossRateLine.__proto__ || Object.getPrototypeOf(OrderStopLossRateLine)).call(this, chart, options));\n\n            _this.editOrderModel = options.editOrderModel;\n            _this.updateRate(_this.options.order.getStopLoss());\n            _this.updatePl(-_this.editOrderModel.getLoss());\n\n            Editor.initEditing(_this, _this.editOrderModel, true, {\n                onChangeLossForStopLoss: function onChangeLossForStopLoss() {\n                    _this.updatePl(-_this.editOrderModel.getLoss());\n                }\n            });\n\n            _this.listenTo(_this.options.order, 'change:modifiedTime', function () {\n                if (_this.options.order.isStopLoss()) {\n                    _this.updateRate(_this.options.order.getStopLoss());\n                }\n            });\n            return _this;\n        }\n\n        _createClass(OrderStopLossRateLine, [{\n            key: 'onEditButtonCLick',\n            value: function onEditButtonCLick() {\n                core.trigger('ui:edit-order', this.options.order);\n            }\n        }, {\n            key: 'onCloseButtonClick',\n            value: function onCloseButtonClick() {\n                Editor.removeOrderStopLoss(this.editOrderModel);\n            }\n        }, {\n            key: 'onDrop',\n            value: function onDrop() {\n                return Editor.updateOrderStopLoss(this.editOrderModel);\n            }\n        }, {\n            key: 'getDragAndDropRange',\n            value: function getDragAndDropRange() {\n                var range = {};\n                var model = this.editOrderModel;\n\n                if (model.isBuy()) {\n                    range.max = model.getPrice() - model.minOrderDistance(true);\n\n                    if (user.isGuaranteedStopLossEnabled()) {\n                        range.min = model.calcClosePrice();\n                    }\n                } else {\n                    range.min = model.getPrice() + model.minOrderDistance(true);\n\n                    if (user.isGuaranteedStopLossEnabled()) {\n                        range.max = model.calcClosePrice();\n                    }\n                }\n\n                return range;\n            }\n        }, {\n            key: 'onRateUpdated',\n            value: function onRateUpdated() {\n                _get(OrderStopLossRateLine.prototype.__proto__ || Object.getPrototypeOf(OrderStopLossRateLine.prototype), 'onRateUpdated', this).call(this);\n                this.editOrderModel.setStopLoss(this.rate);\n            }\n        }, {\n            key: 'destroy',\n            value: function destroy() {\n                _get(OrderStopLossRateLine.prototype.__proto__ || Object.getPrototypeOf(OrderStopLossRateLine.prototype), 'destroy', this).call(this);\n                Editor.stopEditing(this, this.editOrderModel, true);\n            }\n        }]);\n\n        return OrderStopLossRateLine;\n    }(StopLossRateLine);\n\n    module.exports = OrderStopLossRateLine;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/rate-lines/sltp-rate-lines/order.stop.loss.rate.line.js\n// module id = 2398\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/rate-lines/sltp-rate-lines/order.stop.loss.rate.line.js?");

/***/ }),

/***/ 2399:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n\n    module.exports = function (H) {\n        H || (H = __webpack_require__(452));\n\n        var addEvent = H.addEvent;\n\n        var removeEvent = H.removeEvent;\n\n        var createElement = H.createElement;\n\n        var css = H.css;\n\n        var defined = H.defined;\n\n        var doc = H.doc;\n\n        var each = H.each;\n\n        var extend = H.extend;\n\n        var isMS = H.isMS;\n\n        var symbolSizes = H.symbolSizes;\n\n        var merge = H.merge;\n\n        /**\n         * Create a button with preset states.\n         * @param {string} text - The text or HTML to draw.\n         * @param {number} x - The x position of the button's left side.\n         * @param {number} y - The y position of the button's top side.\n         * @param {string} iconSrc - The icon source\n         * @param {number} iconWidth - The icon width\n         * @param {number} iconHeight - The icon height\n         * @param {Function} callback - The function to execute on button click or\n         *    touch.\n         * @param {SVGAttributes} [normalState] - SVG attributes for the normal\n         *    state.\n         * @param {SVGAttributes} [hoverState] - SVG attributes for the hover state.\n         * @param {SVGAttributes} [pressedState] - SVG attributes for the pressed\n         *    state.\n         * @param {SVGAttributes} [disabledState] - SVG attributes for the disabled\n         *    state.\n         * @param {Symbol} [shape=rect] - The shape type.\n         * @returns {SVGRenderer} The button element.\n         */\n        H.SVGRenderer.prototype.buttonIcon = function (text, x, y, iconSrc, iconWidth, iconHeight, callback, normalState, hoverState, pressedState, disabledState, shape) {\n            var label = this.labelIcon(text, x, y, iconSrc, iconWidth, iconHeight, shape, null, null, null, null, 'button');\n\n            var curState = 0;\n\n            // Default, non-stylable attributes\n            label.attr(merge({\n                'padding': 8,\n                'r': 2\n            }, normalState));\n\n            // Presentational\n            var normalStyle = void 0;\n\n            var hoverStyle = void 0;\n\n            var pressedStyle = void 0;\n\n            var disabledStyle = void 0;\n\n            // Presentational\n            var normalIcon = void 0;\n\n            var hoverIcon = void 0;\n\n            var pressedIcon = void 0;\n\n            var disabledIcon = void 0;\n\n            // Normal state - prepare the attributes\n            normalState = merge({\n                fill: '#f7f7f7',\n                stroke: '#cccccc',\n                'stroke-width': 1,\n                style: {\n                    color: '#333333',\n                    cursor: 'pointer',\n                    fontWeight: 'normal'\n                }\n            }, normalState);\n            normalStyle = normalState.style;\n            delete normalState.style;\n            normalIcon = normalState.icon;\n            delete normalState.icon;\n\n            // Hover state\n            hoverState = merge(normalState, {\n                fill: '#e6e6e6'\n            }, hoverState);\n            hoverStyle = hoverState.style;\n            delete hoverState.style;\n            hoverIcon = hoverState.icon;\n            delete hoverState.icon;\n\n            // Pressed state\n            pressedState = merge(normalState, {\n                fill: '#e6ebf5',\n                style: {\n                    color: '#000000',\n                    fontWeight: 'bold'\n                }\n            }, pressedState);\n            pressedStyle = pressedState.style;\n            delete pressedState.style;\n            pressedIcon = pressedState.icon;\n            delete pressedState.icon;\n\n            // Disabled state\n            disabledState = merge(normalState, {\n                fill: '#e0e0e0',\n                style: {\n                    color: '#cccccc',\n                    cursor: 'not-allowed'\n                }\n            }, disabledState);\n            disabledStyle = disabledState.style;\n            delete disabledState.style;\n            disabledIcon = disabledState.icon;\n            delete disabledState.icon;\n\n            // Add the events. IE9 and IE10 need mouseover and mouseout to funciton (#667).\n            addEvent(label.element, isMS ? 'mouseover' : 'mouseenter', function () {\n                if (curState !== 3) {\n                    label.setState(1);\n                }\n            });\n            addEvent(label.element, isMS ? 'mouseout' : 'mouseleave', function () {\n                if (curState !== 3) {\n                    label.setState(curState);\n                }\n            });\n\n            label.setState = function (state) {\n                // Hover state is temporary, don't record it\n                if (state !== 1) {\n                    label.state = curState = state;\n                }\n\n                // Update visuals\n                label.removeClass(/highcharts-button-(normal|hover|pressed|disabled)/).addClass('highcharts-button-' + ['normal', 'hover', 'pressed', 'disabled'][state || 0]);\n\n                label.attr([normalState, hoverState, pressedState, disabledState][state || 0]).css([normalStyle, hoverStyle, pressedStyle, disabledStyle][state || 0]);\n\n                label.bImage.attr({ href: [normalIcon, hoverIcon, pressedIcon, disabledIcon][state || 0] || iconSrc });\n            };\n\n            label.enable = function () {\n                label.setState(0);\n            };\n\n            label.press = function () {\n                label.setState(2);\n            };\n\n            label.disable = function () {\n                label.setState(3);\n            };\n\n            label.updateNormalState = function (attr) {\n                normalState = merge(normalState, attr);\n\n                if (curState === 0) {\n                    label.attr(attr);\n                }\n            };\n\n            // Presentational attributes\n            label.attr(normalState).css(extend({\n                cursor: 'default'\n            }, normalStyle));\n\n            return label.on('click', function (e) {\n                if (curState !== 3) {\n                    callback.call(label, e);\n                }\n            });\n        };\n\n        /**\n         * Draw a label, which is an extended text element with support for border\n         * and background. Highcharts creates a `g` element with a text and a `path`\n         * or `rect` inside, to make it behave somewhat like a HTML div. Border and\n         * background are set through `stroke`, `stroke-width` and `fill` attributes\n         * using the {@link Highcharts.SVGElement#attr|attr} method. To update the\n         * text after render, run `label.attr({ text: 'New text' })`.\n         *\n         * @param  {string} str\n         *         The initial text string or (subset) HTML to render.\n         * @param  {number} x\n         *         The x position of the label's left side.\n         * @param  {number} y\n         *         The y position of the label's top side or baseline, depending on\n         *         the `baseline` parameter.\n         * @param  {string} iconSrc\n         *         The icon source\n         * @param  {number} iconWidth\n         *         The icon width\n         * @param  {number} iconHeight\n         *         The icon height\n         * @param  {String} shape\n         *         The shape of the label's border/background, if any. Defaults to\n         *         `rect`. Other possible values are `callout` or other shapes\n         *         defined in {@link Highcharts.SVGRenderer#symbols}.\n         * @param  {number} anchorX\n         *         In case the `shape` has a pointer, like a flag, this is the\n         *         coordinates it should be pinned to.\n         * @param  {number} anchorY\n         *         In case the `shape` has a pointer, like a flag, this is the\n         *         coordinates it should be pinned to.\n         * @param  {Boolean} useHTML\n         * @param  {Boolean} baseline\n         *         Whether to position the label relative to the text baseline,\n         *           like {@link Highcharts.SVGRenderer#text|renderer.text}, or to the\n         *           upper border of the rectangle.\n         * @param  {String} className\n         *         Class name for the group.\n         *\n         * @return {Highcharts.SVGElement}\n         *         The generated label.\n         *\n         * @sample highcharts/members/renderer-label-on-chart/\n         *         A label on the chart\n         */\n        H.SVGRenderer.prototype.labelIcon = function (str, x, y, iconSrc, iconWidth, iconHeight, shape, anchorX, anchorY, useHTML, baseline, className) {\n\n            var renderer = this;\n\n            var wrapper = renderer.g(className !== 'button' && 'label');\n\n            var text = wrapper.text = renderer.text('', 0, 0, useHTML).attr({\n                zIndex: 1\n            });\n\n            var bRect = void 0;\n\n            var bImage = wrapper.bImage = renderer.image(iconSrc).attr({\n                zIndex: 1\n            });\n\n            var bBox = void 0;\n\n            var alignFactor = 0;\n\n            var padding = 3;\n\n            var paddingLeft = 0;\n\n            var width = void 0;\n\n            var height = void 0;\n\n            var wrapperX = void 0;\n\n            var wrapperY = void 0;\n\n            var textAlign = void 0;\n\n            var deferredAttr = {};\n\n            var strokeWidth = void 0;\n\n            var baselineOffset = void 0;\n\n            var hasBGImage = /^url\\((.*?)\\)$/.test(shape);\n\n            var needsBox = hasBGImage;\n\n            var getCrispAdjust = void 0;\n\n            var updateBoxSize = void 0;\n\n            var updateImageSize = void 0;\n\n            var updateTextPadding = void 0;\n\n            var boxAttr = void 0;\n\n            if (className) {\n                wrapper.addClass('highcharts-' + className);\n            }\n\n            needsBox = hasBGImage;\n            getCrispAdjust = function getCrispAdjust() {\n                return (strokeWidth || 0) % 2 / 2;\n            };\n\n            /**\n             * This function runs after the label is added to the DOM (when the bounding box is\n             * available), and after the text of the label is updated to detect the new bounding\n             * box and reflect it in the border box.\n             */\n            updateBoxSize = function updateBoxSize() {\n                var style = text.element.style;\n\n                var crispAdjust = void 0;\n\n                var attribs = {};\n\n                var textBBox = (width === undefined || height === undefined || textAlign) && defined(text.textStr) && text.getBBox(); //#3295 && 3514 box failure when string equals 0\n                var imageBBox = bImage.getBBox();\n\n                bBox = {\n                    width: (width || textBBox.width || 0) + (iconWidth || imageBBox.width || 0) + (textBBox.width && (iconWidth || imageBBox.width) ? padding : 0),\n                    height: Math.max(height || textBBox.height || 0, height || iconHeight || imageBBox.height || 0),\n                    x: imageBBox.x || textBBox.x,\n                    y: imageBBox.y || textBBox.y\n                };\n\n                wrapper.width = bBox.width + 2 * padding + paddingLeft;\n                wrapper.height = bBox.height + 2 * padding;\n\n                // Update the label-scoped y offset\n                baselineOffset = (renderer.fontMetrics(style && style.fontSize, text).b * 0.75 + wrapper.height) / 2;\n\n                if (needsBox) {\n\n                    // Create the border box if it is not already present\n                    if (!bRect) {\n                        wrapper.bRect = bRect = renderer.symbols[shape] || hasBGImage ? // Symbol definition exists (#5324)\n                        renderer.symbol(shape) : renderer.rect();\n\n                        bRect.addClass((className === 'button' ? '' : 'highcharts-label-box') + ( // Don't use label className for buttons\n                        className ? ' highcharts-' + className + '-box' : ''));\n\n                        bRect.add(wrapper);\n\n                        crispAdjust = getCrispAdjust();\n                        attribs.x = crispAdjust;\n                        attribs.y = (baseline ? -baselineOffset : 0) + crispAdjust;\n                    }\n\n                    // Apply the box attributes\n                    attribs.width = Math.round(wrapper.width);\n                    attribs.height = Math.round(wrapper.height);\n\n                    bRect.attr(extend(attribs, deferredAttr));\n                    deferredAttr = {};\n                }\n            };\n\n            /**\n             * This function runs after setting text or padding, but only if padding is changed\n             */\n            updateTextPadding = function updateTextPadding() {\n                var imageBBox = bImage.getBBox();\n                var textX = padding + paddingLeft + (imageBBox.width ? imageBBox.width + padding : 0);\n\n                var textY = void 0;\n\n                // determin y based on the baseline\n                textY = baseline ? 0 : baselineOffset;\n\n                // compensate for alignment\n                if (defined(width) && bBox && (textAlign === 'center' || textAlign === 'right')) {\n                    textX += {\n                        center: 0.5,\n                        right: 1\n                    }[textAlign] * (width - bBox.width);\n                }\n\n                // update if anything changed\n                if (textX !== text.x || textY !== text.y) {\n                    text.attr('x', textX);\n\n                    if (textY !== undefined) {\n                        text.attr('y', textY);\n                    }\n                }\n\n                // record current values\n                text.x = textX;\n                text.y = textY;\n            };\n\n            /**\n             * Set a box attribute, or defer it if the box is not yet created\n             * @param {Object} key\n             * @param {Object} value\n             */\n            boxAttr = function boxAttr(key, value) {\n                if (bRect) {\n                    bRect.attr(key, value);\n                } else {\n                    deferredAttr[key] = value;\n                }\n            };\n\n            updateImageSize = function updateImageSize(imgWidth, imgHeigth) {\n                if (imgWidth && imgHeigth) {\n                    var dy = bBox.height - imgHeigth;\n\n                    updateBoxSize(dy / 2);\n                    updateTextPadding();\n\n                    wrapper.attr({ visibility: 'visible' });\n\n                    wrapper.attr({\n                        y: wrapper.y + dy / 2\n                    });\n                }\n\n                var imageX = padding + paddingLeft;\n\n                var imageY = void 0;\n\n                // determin y based on the baseline\n\n                imageY = padding;\n\n                // compensate for alignment\n                if (defined(width) && bBox && (textAlign === 'center' || textAlign === 'right')) {\n                    imageX += {\n                        center: 0.5,\n                        right: 1\n                    }[textAlign] * (width - bBox.width);\n                }\n\n                // update if anything changed\n                if (imageX !== bImage.x || imageX !== bImage.y) {\n                    bImage.attr('x', imageX);\n\n                    if (imageY !== undefined) {\n                        bImage.attr('y', imageY);\n                    }\n                }\n\n                // record current values\n                bImage.x = imageX;\n                bImage.y = imageY;\n            };\n\n            /**\n             * After the text element is added, get the desired size of the border box\n             * and add it before the text in the DOM.\n             */\n            wrapper.onAdd = function () {\n\n                text.add(wrapper);\n                bImage.add(wrapper);\n\n                if (iconWidth && iconHeight) {\n                    bImage.attr({ width: iconWidth, height: iconHeight });\n                }\n\n                wrapper.attr({\n                    text: str || str === 0 ? str : '', // alignment is available now // #3295: 0 not rendered if given as a value\n                    x: x,\n                    y: y\n                });\n\n                if (bRect && defined(anchorX)) {\n                    wrapper.attr({\n                        anchorX: anchorX,\n                        anchorY: anchorY\n                    });\n                }\n\n                if (iconWidth && iconHeight) {\n                    return;\n                }\n\n                wrapper.attr({ visibility: 'hidden' });\n\n                if (symbolSizes[iconSrc]) {\n                    updateImageSize(symbolSizes[iconSrc].width, symbolSizes[iconSrc].height);\n                } else {\n                    // Create a dummy JavaScript image to get the width and height. Due to a bug in IE < 8,\n                    // the created element must be assigned to a variable in order to load (#292).\n                    createElement('img', {\n                        src: iconSrc,\n                        onload: function onload() {\n                            // Special case for SVGs on IE11, the width is not accessible until the image is\n                            // part of the DOM (#2854).\n                            if (this.width === 0) {\n                                css(this, {\n                                    position: 'absolute',\n                                    top: '-999em'\n                                });\n                                doc.body.appendChild(this);\n                            }\n\n                            // Center the image\n                            symbolSizes[iconSrc] = { // Cache for next\n                                width: this.width,\n                                height: this.height\n                            };\n\n                            // Clean up after #2854 workaround.\n                            if (this.parentNode) {\n                                this.parentNode.removeChild(this);\n                            }\n\n                            updateImageSize(this.width, this.height);\n                        }\n                    });\n                }\n            };\n\n            /*\n             * Add specific attribute setters.\n             */\n\n            // only change local variables\n            wrapper.widthSetter = function (value) {\n                width = H.isNumber(value) ? value : null; // width:auto => null\n            };\n\n            wrapper.heightSetter = function (value) {\n                height = value;\n            };\n\n            wrapper['text-alignSetter'] = function (value) {\n                textAlign = value;\n            };\n\n            wrapper.paddingSetter = function (value) {\n                if (defined(value) && value !== padding) {\n                    padding = wrapper.padding = value;\n                    updateTextPadding();\n                }\n            };\n\n            wrapper.paddingLeftSetter = function (value) {\n                if (defined(value) && value !== paddingLeft) {\n                    paddingLeft = value;\n                    updateTextPadding();\n                }\n            };\n\n            // change local variable and prevent setting attribute on the group\n            wrapper.alignSetter = function (value) {\n                value = {\n                    left: 0,\n                    center: 0.5,\n                    right: 1\n                }[value];\n\n                if (value !== alignFactor) {\n                    alignFactor = value;\n\n                    if (bBox) {\n                        // Bounding box exists, means we're dynamically changing\n                        wrapper.attr({\n                            x: wrapperX\n                        }); // #5134\n                    }\n                }\n            };\n\n            // apply these to the box and the text alike\n            wrapper.textSetter = function (value) {\n                if (value !== undefined) {\n                    text.textSetter(value);\n                }\n\n                updateBoxSize();\n                updateTextPadding();\n                updateImageSize();\n            };\n\n            // apply these to the box but not to the text\n            wrapper['stroke-widthSetter'] = function (value, key) {\n                if (value) {\n                    needsBox = true;\n                }\n\n                strokeWidth = this['stroke-width'] = value;\n                boxAttr(key, value);\n            };\n\n            wrapper.strokeSetter = wrapper.fillSetter = wrapper.rSetter = function (value, key) {\n                if (key === 'fill' && value) {\n                    needsBox = true;\n                }\n\n                boxAttr(key, value);\n            };\n\n            wrapper.anchorXSetter = function (value, key) {\n                anchorX = wrapper.anchorX = value;\n                boxAttr(key, Math.round(value) - getCrispAdjust() - wrapperX);\n            };\n\n            wrapper.anchorYSetter = function (value, key) {\n                anchorY = wrapper.anchorY = value;\n                boxAttr(key, value - wrapperY);\n            };\n\n            // rename attributes\n            wrapper.xSetter = function (value) {\n                wrapper.x = value; // for animation getter\n\n                if (alignFactor) {\n                    value -= alignFactor * ((width || bBox.width) + 2 * padding);\n                }\n\n                wrapperX = Math.round(value);\n                wrapper.attr('translateX', wrapperX);\n            };\n\n            wrapper.ySetter = function (value) {\n                wrapperY = wrapper.y = Math.round(value);\n                wrapper.attr('translateY', wrapperY);\n            };\n\n            // Redirect certain methods to either the box or the text\n            var baseCss = wrapper.css;\n\n            return extend(wrapper, {\n                /*\n                 * Pick up some properties and apply them to the text instead of the\n                 * wrapper.\n                 */\n                css: function css(styles) {\n                    if (styles) {\n                        var textStyles = {};\n\n                        styles = merge(styles); // create a copy to avoid altering the original object (#537)\n                        each(wrapper.textProps, function (prop) {\n                            if (styles[prop] !== undefined) {\n                                textStyles[prop] = styles[prop];\n                                delete styles[prop];\n                            }\n                        });\n                        text.css(textStyles);\n                    }\n\n                    return baseCss.call(wrapper, styles);\n                },\n                /*\n                 * Return the bounding box of the box, not the group.\n                 */\n                getBBox: function getBBox() {\n                    return {\n                        width: bBox.width + 2 * padding,\n                        height: bBox.height + 2 * padding,\n                        x: bBox.x - padding,\n                        y: bBox.y - padding\n                    };\n                },\n\n                /*\n                 * Apply the shadow to the box.\n                 */\n                shadow: function shadow(b) {\n                    if (b) {\n                        updateBoxSize();\n\n                        if (bRect) {\n                            bRect.shadow(b);\n                        }\n                    }\n\n                    return wrapper;\n                },\n\n                /**\n                 * Destroy and release memory.\n                 * @ignore\n                 */\n                destroy: function destroy() {\n\n                    // Added by button implementation\n                    removeEvent(wrapper.element, 'mouseenter');\n                    removeEvent(wrapper.element, 'mouseleave');\n\n                    if (text) {\n                        text = text.destroy();\n                    }\n\n                    if (bRect) {\n                        bRect = bRect.destroy();\n                    }\n\n                    if (bImage) {\n                        bImage = bImage.destroy();\n                    }\n\n                    // Call base implementation to destroy the rest\n                    H.SVGElement.prototype.destroy.call(wrapper);\n\n                    // Release local pointers (#1298)\n                    wrapper = renderer = updateBoxSize = updateTextPadding = boxAttr = updateImageSize = null;\n                }\n            });\n        };\n    };\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/SVGRenderer.extend.js\n// module id = 2399\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/SVGRenderer.extend.js?");

/***/ }),

/***/ 2400:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n\n    var TYPES = ['up', 'none', 'down'];\n\n    var detectDirection = function detectDirection(currPoint, prevPoint) {\n        return currPoint > prevPoint ? TYPES[2] : currPoint < prevPoint ? TYPES[0] : TYPES[1];\n    };\n\n    var createGraphsConfig = function createGraphsConfig(graphPath) {\n        var paths = { general: graphPath };\n        var xMaps = {};\n        var directions = [];\n\n        for (var i = 0, len = TYPES.length; i < len; i++) {\n            paths[TYPES[i]] = [];\n            xMaps[TYPES[i]] = [];\n        }\n\n        for (var _i = 1, _len = graphPath.xMap.length, currX, currY, prevX, prevY, currDir, prevDir; _i < _len; _i++) {\n            currX = graphPath[_i * 3 + 1];\n            currY = graphPath[_i * 3 + 2];\n            prevX = graphPath[_i * 3 - 2];\n            prevY = graphPath[_i * 3 - 1];\n            currDir = detectDirection(currY, prevY);\n\n            if (prevDir !== currDir) {\n                paths[currDir].push('M', prevX, prevY);\n                xMaps[currDir].push(graphPath.xMap[_i - 1]);\n            }\n\n            paths[currDir].push('L', currX, currY);\n            xMaps[currDir].push(graphPath.xMap[_i]);\n\n            directions.push(currDir);\n\n            prevDir = currDir;\n        }\n\n        paths.up.xMap = xMaps.up;\n        paths.none.xMap = xMaps.none;\n        paths.down.xMap = xMaps.down;\n\n        return { paths: paths, directions: directions };\n    };\n\n    module.exports = function (H) {\n        H || (H = __webpack_require__(452));\n\n        var each = H.each;\n\n        H.seriesType('up-down-line', 'line', {\n            upColor: '#1ecd93',\n            color: '#3d6bb1',\n            downColor: '#ff433d'\n        }, {\n            drawGraph: function drawGraph() {\n                var _colors;\n\n                var series = this;\n                var options = this.options;\n                var colors = (_colors = {}, _defineProperty(_colors, TYPES[0], options.upColor), _defineProperty(_colors, TYPES[1], options.color), _defineProperty(_colors, TYPES[2], options.downColor), _colors);\n                var generalGraphPath = (this.gappedPath || this.getGraphPath).call(this);\n                var props = [['graph', 'highcharts-graph', options.lineColor || this.color, options.dashStyle, 'general']];\n\n                each(TYPES, function (type) {\n                    return props.push(['updown-graph-' + type, 'highcharts-graph highcharts-updown-graph-' + type, colors[type] || series.color, options.dashStyle, type]);\n                });\n\n                var config = createGraphsConfig(generalGraphPath);\n\n                each(series.points, function (point, i) {\n                    // fast but dirty\n                    point.color = colors[config.directions[i]] || series.color;\n                    // hard but correct\n                    // point.update({color:colors[config.directions[i]] || series.color}, false, null)\n                });\n\n                // Draw the graph\n                each(props, function (prop, i) {\n                    var graphKey = prop[0];\n                    var graph = series[graphKey];\n                    var graphPath = config.paths[prop[4]];\n                    var attribs = void 0;\n\n                    if (graph) {\n                        graph.endX = graphPath.xMap;\n                        graph.animate({\n                            d: graphPath\n                        });\n                    } else if (graphPath.length) {\n\n                        series[graphKey] = series.chart.renderer.path(graphPath).addClass(prop[1]).attr({\n                            zIndex: 1\n                        }).add(series.group);\n\n                        attribs = {\n                            'stroke': prop[2],\n                            'stroke-width': options.lineWidth,\n                            'fill': series.fillGraph && series.color || 'none'\n                        };\n\n                        if (prop[3]) {\n                            attribs.dashstyle = prop[3];\n                        } else if (options.linecap !== 'square') {\n                            attribs['stroke-linecap'] = attribs['stroke-linejoin'] = 'round';\n                        }\n\n                        graph = series[graphKey].attr(attribs).shadow(i === 0 && options.shadow);\n                    }\n\n                    if (graph) {\n                        graph.startX = graphPath.xMap;\n                        graph.isArea = graphPath.isArea;\n                    }\n                });\n\n                if (this.graph) {\n                    this.graph.hide();\n                }\n            },\n\n            setState: function setState(state) {\n                H.Series.prototype.setState.call(this, state);\n\n                var series = this;\n                var stateOptions = this.options.states;\n                var lineWidth = this.options.lineWidth;\n\n                series.state = state;\n\n                if (stateOptions[state] && stateOptions[state].enabled === false) {\n                    return;\n                }\n\n                if (state) {\n                    lineWidth = stateOptions[state].lineWidth || lineWidth + (stateOptions[state].lineWidthPlus || 0);\n                }\n\n                if (series.graph && !series.graph.dashstyle) {\n                    each(TYPES, function (type) {\n                        return series['updown-graph-' + type] && series['updown-graph-' + type].attr({ 'stroke-width': lineWidth });\n                    });\n                }\n            }\n        });\n    };\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/series/up-down-line.js\n// module id = 2400\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/series/up-down-line.js?");

/***/ }),

/***/ 2401:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n\n    module.exports = function (H) {\n        H || (H = __webpack_require__(452));\n        H.seriesType('heikin-ashi', 'candlestick', {});\n    };\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/series/heikin-ashi.js\n// module id = 2401\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/series/heikin-ashi.js?");

/***/ }),

/***/ 2402:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n\n    module.exports = function (H) {\n        H || (H = __webpack_require__(452));\n        H.seriesType('comparison', 'line', {});\n    };\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/series/comparison.js\n// module id = 2402\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/series/comparison.js?");

/***/ }),

/***/ 2403:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var Model = __webpack_require__(16);\n\n    module.exports = Model.extend({\n        setChange: function setChange(value) {\n            this.set('change', value);\n        },\n        setColor: function setColor(value) {\n            this.set('color', value);\n        },\n        setName: function setName(value) {\n            this.set('name', value);\n        },\n        setSubscription: function setSubscription(value) {\n            this.set('subscription', value);\n        },\n        getChange: function getChange() {\n            return this.get('change');\n        },\n        formatChange: function formatChange() {\n            return this.get('change') + '%';\n        },\n        getColor: function getColor() {\n            return this.get('color');\n        },\n        getName: function getName() {\n            return this.get('name');\n        },\n        getSymbol: function getSymbol() {\n            return this.get('symbol');\n        },\n        getSubscription: function getSubscription() {\n            return this.get('subscription');\n        }\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/instruments-comparison/comparison.instrument.js\n// module id = 2403\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/instruments-comparison/comparison.instrument.js?");

/***/ }),

/***/ 2404:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var Collection = __webpack_require__(50);\n    var device = __webpack_require__(18);\n\n    var MAX_SIZE = device.mobile() ? 3 : 4;\n\n    module.exports = Collection.extend({\n\n        full: false,\n\n        contains: function contains(symbol) {\n            return !!this.findWhere({ symbol: symbol });\n        },\n        isFull: function isFull() {\n            return this.full;\n        },\n        add: function add(models, options) {\n            if (!this.isFull()) {\n                Collection.prototype.add.call(this, models, options);\n\n                if (this.length >= MAX_SIZE) {\n                    this.trigger('full', true);\n                    this.full = true;\n                }\n            }\n        },\n        remove: function remove(models, options) {\n            Collection.prototype.remove.call(this, models, options);\n\n            if (this.isFull()) {\n                this.trigger('full', false);\n                this.full = false;\n            }\n        }\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/instruments-comparison/comparison.instruments.collection.js\n// module id = 2404\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/instruments-comparison/comparison.instruments.collection.js?");

/***/ }),

/***/ 2405:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var Grid = __webpack_require__(864);\n\n    var empty = __webpack_require__(880);\n\n    var SearchView = __webpack_require__(280);\n\n    var GridCellInstrumentName = __webpack_require__(463);\n\n    module.exports = SearchView.extend({\n\n        show: function show(firstUsage) {\n            var search = this.$el.parent();\n\n            search.css('display', 'flex');\n\n            if (firstUsage) {\n                search.addClass('first-search');\n            } else if (search.hasClass('first-search')) {\n                search.removeClass('first-search');\n            }\n\n            search.find('input')[0].focus();\n        },\n\n        hide: function hide() {\n            this.$el.parent().css('display', 'none');\n        },\n\n        initialize: function initialize() {\n            SearchView.prototype.initialize.apply(this, arguments);\n            var input = this.$el.find('.search-block-input input')[0];\n\n            input.setAttribute('size', input.getAttribute('placeholder').length);\n        },\n\n        openResults: function openResults() {\n            var _this = this;\n\n            this.grid = Grid({\n                className: 'instruments-table',\n                collection: this.collection,\n                empty: empty,\n                shouldHideColumns: true,\n                source: 'search',\n                customRowsComponent: __webpack_require__(881),\n                customRowComponent: __webpack_require__(882),\n                columns: [{\n                    key: 'name',\n                    type: GridCellInstrumentName,\n                    style: {\n                        width: '100%'\n                    }\n                }],\n                onRowClick: function onRowClick(event, model) {\n                    _this.options.onRowClick && _this.options.onRowClick(model.get('symbol'));\n                    _this.closeResults();\n                    _this.hide();\n                }\n            }, this.$el.find('.results')[0]);\n\n            this.$el.find('.results').css('display', 'block');\n        }\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/chart.search.view.js\n// module id = 2405\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/chart.search.view.js?");

/***/ }),

/***/ 2406:
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"chart-no-data\\\">\\n    <div class=\\\"chart-no-data-image\\\"></div>\\n    <div class=\\\"chart-no-data-message\\\"><%-__('chart.no_data')%></div>\\n</div>\";\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/templates/chart.no.data.html\n// module id = 2406\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/templates/chart.no.data.html?");

/***/ }),

/***/ 2407:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var React = __webpack_require__(4);\n\n    module.exports = React.createClass({\n        displayName: 'exports',\n\n\n        getDefaultProps: function getDefaultProps() {\n            return {\n                mainInstrument: null,\n                comparisonInstruments: null\n            };\n        },\n\n        getInitialState: function getInitialState() {\n            return {\n                mainInstrument: this.props.mainInstrument,\n                comparisonInstruments: this.props.comparisonInstruments\n            };\n        },\n\n        componentDidMount: function componentDidMount() {\n            this.state.mainInstrument.on('change:color change:change', this.update, this);\n            this.state.comparisonInstruments.on('update change:color change:change', this.update, this);\n        },\n\n        componentWillUnmount: function componentWillUnmount() {\n            this.state.mainInstrument.off('change:color change:change', this.update, this);\n            this.state.comparisonInstruments.off('update change:color change:change', this.update, this);\n        },\n\n        update: function update() {\n            this.setState({\n                mainInstrument: this.state.mainInstrument,\n                comparisonInstruments: this.state.comparisonInstruments\n            });\n        },\n\n        removeInstrument: function removeInstrument(instrument) {\n            this.state.comparisonInstruments.remove(instrument);\n            this.update();\n        },\n\n        setMainInstrument: function setMainInstrument(instrument) {\n            this.state.mainInstrument.off('change:color change:change', this.update, this);\n            instrument.on('change:color change:change', this.update, this);\n            this.setState({\n                mainInstrument: instrument\n            });\n        },\n\n        renderInstrument: function renderInstrument(instrument, main) {\n            var _this = this;\n\n            return React.createElement(\n                'div',\n                { className: 'ic', key: instrument.getName() },\n                React.createElement('div', { className: 'ic-color', style: { backgroundColor: instrument.getColor() } }),\n                React.createElement(\n                    'div',\n                    { className: 'ic-name' },\n                    instrument.getName()\n                ),\n                React.createElement(\n                    'div',\n                    { className: 'ic-change' },\n                    _.isNumber(instrument.getChange()) ? instrument.formatChange() : ''\n                ),\n                !main && React.createElement(\n                    'div',\n                    { className: 'ic-btn-cancel', title: __('chart.instruments_comparison.remove'), onClick: function onClick() {\n                            _this.removeInstrument(instrument);\n                        } },\n                    React.createElement('i', null)\n                )\n            );\n        },\n\n        render: function render() {\n            var _this2 = this;\n\n            return React.createElement(\n                'div',\n                null,\n                this.renderInstrument(this.state.mainInstrument, true),\n                this.state.comparisonInstruments.map(function (instrument) {\n                    return _this2.renderInstrument(instrument);\n                })\n            );\n        }\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/instruments-comparison/instruments.comparison.panel.jsx\n// module id = 2407\n// module chunks = 6 68 70\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/instruments-comparison/instruments.comparison.panel.jsx?");

/***/ }),

/***/ 2484:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var device = __webpack_require__(18);\nvar user = __webpack_require__(10);\n\nvar DEFAULT_LAYOUT = 'cl-2-2';\n\nvar DESKTOP_LAYOUTS = ['cl-1', 'cl-2', 'cl-3', 'cl-1-1', 'cl-1-2', 'cl-2-1', 'cl-2-2', 'cl-1-3', 'cl-3-1', 'cl-1-1-1'];\nvar TABLET_LAYOUTS = ['cl-1', 'cl-2', 'cl-1-1', 'cl-1-2', 'cl-2-1', 'cl-2-2', 'cl-1-1-1'];\nvar MOBILE_LAYOUTS = [];\nvar AVAILABLE_LAYOUTS = device.desktop() ? DESKTOP_LAYOUTS : device.tablet() ? TABLET_LAYOUTS : MOBILE_LAYOUTS;\n\nmodule.exports = {\n    DEFAULT: DEFAULT_LAYOUT,\n    ALL: AVAILABLE_LAYOUTS,\n    getEmptyMultiChartsPlaceIndex: function getEmptyMultiChartsPlaceIndex() {\n        var multiChartsSettings = user.getUserCommonData().getMultiChartsSettings();\n\n        if (!multiChartsSettings || !multiChartsSettings.charts || !_.isArray(multiChartsSettings.charts)) {\n            return 0;\n        }\n\n        var layout = this.isLayoutAvailable(multiChartsSettings) ? multiChartsSettings.layout : this.DEFAULT;\n        var SIZE = this.getSizeByName(layout);\n\n        var index = _.findIndex(multiChartsSettings.charts, function (chart) {\n            return chart === null;\n        });\n\n        if (index < 0) {\n            index = multiChartsSettings.charts.length;\n        }\n\n        return index < SIZE ? index : -1;\n    },\n    getSizeByName: function getSizeByName(name) {\n        return _.reduce(name.split('-'), function (sum, str) {\n            return (/^\\d+$/.test(str) ? sum + +str : sum\n            );\n        }, 0);\n    },\n    isLayoutAvailable: function isLayoutAvailable(settings) {\n        return settings && settings.layout && this.ALL.indexOf(settings.layout) >= 0;\n    }\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/multi-charts/multi.charts.layouts.js\n// module id = 2484\n// module chunks = 6 68\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/multi-charts/multi.charts.layouts.js?");

/***/ }),

/***/ 2721:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_, $) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var View = __webpack_require__(15);\n    var $ = __webpack_require__(7);\n    var _ = __webpack_require__(0);\n    var device = __webpack_require__(18);\n    var KeyboardEvents = __webpack_require__(143);\n    var wizardElementsTemplates = __webpack_require__(86);\n    var FormFieldSelect = __webpack_require__(193);\n    var settings = __webpack_require__(12);\n    var user = __webpack_require__(10);\n    var MultiChartsLayouts = __webpack_require__(2484);\n    var MultiChartsPending = __webpack_require__(894).default;\n    var BalloonMessageView = __webpack_require__(298);\n    var DrawingFactory = __webpack_require__(2286);\n    var ChartsConfigurator = __webpack_require__(848);\n    var core = __webpack_require__(5);\n\n    var ChartDispatcher = void 0;\n\n    var template = _.template(__webpack_require__(2722));\n\n    function matches(el, selector) {\n        var matchesSelector = el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector;\n\n        if (matchesSelector) {\n            return matchesSelector.call(el, selector);\n        }\n    }\n\n    function closest(node, css) {\n        while (node) {\n            if (matches(node, css)) {\n                return node;\n            } else {\n                node = node.parentElement;\n            }\n        }\n\n        return null;\n    }\n\n    module.exports = View.extend({\n\n        className: 'chart-toolbar separated',\n\n        events: function events() {\n            return _.extend({}, _.result(View.prototype, 'events'), {\n                'click .disabled, [disabled]': function clickDisabledDisabled(e) {\n                    return e.stopImmediatePropagation();\n                },\n                'click .fn-change-cursor': 'changeCursor',\n                'click .fn-change-rate-line': 'changeRateLine',\n                'click .fn-toolbar-zoom-in': 'zoomIn',\n                'click .fn-toolbar-zoom-out': 'zoomOut',\n                'click .fn-toolbar-settings': 'showChartSettings',\n                'click .fn-toolbar-indicators': 'showIndicatorsSettings',\n                'click .fn-toolbar-screenshot': 'makeScreenshot',\n                'click .fn-toolbar-minimize': 'minimize',\n                'click .fn-toolbar-fullscreen': 'fullscreen',\n                'click .fn-toolbar-restore-size': 'restoreSize',\n                'click .fn-toolbar-drawings': 'toggleDrawing',\n                'click .fn-start-drawing': 'startDrawing',\n                'click .fn-clear-drawings': 'clearDrawings',\n                'click .fn-toolbar-add-to-multicharts': 'addToMulticharts'\n            });\n        },\n\n        initialize: function initialize() {\n            ChartDispatcher = __webpack_require__(456);\n            View.prototype.initialize.apply(this, arguments);\n            this.hide();\n            this.render();\n        },\n\n        enableComparisonMode: function enableComparisonMode() {\n            this.comparisonMode = true;\n            this.$el.addClass('comparison');\n            this.options.chartPanel.enableComparisonMode(this.$rangesSelect.value());\n        },\n\n        disableComparisonMode: function disableComparisonMode() {\n            this.comparisonMode = false;\n            this.$el.removeClass('comparison');\n            this.options.chartPanel.disableComparisonMode(this.$typesSelect.value(), this.$periodsSelect.value());\n        },\n\n        show: function show(skipEvents) {\n            var _this = this;\n\n            if (this.isEmbedded()) {\n                this.$el.css({\n                    display: 'flex'\n                });\n            } else {\n                this.$el.css({\n                    display: 'flex'\n                });\n\n                var owner = this.options.relatedTo[0].getBoundingClientRect();\n                var me = this.el.getBoundingClientRect();\n                var isRtl = $('html').attr('dir') === 'rtl';\n\n                this.$el.css({\n                    position: 'fixed',\n                    visibility: 'visible',\n                    top: owner.top + owner.height / 2 - me.height / 2 + 'px',\n                    left: (isRtl ? owner.left : owner.right - me.width) + 'px',\n                    'z-index': 6000\n                });\n\n                if (!skipEvents) {\n                    setTimeout(function () {\n                        $(window).on('resize.chartToolbar' + _this.cid, _this.hide.bind(_this));\n                        $('body').on('click.chartToolbar' + _this.cid, _this.onBodyClick.bind(_this));\n                    }, 0);\n                }\n            }\n        },\n\n        onBodyClick: function onBodyClick(event) {\n            var toolbar = closest(event.target, '.chart-toolbar');\n\n            if (toolbar !== this.el) {\n                this.hide();\n            }\n        },\n\n\n        isEmbedded: function isEmbedded() {\n            return this.options.embedded;\n        },\n\n        hide: function hide() {\n            if (this.isEmbedded()) {\n                // this.$el.css({\n                //     display: 'none'\n                // });\n            } else {\n                $('body').off('click.chartToolbar' + this.cid);\n                $(window).off('resize.chartToolbar' + this.cid);\n                this.$el.css({\n                    position: 'fixed',\n                    top: '-1000px',\n                    left: '-1000px',\n                    display: 'none'\n                });\n            }\n        },\n\n        renderSearch: function renderSearch() {\n            var _this2 = this;\n\n            var SearchView = __webpack_require__(280);\n\n            this.$comparisonSearch = new SearchView({\n                el: this.$el.find('.chart-ic-search'),\n                placeholder: __('chart.instruments_comparison.add'),\n                columns: [{\n                    key: 'name',\n                    type: __webpack_require__(463),\n                    style: {\n                        width: '100%'\n                    }\n                }],\n                onRowClick: function onRowClick(event, model) {\n                    _this2.addComparisonInstrument(model.getSymbol());\n                }\n            });\n        },\n        createSelect: function createSelect(selector, name, options, value) {\n            var select = new FormFieldSelect({\n                el: this.$el.find(selector),\n                name: name,\n                value: value,\n                options: options,\n                template: wizardElementsTemplates.selectBox,\n                disable: false,\n                translationKey: '',\n                disableChangeByKeyboard: true,\n                transformOptionsValue: function transformOptionsValue(item) {\n                    return item;\n                },\n                transformOptionText: function transformOptionText(item) {\n                    return item;\n                },\n                title: __('wizard.form.label.DEFAULT_EMPTY')\n            });\n\n            select.value(value);\n\n            return select;\n        },\n\n        renderRanges: function renderRanges() {\n            var _this3 = this;\n\n            this.$rangesSelect = this.createSelect('.ranges', 'ranges', _.keys(ChartDispatcher.getRanges()), this.options.range.toLowerCase());\n            this.listenTo(this.$rangesSelect, 'change', function (model, value) {\n                _this3.options.chartPanel.onChangeRange(value);\n                _this3.hide();\n            });\n        },\n\n        renderPeriods: function renderPeriods() {\n            var _this4 = this;\n\n            this.$periodsSelect = this.createSelect('.periods', 'periods', _.keys(ChartDispatcher.getPeriods()), this.options.period.toLowerCase());\n            this.listenTo(this.$periodsSelect, 'change', function (model, value) {\n                _this4.options.chartPanel.onChangePeriod(value);\n                _this4.hide();\n            });\n        },\n\n        renderTypes: function renderTypes() {\n            var _this5 = this;\n\n            var types = ChartsConfigurator.defaultTypes;\n\n            if (settings.isChartInstrumentsComparisonEnabled()) {\n                types = types.slice(0);\n                types.push(ChartsConfigurator.comparisonType);\n            }\n\n            this.$typesSelect = new FormFieldSelect({\n                el: this.$el.find('.types'),\n                name: 'types',\n                options: types,\n                template: wizardElementsTemplates.selectBox,\n                disable: false,\n                disableChangeByKeyboard: true,\n                translationKey: '',\n                transformOptionsValue: function transformOptionsValue(item) {\n                    return item;\n                },\n                transformOptionText: function transformOptionText(item) {\n                    return '<i title=\"' + __('chart.toolbar.tooltip.type.' + item) + '\"></i><span>' + __('chart.toolbar.tooltip.type.' + item) + '</span>';\n                },\n                title: __('wizard.form.label.DEFAULT_EMPTY')\n            });\n            this.$typesSelect.value(this.options.type);\n            this.$typesSelect.$el.find('.dk-selected').data('value', this.options.type);\n            this.$typesSelect.$el.find('.styled-select').data('value', this.options.type);\n            this.listenTo(this.$typesSelect, 'change', function (model, value) {\n                _this5.$typesSelect.$el.find('.dk-selected').data('value', value);\n                _this5.$typesSelect.$el.find('.styled-select').data('value', value);\n                _this5.changeType(value);\n            });\n        },\n\n        render: function render() {\n            if (this.parent) {\n                $(this.parent).append(this.el);\n            }\n\n            if (this.isEmbedded()) {\n                this.$el.addClass('chart-toolbar-embedded');\n            } else {\n                this.$el.addClass('chart-toolbar-expanded');\n            }\n\n            this.$el.html(template({\n                drawings: DrawingFactory.types,\n                cursors: _.pluck(_.filter(ChartsConfigurator.defaultCursors, 'selectable'), 'type'),\n                rateLines: ChartsConfigurator.defaultRateLines,\n                isDesktop: device.desktop(),\n                isNotMobile: !device.mobile(),\n                isEmbedded: this.isEmbedded(),\n                multiChartsEnabled: settings.checkMultiChartsEnabled()\n            }));\n            this.renderSearch();\n            // let input = this.$el.find('.search-block-input input')[0];\n            // input.setAttribute('size', input.getAttribute('placeholder').length);\n            this.renderPeriods();\n            this.renderRanges();\n            this.renderTypes();\n            this.setActiveCursor(this.options.cursor.toLowerCase());\n            this.setActiveRateLine(this.options.rateLine.toLowerCase());\n\n            if (this.options.comparisonMode) {\n                this.comparisonMode = true;\n                this.$el.addClass('comparison');\n            }\n\n            var $addToMultichartsButton = this.$el.find('.fn-toolbar-add-to-multicharts');\n\n            if ($addToMultichartsButton) {\n                this.renderAddToMultichartsButton();\n                this.listenTo(user.getUserCommonData(), 'multicharts:updated', this.renderAddToMultichartsButton.bind(this));\n            }\n        },\n\n        addComparisonInstrument: function addComparisonInstrument(symbol) {\n            this.options.chartPanel.addComparisonInstrument(symbol);\n        },\n\n        zoomIn: function zoomIn() {\n            this.options.chartPanel.onZoomIn();\n            this.hide();\n        },\n\n        zoomOut: function zoomOut() {\n            this.options.chartPanel.onZoomOut();\n            this.hide();\n        },\n\n        showChartSettings: function showChartSettings() {\n            this.options.chartPanel.onShowChartSettings();\n            this.hide();\n        },\n\n        showIndicatorsSettings: function showIndicatorsSettings() {\n            this.options.chartPanel.onShowIndicatorsSettings();\n            this.hide();\n        },\n\n        startDrawing: function startDrawing(event) {\n            var _this6 = this;\n\n            var type = event.currentTarget.dataset.type;\n\n            this.setActiveDrawing(type);\n            this.options.chartPanel.startDrawing(type);\n            this.hide();\n\n            if (!this.stopDrawingKeyboardEvent) {\n                this.stopDrawingKeyboardEvent = KeyboardEvents({\n                    escape: function escape() {\n                        return _this6.stopDrawing();\n                    }\n                }, this);\n            }\n        },\n\n        stopDrawing: function stopDrawing() {\n            if (this.stopDrawingKeyboardEvent) {\n                this.stopDrawingKeyboardEvent.off();\n                delete this.stopDrawingKeyboardEvent;\n            }\n\n            this.setActiveDrawing();\n            this.options.chartPanel.stopDrawing();\n            this.hide();\n        },\n\n        toggleDrawing: function toggleDrawing(event) {\n            if (!closest(event.target, '.fn-start-drawing')) {\n                if (!$(event.currentTarget).hasClass('active')) {\n                    if (!event.currentTarget.dataset.type) {\n                        event.currentTarget.dataset.type = DrawingFactory.defaultType;\n                    }\n\n                    this.startDrawing(event);\n                } else {\n                    this.stopDrawing();\n                }\n            }\n        },\n\n        clearDrawings: function clearDrawings() {\n            this.stopDrawing();\n            this.options.chartPanel.clearDrawings();\n        },\n\n        changeType: function changeType(type) {\n            if (type === ChartsConfigurator.comparisonType) {\n                this.enableComparisonMode();\n            } else if (this.comparisonMode) {\n                this.disableComparisonMode();\n            } else {\n                this.options.chartPanel.onChangeType(type);\n            }\n\n            this.hide();\n        },\n\n\n        changeCursor: function changeCursor(event) {\n            var cursor = event.currentTarget.dataset.cursor;\n\n            this.setActiveCursor(cursor);\n            this.options.chartPanel.onChangeCursor(cursor);\n            this.hide();\n        },\n\n        changeRateLine: function changeRateLine(event) {\n            var rateLine = event.currentTarget.dataset.rateLine;\n\n            this.setActiveRateLine(rateLine);\n            this.options.chartPanel.onChangeRateLine(rateLine);\n            this.hide();\n        },\n\n        makeScreenshot: function makeScreenshot() {\n            this.options.chartPanel.makeScreenshot();\n            this.hide();\n        },\n\n        minimize: function minimize() {\n            this.options.chartPanel.toggleMinimize();\n            this.hide();\n            core.trigger('ui:chart:collapse');\n        },\n\n        restoreSize: function restoreSize() {\n            this.setActiveSize(false);\n            this.options.chartPanel.restoreSize();\n            this.hide();\n            core.trigger('ui:chart:expand');\n        },\n\n        fullscreen: function fullscreen() {\n            this.setActiveSize(true);\n            this.options.chartPanel.toggleFullscreen();\n            this.hide();\n        },\n\n        setActiveCursor: function setActiveCursor(cursor) {\n            this.$el.find('.fn-change-cursor.active').removeClass('active');\n            cursor && this.$el.find('.fn-change-cursor[data-cursor=\"' + cursor + '\"]').addClass('active');\n        },\n\n        setActiveRateLine: function setActiveRateLine(rateLine) {\n            this.$el.find('.fn-change-rate-line.active').removeClass('active');\n            this.$el.find('.fn-change-rate-line[data-rate-line=\"' + rateLine + '\"]').addClass('active');\n        },\n\n        setActiveType: function setActiveType(type) {\n            this.$el.find('.fn-change-type.active').removeClass('active');\n            this.$el.find('.fn-change-type[data-type=\"' + type + '\"]').addClass('active');\n        },\n\n        setActiveDrawing: function setActiveDrawing(type) {\n            this.$el.find('.fn-toolbar-drawings').removeClass('active');\n            this.$el.find('.fn-start-drawing.active').removeClass('active');\n\n            if (type) {\n                this.$el.find('.fn-toolbar-drawings').addClass('active');\n                this.$el.find('.fn-start-drawing[data-type=\"' + type + '\"]').addClass('active');\n            }\n        },\n\n        setActiveSize: function setActiveSize(fullscreen) {\n            if (fullscreen) {\n                this.$el.find('.fn-toolbar-fullscreen').css('display', 'none');\n                this.$el.find('.fn-toolbar-restore-size').css('display', 'flex');\n            } else {\n                this.$el.find('.fn-toolbar-fullscreen').css('display', 'flex');\n                this.$el.find('.fn-toolbar-restore-size').css('display', 'none');\n            }\n        },\n\n        destroy: function destroy() {\n            View.prototype.destroy.call(this);\n        },\n\n        updateComparisonSearch: function updateComparisonSearch(disable) {\n            disable ? this.disableComparisonSearch() : this.enableComparisonSearch();\n        },\n        disableComparisonSearch: function disableComparisonSearch() {\n            this.$comparisonSearch.disable();\n            this.$comparisonSearch.setPlaceholder(__('chart.instruments_comparison.max_reached'));\n        },\n        enableComparisonSearch: function enableComparisonSearch() {\n            this.$comparisonSearch.enable();\n            this.$comparisonSearch.setPlaceholder(__('chart.instruments_comparison.add'));\n        },\n\n\n        renderAddToMultichartsButton: function renderAddToMultichartsButton() {\n            MultiChartsPending.updateUI();\n\n            var $addToMultichartsButton = this.$el.find('.fn-toolbar-add-to-multicharts');\n\n            if (MultiChartsPending.isStatusNew()) {\n                $addToMultichartsButton.find('i').addClass('add-to-multicharts-new');\n            }\n\n            var index = MultiChartsLayouts.getEmptyMultiChartsPlaceIndex();\n\n            if (index >= 0) {\n                $addToMultichartsButton.removeClass('disabled');\n                $addToMultichartsButton.attr('title', __('chart.toolbar.tooltip.add_to_multicharts'));\n            } else {\n                $addToMultichartsButton.addClass('disabled');\n                $addToMultichartsButton.attr('title', __('chart.toolbar.tooltip.add_to_multicharts.disabled'));\n            }\n        },\n\n        addToMulticharts: function addToMulticharts() {\n            var _this7 = this;\n\n            var index = MultiChartsLayouts.getEmptyMultiChartsPlaceIndex();\n            var symbol = this.options.chartPanel.getInstrumentSymbol();\n\n            if (index >= 0 && symbol) {\n                var multiChartsSettings = user.getUserCommonData().getMultiChartsSettings();\n\n                if (!MultiChartsLayouts.isLayoutAvailable(multiChartsSettings)) {\n                    user.getUserCommonData().saveMultiChartsSettings({ layout: MultiChartsLayouts.DEFAULT });\n                }\n\n                ChartDispatcher.saveMultiChartsSettings(index, 'symbol', symbol).then(function () {\n                    var $addToMultichartsButton = _this7.$el.find('.fn-toolbar-add-to-multicharts');\n\n                    $addToMultichartsButton.find('i').removeClass('add-to-multicharts-new');\n                    MultiChartsPending.add(index);\n                    BalloonMessageView.show({\n                        title: __('tab.multi_charts'),\n                        body: __('chart.toolbar.tooltip.add_to_multicharts.message', _this7.options.chartPanel.instrument.getDisplayName())\n                    });\n                });\n            }\n        }\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(7)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/chart.toolbar.view.js\n// module id = 2721\n// module chunks = 6 68\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/chart.toolbar.view.js?");

/***/ }),

/***/ 2722:
/***/ (function(module, exports) {

eval("module.exports = \"<% if (isEmbedded) {%>\\n<div class=\\\"chart-buy-sell\\\">\\n    <div class=\\\"chart-sell\\\">\\n        <table>\\n            <tr></tr>\\n        </table>\\n    </div>\\n    <div class=\\\"chart-buy\\\">\\n        <table>\\n            <tr></tr>\\n        </table>\\n    </div>\\n</div>\\n<% }%>\\n<div class=\\\"chart-ic-search\\\"></div>\\n<div class=\\\"periods\\\"></div>\\n<div class=\\\"ranges\\\"></div>\\n<div class=\\\"types\\\"></div>\\n<div class=\\\"controls\\\">\\n    <% if (isNotMobile && isEmbedded && multiChartsEnabled) {%>\\n    <div class=\\\"btn fn-toolbar-add-to-multicharts chart-toolbar-add-to-multicharts\\\"\\n         title=\\\"<%=__('chart.toolbar.tooltip.add_to_multicharts')%>\\\">\\n        <i class=\\\"add-to-multicharts icon\\\"></i>\\n    </div>\\n    <% }%>\\n    <% if (isDesktop) {%>\\n    <div class=\\\"btn fn-toolbar-zoom-in chart-toolbar-zoom-in\\\"\\n         title=\\\"<%=__('chart.toolbar.tooltip.zoom_in')%>\\\">\\n        <i class=\\\"icon-chart-zoomin\\\"></i>\\n    </div>\\n    <div class=\\\"btn fn-toolbar-zoom-out chart-toolbar-zoom-out\\\"\\n         title=\\\"<%=__('chart.toolbar.tooltip.zoom_out')%>\\\">\\n        <i class=\\\"icon-chart-zoomout\\\"></i>\\n    </div>\\n    <% }%>\\n    <div class=\\\"btn fn-toolbar-settings chart-toolbar-settings\\\"\\n         title=\\\"<%=__('chart.toolbar.tooltip.chart_settings')%>\\\">\\n        <i class=\\\"icon-chart-settings\\\"></i>\\n    </div>\\n    <div class=\\\"btn fn-toolbar-indicators chart-toolbar-indicators\\\"\\n         title=\\\"<%=__('chart.toolbar.tooltip.indicators')%>\\\">\\n        <i class=\\\"icon-indicators\\\"></i>\\n    </div>\\n    <% if (isDesktop && _.size(drawings) > 0) {%>\\n    <div class=\\\"btn fn-toolbar-drawings chart-toolbar-drawings\\\" title=\\\"<%=__('chart.toolbar.tooltip.drawing_tools')%>\\\">\\n        <i class=\\\"icon-chart-edit\\\"></i>\\n        <div class=\\\"sub-menu left-side\\\">\\n            <% _.each(drawings, function (drawing,type) {%>\\n            <div class=\\\"drawing <%-type.replace(/_/g, '-')%> fn-start-drawing\\\"\\n                 data-type=\\\"<%-type%>\\\">\\n                <div><%=__(drawing.label)%></div>\\n            </div>\\n            <% }); %>\\n            <div class=\\\"drawing clear fn-clear-drawings\\\">\\n                <div><%=__('chart_drawings.clear')%></div>\\n            </div>\\n        </div>\\n    </div>\\n    <% }%>\\n    <% if (isDesktop && _.size(cursors) > 0) {%>\\n    <div class=\\\"btn fn-toolbar-cursors chart-toolbar-cursors\\\" title=\\\"<%=__('chart.toolbar.tooltip.cursors')%>\\\">\\n        <i class=\\\"icon-chart-cursor\\\"></i>\\n        <div class=\\\"sub-menu left-side\\\">\\n            <% _.each(cursors, function (cursor) {%>\\n            <div class=\\\"cursor <%-cursor%> fn-change-cursor\\\" data-cursor=\\\"<%-cursor%>\\\"\\n                 title=\\\"<%=__('chart_cursors.' + cursor)%>\\\">\\n                <div><%=__('chart_cursors.' + cursor)%></div>\\n            </div>\\n            <% }); %>\\n        </div>\\n    </div>\\n    <% }%>\\n    <% if (isDesktop && _.size(rateLines) > 1) {%>\\n    <div class=\\\"btn fn-toolbar-rate-line chart-toolbar-rate-line\\\" title=\\\"<%=__('chart.toolbar.tooltip.rate-lines')%>\\\">\\n        <i class=\\\"lines icon\\\"></i>\\n        <div class=\\\"sub-menu left-side\\\">\\n            <% _.each(rateLines, function (rateLine) {%>\\n            <div class=\\\"rateLine fn-change-rate-line\\\" data-rate-line=\\\"<%-rateLine%>\\\">\\n                <div><%=__('chart_rate_lines.' + rateLine)%></div>\\n            </div>\\n            <% }); %>\\n        </div>\\n    </div>\\n    <% }%>\\n</div>\\n<div class=\\\"sizes\\\">\\n    <% if (isDesktop) {%>\\n    <div class=\\\"btn fn-toolbar-screenshot chart-toolbar-screenshot\\\" title=\\\"<%=__('chart.toolbar.tooltip.screenshot')%>\\\">\\n        <i class=\\\"icon-chart-screenshot\\\"></i></div>\\n    <% }%>\\n    <% if (isEmbedded) {%>\\n    <div class=\\\"btn fn-toolbar-minimize chart-toolbar-minimize minimize\\\"\\n         title=\\\"<%=__('chart.toolbar.tooltip.minimize')%>\\\"><i\\n            class=\\\"icon-chart-minimize\\\"></i></div>\\n    <% }%>\\n    <div class=\\\"btn fn-toolbar-restore-size chart-toolbar-restore-size restore-size\\\"\\n         title=\\\"<%=__('chart.toolbar.tooltip.restore_size')%>\\\"><i class=\\\"restore-size icon\\\"></i>\\n    </div>\\n    <div class=\\\"btn fn-toolbar-fullscreen chart-toolbar-fullscreen fullscreen\\\"\\n         title=\\\"<%=__('chart.toolbar.tooltip.fullscreen')%>\\\">\\n        <i class=\\\"icon-full-chart\\\"></i></div>\\n</div>\\n\";\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/templates/chart.toolbar.view.html\n// module id = 2722\n// module chunks = 6 68\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/templates/chart.toolbar.view.html?");

/***/ }),

/***/ 2896:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_, $) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var ChartPanelView = __webpack_require__(2374);\n    var $ = __webpack_require__(7);\n    var _ = __webpack_require__(0);\n    var core = __webpack_require__(5);\n    var device = __webpack_require__(18);\n    var user = __webpack_require__(10);\n    var instruments = __webpack_require__(17);\n    var TradingCentralView = __webpack_require__(2897);\n    var ChartsConfigurator = __webpack_require__(848);\n    var DP = __webpack_require__(145);\n    var ChartToolbar = __webpack_require__(2721);\n\n    var _require = __webpack_require__(168),\n        getUiSelectedInstrumentCategorySymbol = _require.getUiSelectedInstrumentCategorySymbol;\n\n    var CHART_SETTINGS_KEY = 'chart_settings';\n    var MIN_VIEWPORT_HEIGHT = 500;\n    var ChartsDispatcher = void 0;\n\n    module.exports = ChartPanelView.extend({\n\n        className: 'chart-panel',\n\n        events: function events() {\n            return _.extend({}, _.result(ChartPanelView.prototype, 'events'), {\n                'click .fn-chart-minimize': 'minimize',\n                'click .fn-chart-restore-size': 'restore'\n            });\n        },\n        initialize: function initialize(options) {\n            var _this = this;\n\n            ChartsDispatcher = __webpack_require__(456);\n\n            this.options = _.extend({}, options, this.loadLocalChartSettings(), {\n                chartId: 'main'\n            });\n\n            var period = null;\n\n            if (user.getApplicationSettings().get('deeplink') === true) {\n                user.getApplicationSettings().set('deeplink', false);\n                period = user.getApplicationSettings().get('chart');\n            }\n\n            if (DP.isDetected() && DP.get('chart')) {\n                period = DP.get('chart');\n            }\n\n            if (period) {\n                _.extend(this.options, { period: period });\n            }\n\n            ChartPanelView.prototype.initialize.call(this, this.options);\n\n            this.listenTo(core, 'ui:instruments:instrument-selected', this.instrumentRowSelected);\n            this.listenTo(core, 'ui:instruments:instrument-subrow-selected', this.instrumentSubrowSelected);\n\n            this.render();\n\n            this.$chartBox = this.$el.parent();\n            this.$chartSplitterBox = $('.chart-splitter-box');\n            this.$chartContainer = this.$el.find('.chart-container');\n            this.$fullscreenNotification = this.$el.find('.chart-fullscreen-notification');\n\n            this.tradingCentral = new TradingCentralView({ el: this.$el.find('.chart-trading-central') }, this.chart);\n            this.initToolbar();\n            this.chartToolbar.show();\n            this.$buyButton = this.$el.find('.chart-panel .chart-buy tr')[0];\n            this.$sellButton = this.$el.find('.chart-panel .chart-sell tr')[0];\n\n            if (this.options.symbol) {\n                this.onInstrumentSelected(this.options.symbol);\n                delete this.options.symbol;\n            } else if (this.instrument) {\n                this.resubscribeChart();\n            }\n\n            if (device.mobile() && device.portrait() && window.innerHeight < MIN_VIEWPORT_HEIGHT) {\n                this.minimize();\n            }\n\n            this.instrumentRowSelected(getUiSelectedInstrumentCategorySymbol(store.getState()));\n\n            if (this.comparisonMode) {\n                this.initComparisonInstruments();\n                _.each(this.options.comparison, function (symbol) {\n                    var instrument = instruments.getInstrumentBySymbol(symbol);\n\n                    if (instrument && instrument.isVisible()) {\n                        _this.addComparisonInstrument(instrument.getSymbol());\n                    }\n                });\n            }\n        },\n        minimize: function minimize() {\n            this.toggleMinimize();\n        },\n        restore: function restore() {\n            this.restoreSize();\n        },\n        getLoadingContainer: function getLoadingContainer() {\n            return this.$el.parent();\n        },\n        showSearch: function showSearch() {\n            if (this.size.fullscreen) {\n                ChartPanelView.prototype.showSearch.call(this);\n            }\n        },\n        initToolbar: function initToolbar() {\n            if (!this.chartToolbar) {\n                this.chartToolbar = new ChartToolbar({\n                    embedded: true,\n                    comparisonMode: this.comparisonMode,\n                    parent: this.$el.find('.chart-header'),\n                    chartPanel: this,\n                    type: this.type,\n                    cursor: this.cursor,\n                    period: this.period,\n                    range: this.range,\n                    rateLine: this.rateLine\n                });\n            }\n        },\n\n\n        render: function render() {\n            this.template = _.template(__webpack_require__(2899));\n            this.$el.addClass('single');\n            ChartPanelView.prototype.render.call(this);\n        },\n\n        instrumentRowSelected: function instrumentRowSelected(symbol, model) {\n            var tradesConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n                openPositionsSelected: true,\n                ordersSelected: true,\n                selectedSubRowsIds: []\n            };\n\n            var instrument = instruments.getInstrumentBySymbol(symbol);\n\n            instrument && this.onInstrumentSelected(symbol, instrument, {\n                showTrades: ChartsDispatcher.getChartSettings().switchers.showTrades,\n                showAllOpenPositions: tradesConfig.openPositionsSelected,\n                showAllOrders: tradesConfig.ordersSelected,\n                visibleTradesIds: tradesConfig.selectedSubRowsIds\n            });\n        },\n        instrumentSubrowSelected: function instrumentSubrowSelected(symbol, model) {\n            var tradesConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n                openPositionsSelected: false,\n                ordersSelected: false,\n                selectedSubRowsIds: []\n            };\n\n            var instrument = instruments.getInstrumentBySymbol(symbol);\n\n            instrument && this.onInstrumentSelected(symbol, instrument, {\n                showTrades: ChartsDispatcher.getChartSettings().switchers.showTrades,\n                showAllOpenPositions: tradesConfig.openPositionsSelected,\n                showAllOrders: tradesConfig.ordersSelected,\n                visibleTradesIds: tradesConfig.selectedSubRowsIds\n            });\n        },\n\n        /*------------------*/\n\n        onChangePeriod: function onChangePeriod(period) {\n            ChartPanelView.prototype.onChangePeriod.apply(this, arguments);\n            this.savePeriod(period);\n        },\n\n        onChangeRange: function onChangeRange(range) {\n            ChartPanelView.prototype.onChangeRange.apply(this, arguments);\n            this.saveRange(range);\n        },\n\n        enableComparisonMode: function enableComparisonMode() {\n            var _this2 = this;\n\n            ChartPanelView.prototype.enableComparisonMode.apply(this, arguments);\n            this.saveType(ChartsConfigurator.comparisonType);\n            this.saveRange(this.range);\n\n            if (this.comparisonMode) {\n                _.each(this.loadLocalChartSettings().comparison, function (symbol) {\n                    var instrument = instruments.getInstrumentBySymbol(symbol);\n\n                    if (instrument && instrument.isVisible()) {\n                        _this2.addComparisonInstrument(instrument.getSymbol());\n                    }\n                });\n            }\n        },\n\n        disableComparisonMode: function disableComparisonMode(type, period) {\n            ChartPanelView.prototype.disableComparisonMode.apply(this, arguments);\n            this.saveType(type);\n            this.savePeriod(period);\n        },\n\n        addComparisonInstrument: function addComparisonInstrument(symbol) {\n            ChartPanelView.prototype.addComparisonInstrument.apply(this, arguments);\n\n            if (this.comparisonInstruments.contains(symbol)) {\n                this.saveComparison(symbol, true);\n            }\n        },\n\n        removeComparisonInstrument: function removeComparisonInstrument(symbol) {\n            ChartPanelView.prototype.removeComparisonInstrument.apply(this, arguments);\n            this.saveComparison(symbol, false);\n        },\n\n        onChangeType: function onChangeType(type) {\n            ChartPanelView.prototype.onChangeType.apply(this, arguments);\n            this.saveType(type);\n        },\n\n        onChangeRateLine: function onChangeRateLine(rateLine) {\n            ChartPanelView.prototype.onChangeRateLine.apply(this, arguments);\n            this.saveRateLine(rateLine);\n        },\n\n        onChangeCursor: function onChangeCursor(cursor) {\n            ChartPanelView.prototype.onChangeCursor.apply(this, arguments);\n            this.saveCursor(cursor);\n        },\n\n        saveLocalChartSettings: function saveLocalChartSettings(key, value) {\n            var chartSettings = this.loadLocalChartSettings();\n\n            chartSettings[key] = value;\n            localStorage.setItem(CHART_SETTINGS_KEY, JSON.stringify(chartSettings));\n        },\n\n        loadLocalChartSettings: function loadLocalChartSettings() {\n            var chartSettings = localStorage.getItem(CHART_SETTINGS_KEY);\n\n            return chartSettings ? JSON.parse(chartSettings) : {};\n        },\n\n        saveType: function saveType(type) {\n            this.saveLocalChartSettings('type', type);\n        },\n\n        savePeriod: function savePeriod(period) {\n            this.saveLocalChartSettings('period', period);\n        },\n\n        saveRange: function saveRange(range) {\n            this.saveLocalChartSettings('range', range);\n        },\n\n        saveRateLine: function saveRateLine(rateLine) {\n            this.saveLocalChartSettings('rateLine', rateLine);\n        },\n\n        saveCursor: function saveCursor(cursor) {\n            this.saveLocalChartSettings('cursor', cursor);\n        },\n\n        saveComparison: function saveComparison(symbol, add) {\n            var chartSettings = localStorage.getItem(CHART_SETTINGS_KEY);\n\n            chartSettings = chartSettings ? JSON.parse(chartSettings) : {};\n            var comparisonInstruments = chartSettings['comparison'] || [];\n\n            var index = comparisonInstruments.indexOf(symbol);\n\n            if (add) {\n                if (index < 0) {\n                    comparisonInstruments.push(symbol);\n                }\n            } else {\n                if (index >= 0) {\n                    comparisonInstruments.splice(index, 1);\n                }\n            }\n\n            chartSettings['comparison'] = comparisonInstruments;\n\n            localStorage.setItem(CHART_SETTINGS_KEY, JSON.stringify(chartSettings));\n        }\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(7)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/chart-panel/chart.panel.main.view.js\n// module id = 2896\n// module chunks = 68\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/chart-panel/chart.panel.main.view.js?");

/***/ }),

/***/ 2897:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var View = __webpack_require__(15);\n    var $ = __webpack_require__(7);\n    var _ = __webpack_require__(0);\n    var core = __webpack_require__(5);\n    var server = __webpack_require__(11);\n    var device = __webpack_require__(18);\n    var moment = __webpack_require__(6);\n    var stream = __webpack_require__(29);\n    var user = __webpack_require__(10);\n    var Timezone = __webpack_require__(127);\n    var LoadingView = __webpack_require__(35);\n\n    var template = _.template(__webpack_require__(2898));\n\n    var UNAVAILABLE_MESSAGE = _.template('<div class=\\'tc-instrument-unavailable\\'><%=__(\\'trading.central.unavailable.description\\')%></div>');\n\n    var SECONDS_IN_DAY = 60 * 60 * 24;\n    var INTRADAY_PARAMETER = 'INTRADAY';\n    var SHORT_TERM_PARAMETER = 'ST';\n\n    var DATA_LOADING_TIMEOUT = 10000;\n\n    module.exports = View.extend({\n        events: function events() {\n            return _.extend({}, _.result(View.prototype, 'events'), {\n                'click .fn-resize': 'resize'\n            });\n        },\n\n        minimized: false,\n\n        initialize: function initialize(options, chart) {\n            this.$el.addClass('tc');\n            this.chart = chart;\n            View.prototype.initialize.apply(this, arguments);\n            this.listenTo(core, 'stream:type:TRADING_CENTRAL', this._onTCDataReceived);\n        },\n\n        render: function render() {\n            this.$el.html(template(this.data));\n            this.$el.find('.tc-resistance > span').css('color', this.data.lines[0].colors[0]);\n            this.$el.find('.tc-support > span').css('color', this.data.lines[1].colors[0]);\n            this.$el.find('.tc-pivot > span').css('color', this.data.lines[2].colors[0]);\n        },\n\n        updateChartSize: function updateChartSize() {\n            core.trigger('ui:chart:update-size', -this.height);\n            this.height = this.minimized ? 0 : parseInt(this.$el.css('height'));\n            core.trigger('ui:chart:update-size', this.height);\n        },\n\n        handleSize: function handleSize() {\n            if (this.minimized) {\n                this.$el.find('.tc-wrapper').css('display', 'none');\n                this.$el.find('.tc-button-wrapper').css('display', 'block');\n            } else {\n                this.$el.find('.tc-wrapper').css('display', 'flex');\n                this.$el.find('.tc-button-wrapper').css('display', 'none');\n            }\n\n            this.updateChartSize();\n        },\n\n        resize: function resize() {\n            this.minimized = !this.minimized;\n            this.handleSize();\n            this.chart.reflow();\n            this.chart._redrawChart();\n        },\n\n        _onTCDataReceived: function _onTCDataReceived(data) {\n            if (this.symbol !== data.symbol) {\n                return;\n            }\n\n            this.loadingTimeout && clearTimeout(this.loadingTimeout);\n\n            this.data = _.extend({}, user.getUserCommonData().getTradingCentralSettings(), data);\n            this.data.formattedTitle = __('trading.central.preference.title') + ' ' + __('trading.central.term.' + this.data.term.toLowerCase()) + ' ' + (this.data.pivot === this.data.resistance1 ? __('trading.central.preference.decline') : this.data.pivot === this.data.support1 ? __('trading.central.preference.rise') : '');\n\n            var userTimezone = Timezone.user;\n\n            this.data.formattedDate = userTimezone.applyOffset('' + data.date + data.hour, 'YYYYMMDDHH:mm', 'DD/MM/YYYY HH:mm') + ' (' + userTimezone.GMTPostfix() + ')';\n\n            this.render();\n\n            this.updateChartSize();\n\n            this.handleSize();\n            this.chart.reflow();\n            this.chart.updateTradingCentral(this.data);\n        },\n\n        _onDataUnavailable: function _onDataUnavailable() {\n            this.loadingView && this.loadingView.destroy();\n            this.$el.html(UNAVAILABLE_MESSAGE());\n            this.chart.reflow();\n        },\n\n        isTradingCentralEnabled: function isTradingCentralEnabled() {\n            return device.desktop() && user.getUserAccountServices().isTradingCentralAvailable() && user.getUserCommonData().isTradingCentralEnabled();\n        },\n\n        subscribe: function subscribe(_ref) {\n            var instrument = _ref.instrument,\n                period = _ref.period;\n\n            if (!this.isTradingCentralEnabled()) {\n                return;\n            }\n\n            this.symbol = instrument.getSymbol();\n\n            this.loadingView && this.loadingView.destroy();\n            this.loadingView = new LoadingView({\n                parent: this.$el,\n                position: 'relative',\n                translucent: '2'\n            });\n\n            this.chart.reflow();\n\n            this.loadingTimeout && clearTimeout(this.loadingTimeout);\n            this.loadingTimeout = setTimeout(this._onDataUnavailable.bind(this), DATA_LOADING_TIMEOUT);\n\n            server.unsubscribeTradingCentral(stream.getAtmosphereId()).then(function () {\n                server.subscribeTradingCentral(stream.getAtmosphereId(), instrument.getSymbol(), __webpack_require__(456).getPeriod(period).seconds <= SECONDS_IN_DAY ? INTRADAY_PARAMETER : SHORT_TERM_PARAMETER);\n            });\n        },\n\n        unsubscribe: function unsubscribe() {\n            var _this = this;\n\n            this.clear();\n\n            if (!_.isUndefined(this.symbol)) {\n                server.unsubscribeTradingCentral(stream.getAtmosphereId()).then(function () {\n                    return _this.symbol = undefined;\n                });\n            }\n        },\n\n        clear: function clear() {\n            this.$el.empty();\n            core.trigger('ui:chart:update-size', -this.height);\n            this.height = 0;\n            this.chart.reflow();\n        },\n\n        destroy: function destroy() {\n            View.prototype.destroy.call(this);\n        }\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/trading.central.view.js\n// module id = 2897\n// module chunks = 68\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/trading.central.view.js?");

/***/ }),

/***/ 2898:
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"tc-wrapper\\\">\\n    <div class=\\\"tc-info\\\">\\n        <div class=\\\"tc-header\\\"><%=formattedTitle%></div>\\n        <div><%=title%></div>\\n        <% _.each(paragraphs, function(paragraph){ %>\\n        <div><%=paragraph%></div>\\n        <% }) %>\\n        <div>(<%=formattedDate%>)</div>\\n    </div>\\n    <div class=\\\"tc-legend-full\\\">\\n        <div class=\\\"tc-header\\\"><%=__('trading.central.study.legend')%></div>\\n        <div class=\\\"tc-resistance\\\"><%= __('trading.central.lines.extended.resistance')%></div>\\n        <div class=\\\"tc-support\\\"><%= __('trading.central.lines.extended.support')%></div>\\n        <div class=\\\"tc-pivot\\\"><%= __('trading.central.lines.extended.pivot')%></div>\\n\\n        <button class=\\\"btn btn-default tc-minimize fn-resize\\\">\\n            <%=__('trading.central.button.minimize')%><i></i>\\n        </button>\\n    </div>\\n</div>\\n<div class=\\\"tc-legend-short\\\">\\n\\n</div>\\n<div class=\\\"tc-button-wrapper\\\" style=\\\"display: none\\\">\\n    <button class=\\\"btn btn-default tc-expand fn-resize\\\">\\n        <%=__('trading.central.button.expand')%><i></i>\\n    </button>\\n</div>\";\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/templates/trading.central.html\n// module id = 2898\n// module chunks = 68\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/templates/trading.central.html?");

/***/ }),

/***/ 2899:
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"chart-panel-content\\\">\\n    <div class=\\\"chart-header\\\">\\n        <div class=\\\"chart-info-wrapper fn-show-search\\\">\\n            <div class=\\\"chart-search-button\\\"></div>\\n            <div class=\\\"chart-info\\\">\\n                <div class=\\\"chart-title\\\"></div>\\n                <div class=\\\"chart-subtitle\\\"></div>\\n            </div>\\n            <div class=\\\"chart-basket\\\">\\n                <div class=\\\"chart-basket-title\\\"></div>\\n                <div class=\\\"chart-basket-info\\\"></div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"chart-instruments-comparison-panel\\\"></div>\\n    <div class=\\\"chart-container\\\"></div>\\n    <div class=\\\"minimize-mobile fn-chart-minimize mobile\\\"><i class=\\\"icon-double-arrow-down \\\"></i></div>\\n    <div class=\\\"chart-fullscreen-notification\\\">\\n        <%-__('chart.fullscreen_notification')%>\\n    </div>\\n    <div class=\\\"chart-trading-central\\\"></div>\\n    <div class=\\\"chart-search\\\">\\n        <div class=\\\"chart-search-close fn-hide-search\\\"><i class=\\\"icon-close-blue\\\"></i></div>\\n        <div class=\\\"chart-search-block-wrapper\\\"></div>\\n    </div>\\n</div>\\n<div class=\\\"chart-panel-content-minimized\\\">\\n    <i class=\\\"expand icon fn-chart-restore-size hidden-xs\\\"></i><a class=\\\"fn-chart-restore-size hidden-xs\\\"><%=__('chart.expand_chart')%></a>\\n    <div class=\\\"expand restore-size-mobile fn-chart-restore-size hidden-sm hidden-md hidden-lg\\\">\\n        <div><i class=\\\"icon-double-arrow-up\\\"></i></div>\\n    </div>\\n</div>\";\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/chart/highcharts/chart-panel/templates/chart.panel.main.html\n// module id = 2899\n// module chunks = 68\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/chart-panel/templates/chart.panel.main.html?");

/***/ })

});