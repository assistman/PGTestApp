webpackJsonp([42],{

/***/ 2058:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_modules_instruments_components_InstrumentInfoHOC__ = __webpack_require__(2074);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_components_BackboneView__ = __webpack_require__(848);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_components_BackboneView___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_components_BackboneView__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_modules_closed_positions_closed_positions_view__ = __webpack_require__(2965);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_modules_closed_positions_closed_positions_view___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_modules_closed_positions_closed_positions_view__);\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n\n\n\n\n\nvar ClosedPositions = function ClosedPositions(props) {\n    return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2_components_BackboneView___default.a, _extends({ name: __WEBPACK_IMPORTED_MODULE_3_modules_closed_positions_closed_positions_view___default.a }, props));\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(__WEBPACK_IMPORTED_MODULE_0_modules_instruments_components_InstrumentInfoHOC__[\"a\" /* default */])(ClosedPositions));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/closed-positions/components/ClosedPositions.jsx\n// module id = 2058\n// module chunks = 42\n\n//# sourceURL=webpack:///./src/js/modules/closed-positions/components/ClosedPositions.jsx?");

/***/ }),

/***/ 2074:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_common_types__ = __webpack_require__(13);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react_redux__ = __webpack_require__(9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_store_ui_actions__ = __webpack_require__(96);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_underscore__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_underscore__);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n\n\n\nfunction mapDispatch(dispatch) {\n    return {\n        setInstrumentInfoVisibleIfNeeded: function setInstrumentInfoVisibleIfNeeded(shouldVisible) {\n            var visibilityState = shouldVisible ? __WEBPACK_IMPORTED_MODULE_0_common_types__[\"VISIBLE\"] : __WEBPACK_IMPORTED_MODULE_0_common_types__[\"HIDDEN\"];\n\n            dispatch(Object(__WEBPACK_IMPORTED_MODULE_3_store_ui_actions__[\"changeInstrumentInfoVisibility\"])(visibilityState));\n        },\n\n        dispatch: dispatch\n    };\n}\n\nfunction mapState(state) {\n    return {\n        deepLinkSymbol: state.deepLinks.list.symbol,\n        selectedSymbol: state.ui.selectedInstrumentCategorySymbol\n    };\n}\n\nvar InstrumentInfoHOC = function InstrumentInfoHOC(Component) {\n    var InstrumentInfo = function (_React$Component) {\n        _inherits(InstrumentInfo, _React$Component);\n\n        function InstrumentInfo() {\n            _classCallCheck(this, InstrumentInfo);\n\n            return _possibleConstructorReturn(this, (InstrumentInfo.__proto__ || Object.getPrototypeOf(InstrumentInfo)).apply(this, arguments));\n        }\n\n        _createClass(InstrumentInfo, [{\n            key: 'componentDidMount',\n            value: function componentDidMount() {\n                var _props = this.props,\n                    symbols = _props.symbols,\n                    hasData = _props.hasData,\n                    selectedSymbol = _props.selectedSymbol;\n\n                var allSymbols = __WEBPACK_IMPORTED_MODULE_4_underscore___default.a.isArray(symbols) ? symbols : __WEBPACK_IMPORTED_MODULE_4_underscore___default.a.keys(symbols);\n\n                if (!__WEBPACK_IMPORTED_MODULE_4_underscore___default.a.isNil(this.props.deepLinkSymbol)) {\n                    return;\n                }\n\n                if (!__WEBPACK_IMPORTED_MODULE_4_underscore___default.a.contains(allSymbols, selectedSymbol)) {\n                    this.props.dispatch(Object(__WEBPACK_IMPORTED_MODULE_3_store_ui_actions__[\"selectInstrumentSymbolAndUpdateUrl\"])(__WEBPACK_IMPORTED_MODULE_4_underscore___default.a.first(allSymbols)));\n                }\n\n                this.props.setInstrumentInfoVisibleIfNeeded(hasData);\n\n                if (this.props.deepLinkSymbol) {\n                    __WEBPACK_IMPORTED_MODULE_4_underscore___default.a.delay(function () {\n                        return store.dispatch(clearDeepLinkParam('symbol'));\n                    }, 0);\n                }\n            }\n        }, {\n            key: 'componentDidUpdate',\n            value: function componentDidUpdate() {\n                this.props.setInstrumentInfoVisibleIfNeeded(this.props.hasData);\n            }\n        }, {\n            key: 'render',\n            value: function render() {\n                return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(Component, this.props);\n            }\n        }]);\n\n        return InstrumentInfo;\n    }(__WEBPACK_IMPORTED_MODULE_1_react___default.a.Component);\n\n    return Object(__WEBPACK_IMPORTED_MODULE_2_react_redux__[\"connect\"])(mapState, mapDispatch)(InstrumentInfo);\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (InstrumentInfoHOC);\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/instruments/components/InstrumentInfoHOC.jsx\n// module id = 2074\n// module chunks = 7 8 9 10 14 15 16 17 18 19 20 21 22 23 24 25 26 27 29 31 32 33 35 36 41 42\n\n//# sourceURL=webpack:///./src/js/modules/instruments/components/InstrumentInfoHOC.jsx?");

/***/ }),

/***/ 2754:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_, $) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var $ = __webpack_require__(7);\n    var _ = __webpack_require__(0);\n    var BaseView = __webpack_require__(15);\n    var LoadingView = __webpack_require__(35);\n    var core = __webpack_require__(5);\n    var BaseCollection = __webpack_require__(50);\n    var instrumentCollection = __webpack_require__(142);\n    var Moment = __webpack_require__(6);\n    var user = __webpack_require__(10);\n    var Flatpickr = __webpack_require__(223);\n    var Timezone = __webpack_require__(127);\n\n    var filterTemplate = _.template(__webpack_require__(2755));\n    var filtersTemplate = _.template(__webpack_require__(2756));\n\n    var START = 'start';\n    var END = 'end';\n    var DATA_LOADING_TIMEOUT = 10000;\n\n    var FiltersView = BaseView.extend({\n        filter: {\n            instruments: 'null',\n            period: 'today',\n            beginPeriod: new Date(),\n            endPeriod: new Date()\n        },\n\n        filterOptions: {\n            instruments: {},\n            period: {\n                custom: 'history.period.custom',\n                all: 'history.period.all',\n                today: 'history.period.day',\n                '7|Date': 'history.period.week',\n                '14|Date': 'history.period.fortnight',\n                '1|Month': 'history.period.month',\n                '3|Month': 'history.period.season',\n                '6|Month': 'history.period.halfyear',\n                '12|Month': 'history.period.year'\n            }\n        },\n\n        collection: new BaseCollection(),\n\n        itemsStore: {},\n        calendarInstances: {},\n        localStorageKey: null,\n\n        tagName: 'div',\n        className: 'content',\n\n        /**\n         * Prepare filter object for rendering\n         */\n        prepareFilters: function prepareFilters() {\n            var _this = this;\n\n            if (this.filter.instruments !== 'null') {\n                var instrument = instrumentCollection.getInstrumentBySymbol(this.filter.instruments);\n\n                if (instrument) {\n                    this.filterOptions.instruments[instrument.get('symbol')] = instrument.get('name');\n                } else {\n                    this.filterOptions.instruments[this.filter.instruments] = this.filter.instruments;\n                }\n            }\n\n            this.$el.find('.filter-basic .form-inline').empty();\n            _.each(this.filterOptions, function (option, key, list) {\n                _this.$el.find('.filter-basic .form-inline').append(filterTemplate({\n                    filterKey: key,\n                    filter: _this.filter[key],\n                    filterOptions: option\n                }));\n                _this.$el.find('#label-' + key).html(__('history.' + key));\n            });\n\n            this.hideLoading();\n        },\n\n\n        /**\n         * Start listen required events - changes in filter controls\n         * @returns {Object}\n         */\n        events: function events() {\n            return _.extend({}, _.result(BaseView.prototype, 'events'), {\n                'change select[data-key=instruments]': 'onFilterUpdated',\n                'change select[data-key=status]': 'onFilterUpdated',\n                'change select[data-key=period]': 'onFilterPeriodUpdated'\n            });\n        },\n\n\n        /**\n         * Change filter object & ask related data from server\n         * @param {string} filterKey - name of filter which was changed\n         * @param {Object} filterValue - new value of changed filter\n         */\n        updateFilter: function updateFilter(filterKey, filterValue) {\n            this.filter[filterKey] = filterValue;\n            this.showLoading();\n            this.applyFilter();\n        },\n\n\n        /**\n         * Event handler for changing instruments & status controls in filter\n         * @param {Event} e - change event\n         */\n        onFilterUpdated: function onFilterUpdated(e) {\n            this.updateFilter(e.currentTarget.dataset.key, e.currentTarget.value);\n        },\n\n\n        /**\n         * Event handler for changing controls with dates in filter (date range)\n         * @param {Array<Date>} selectedDates\n         * @param {string} dateStr\n         * @param {Object} instance\n         * @param {string} type\n         */\n        onFilterDatesUpdated: function onFilterDatesUpdated(selectedDates, dateStr, instance, type) {\n            var date = selectedDates[0];\n            var dateString = date.getDate() + '-' + (date.getMonth() + 1) + '-' + date.getFullYear();\n            var dateConverted = this.userTimezone.convertDateToTimestamp(dateString, 'DD-MM-YYYY');\n            var dateOffset = this.userTimezone.applyOffsetToTimestamp(dateConverted, null, type === START);\n            var dateFilter = new Date(dateOffset);\n\n            this.filter.period = 'custom';\n            this.$el.find('select[data-key=period]').val(this.filter.period);\n            this.updateFilter(instance.element.dataset.key, dateFilter);\n            this.calendarInstances.begin.set('maxDate', this.filter.endPeriod);\n            this.calendarInstances.end.set('minDate', this.userTimezone.convertTimestampAsNewDate(dateConverted));\n        },\n\n\n        /**\n         * Update values of related date fields (begin & end of the period)\n         * @param {Event} e - event object from period selectbox\n         */\n        onFilterPeriodUpdated: function onFilterPeriodUpdated(e) {\n            var filterKey = e.currentTarget.dataset.key;\n            var customPeriodElements = $(this.$el.find('.custom-period'));\n            var userTimezone = Timezone.user;\n            var filterValue = e.currentTarget.value;\n\n            this.showLoading();\n            this.filter[filterKey] = filterValue;\n\n            if (filterValue === 'custom') {\n                var beginDate = this.calendarInstances.begin.selectedDates[0];\n                var endDate = this.calendarInstances.end.selectedDates[0];\n                var beginFilterDate = void 0;\n                var endFilterDate = void 0;\n\n                if (beginDate) {\n                    var beginDateString = beginDate.getDate() + '-' + (beginDate.getMonth() + 1) + '-' + beginDate.getFullYear();\n\n                    beginFilterDate = userTimezone.convertDateAsNewDate(beginDateString, 'DD-MM-YYYY');\n                } else {\n                    beginFilterDate = new Date();\n                }\n\n                if (endDate) {\n                    var endDateString = endDate.getDate() + '-' + (endDate.getMonth() + 1) + '-' + endDate.getFullYear();\n\n                    endFilterDate = userTimezone.convertDateAsNewDate(endDateString, 'DD-MM-YYYY');\n                } else {\n                    endFilterDate = new Date();\n                }\n\n                customPeriodElements.removeClass('hidden');\n                this.filter.beginPeriod = beginFilterDate;\n                this.filter.endPeriod = endFilterDate;\n                this.applyFilter();\n\n                return;\n            }\n\n            customPeriodElements.addClass('hidden');\n\n            var endPeriod = new Date();\n            var beginPeriod = new Date();\n\n            if (filterValue === 'all') {\n                beginPeriod = this.userTimezone.setTimestampAsNewDate(user.getUserInfoModel().get('account').accountCreationTime);\n            }\n\n            filterValue = filterValue.split('|');\n\n            if (filterValue.length === 2) {\n                beginPeriod['set' + filterValue[1]](beginPeriod['get' + filterValue[1]]() - filterValue[0]);\n            }\n\n            this.filter.beginPeriod = beginPeriod;\n            this.filter.endPeriod = endPeriod;\n\n            this.applyFilter();\n        },\n        showLoading: function showLoading() {\n            this.$el.addClass('content-loading');\n            this.loadingView && this.loadingView.destroy();\n            this.loadingTimeout && clearTimeout(this.loadingTimeout);\n            this.loadingTimeout = setTimeout(this.onDataUnavailable.bind(this), DATA_LOADING_TIMEOUT);\n            this.loadingView = new LoadingView({\n                parent: this.$el,\n                position: 'absolute',\n                translucent: '2'\n            });\n        },\n        checkFilterRange: function checkFilterRange() {\n            if (this.filter && (!this.filter.beginPeriod || !this.filter.endPeriod)) {\n                this.filter.beginPeriod = this.userTimezone.getMoment().subtract(1, 'days').toDate();\n                this.filter.endPeriod = new Date();\n            }\n\n            if (this.filter && Moment(this.filter.endPeriod).isBefore(this.filter.beginPeriod)) {\n                this.filter.beginPeriod = this.filter.endPeriod;\n            }\n        },\n        hideLoading: function hideLoading() {\n            this.loadingTimeout && clearTimeout(this.loadingTimeout);\n            this.$el.removeClass('content-loading');\n            this.loadingView && this.loadingView.destroy();\n        },\n\n\n        /**\n         * Initialize this view\n         * @param {Object} options\n         */\n        initialize: function initialize(options) {\n            this.userTimezone = Timezone.user;\n\n            BaseView.prototype.initialize.apply(this, arguments);\n\n            if (this.localStorageKey) {\n                var filter = localStorage.getItem(this.localStorageKey);\n\n                if (filter) {\n                    this.filter = JSON.parse(filter);\n                }\n            }\n\n            this.subscribeAndRender();\n        },\n        subscribeAndRender: function subscribeAndRender() {\n            this.delegateEvents();\n\n            var isAdvancedTradingView = user.getUserCommonData().isAdvancedTradingView();\n\n            if (!isAdvancedTradingView) {\n                core.trigger('chart:display:hide');\n            }\n\n            this.listenTo(this.itemsStore, 'change', this.prepareFilters);\n            this.render();\n            this.applyFilter();\n        },\n\n\n        /**\n         * Format data for request to the server\n         * @param {Date} date - date object\n         * @returns {string} - formatted string with required date\n         */\n        formatDate: function formatDate(date) {\n            var result = date;\n\n            if (_.isUndefined(result)) {\n                result = new Date();\n            }\n\n            return this.userTimezone.formatTimestamp(result, 'YYYY-MM-DD');\n        },\n\n\n        /**\n         * Render the view\n         * @return {Object}\n         */\n        render: function render() {\n            var _this2 = this;\n\n            var calendarDateFormat = 'd/m/Y';\n            var currentDate = new Date();\n\n            BaseView.prototype.render.call(this);\n\n            this.$el.find('.panel-heading').html(filtersTemplate({\n                filter: this.filter\n            }));\n            this.prepareFilters();\n            this.checkFilterRange();\n\n            this.calendarInstances.begin = new Flatpickr(this.$el.find('input[data-key=beginPeriod]')[0], {\n                maxDate: Moment(this.filter.endPeriod).isBefore(currentDate) ? this.filter.endPeriod : currentDate,\n                minDate: this.userTimezone.convertTimestampAsNewDate(user.getUserInfoModel().get('account').accountCreationTime),\n                dateFormat: calendarDateFormat,\n                disableMobile: true,\n                defaultDate: this.filter.beginPeriod,\n                onChange: function onChange(selectedDates, dateStr, instance) {\n                    _this2.onFilterDatesUpdated(selectedDates, dateStr, instance, START);\n                }\n            });\n\n            this.calendarInstances.end = new Flatpickr(this.$el.find('input[data-key=endPeriod]')[0], {\n                maxDate: new Date(),\n                minDate: this.filter.beginPeriod,\n                dateFormat: calendarDateFormat,\n                disableMobile: true,\n                defaultDate: this.filter.endPeriod,\n                onChange: function onChange(selectedDates, dateStr, instance) {\n                    _this2.onFilterDatesUpdated(selectedDates, dateStr, instance, END);\n                }\n            });\n\n            return this;\n        },\n        destroy: function destroy() {\n            BaseView.prototype.destroy.call(this);\n\n            _.each(this.calendarInstances, function (element) {\n                element.destroy();\n            });\n        }\n    });\n\n    module.exports = FiltersView;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(7)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/filters/filters.view.js\n// module id = 2754\n// module chunks = 41 42\n\n//# sourceURL=webpack:///./src/js/modules/filters/filters.view.js?");

/***/ }),

/***/ 2755:
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"form-group\\\">\\n    <label class=\\\"_sr-only\\\" for=\\\"input-<%=filterKey%>\\\" id=\\\"label-<%=filterKey%>\\\"></label>\\n    <div class=\\\"styled-select\\\">\\n        <select class=\\\"form-control\\\" data-key=\\\"<%=filterKey%>\\\" id=\\\"input-<%=filterKey%>\\\">\\n            <% _.forEach(filterOptions, function(value, key) { %>\\n            <option value=\\\"<%= key %>\\\"\\n            <% if(key == filter){print('selected');} %>><% if (filterKey === 'instruments') {%><%= value %><%} else {%><%= __(value) %><% } %></option>\\n            <% }); %>\\n        </select>\\n    </div>\\n</div>\\n\";\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/filters/templates/filters.filter.html\n// module id = 2755\n// module chunks = 41 42\n\n//# sourceURL=webpack:///./src/js/modules/filters/templates/filters.filter.html?");

/***/ }),

/***/ 2756:
/***/ (function(module, exports) {

eval("module.exports = \"<nav class=\\\"navbar\\\">\\n    <div class=\\\"navbar-header\\\">\\n        <div class=\\\"navbar-form filter-basic\\\">\\n            <div class=\\\"form-inline\\\">\\n            </div>\\n        </div>\\n        <div class=\\\"navbar-form filter-period\\\">\\n            <div class=\\\"form-inline\\\">\\n                <div class=\\\"form-group custom-period <% if(filter.period !== 'custom'){print('hidden');} %> inner-addon right-addon\\\">\\n                    <label class=\\\"_sr-only\\\" for=\\\"inputFrom\\\"><%=__('history.from')%></label>\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" data-key=\\\"beginPeriod\\\" id=\\\"inputFrom\\\">\\n                    <i class=\\\"glyphicon icon-calendar\\\"></i>\\n                </div>\\n                <div class=\\\"form-group custom-period <% if(filter.period !== 'custom'){print('hidden');} %> inner-addon right-addon\\\">\\n                    <label class=\\\"_sr-only\\\" for=\\\"inputTo\\\"><%=__('history.to')%></label>\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" data-key=\\\"endPeriod\\\" id=\\\"inputTo\\\">\\n                    <i class=\\\"glyphicon icon-calendar\\\"></i>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</nav>\\n\";\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/filters/templates/filters.html\n// module id = 2756\n// module chunks = 41 42\n\n//# sourceURL=webpack:///./src/js/modules/filters/templates/filters.html?");

/***/ }),

/***/ 2757:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var React = __webpack_require__(4);\n    var Infinite = __webpack_require__(914).default;\n    var GridRow = __webpack_require__(463);\n    var GridRowExpanded = __webpack_require__(2758);\n    var _ = __webpack_require__(0);\n\n    var GridRows = React.createClass({\n        displayName: 'GridRows',\n\n        getDefaultProps: function getDefaultProps() {\n            return {\n                columns: [],\n                hiddenColumns: [],\n                collection: [],\n                screenSize: null,\n                customRowComponent: null,\n                customRowComponentXS: null,\n                customRowComponentSM: null,\n                customRowComponentMD: null,\n                customRowComponentLG: null,\n                onRowClick: function onRowClick() {},\n                selectedRowId: null,\n                toggleOnRowClick: false,\n                autoHideColumns: false\n            };\n        },\n\n        getInitialState: function getInitialState() {\n            return {\n                collection: this.props.collection,\n                rows: this.props.collection.slice(0, 20),\n                selectedRowId: this.props.selectedRowId,\n                expandedRows: [],\n                hasMore: true\n            };\n        },\n\n        getComponent: function getComponent() {\n            var screenSize = this.props.screenSize;\n            var defaultRowComponent = this.props.customRowComponent || GridRow;\n\n            if (_.isEmpty(screenSize)) {\n                return defaultRowComponent;\n            }\n\n            var propName = 'customRowComponent' + screenSize;\n            var customRowComponent = this.props[propName];\n\n            return !_.isEmpty(customRowComponent) ? customRowComponent : defaultRowComponent;\n        },\n\n        onRowClick: function onRowClick(e, model) {\n            this.setState({\n                selectedRowId: model.cid\n            });\n\n            if (_.isFunction(this.props.onRowClick)) {\n                this.props.onRowClick(e, model);\n            }\n        },\n\n        onRowToggle: function onRowToggle(rowId) {\n            var currentExpandedRows = this.state.expandedRows;\n            var isRowCurrentlyExpanded = currentExpandedRows.indexOf(rowId) !== -1;\n\n            var newExpandedRows = isRowCurrentlyExpanded ? currentExpandedRows.filter(function (id) {\n                return id !== rowId;\n            }) : currentExpandedRows.concat(rowId);\n\n            this.setState({\n                expandedRows: newExpandedRows,\n                selectedRowId: rowId\n            });\n        },\n        renderItem: function renderItem(model, Component, index) {\n            var _this = this;\n\n            var toggleCallback = function toggleCallback() {\n                return _this.onRowToggle(model.cid);\n            };\n            var isSelected = this.state.selectedRowId === model.cid;\n            var isExpanded = this.state.expandedRows.indexOf(model.cid) !== -1;\n            var itemRows = [React.createElement(Component, {\n                key: model.cid + isSelected,\n                columns: this.props.columns,\n                model: model,\n                isSelected: isSelected,\n                isExpanded: isExpanded,\n                couldBeExpanded: !!this.props.hiddenColumns.length,\n                screenSize: this.props.screenSize,\n                onRowClick: this.onRowClick,\n                toggle: toggleCallback,\n                toggleOnRowClick: this.props.toggleOnRowClick,\n                index: index,\n                autoHideColumns: this.props.autoHideColumns\n            })];\n\n            if (isExpanded && this.props.hiddenColumns.length) {\n                itemRows.push(React.createElement(GridRowExpanded, {\n                    key: model.cid + '-expanded',\n                    columns: this.props.columns,\n                    hiddenColumns: this.props.hiddenColumns,\n                    model: model,\n                    isSelected: isSelected,\n                    screenSize: this.props.screenSize,\n                    toggle: toggleCallback\n                }));\n            }\n\n            return itemRows;\n        },\n\n\n        handleInfiniteLoad: function handleInfiniteLoad() {\n            var elemLength = this.state.rows.length;\n            var newRows = this.state.collection.slice(elemLength, elemLength + 20);\n            var hasMore = this.state.collection.length > this.state.rows.length + 20;\n\n            this.setState({\n                isInfiniteLoading: false,\n                rows: this.state.rows.concat(newRows),\n                hasMore: hasMore\n            });\n        },\n\n        loader: function loader() {\n            return React.createElement(\n                'tr',\n                { className: 'loader' },\n                React.createElement(\n                    'td',\n                    null,\n                    __('loader.loading')\n                )\n            );\n        },\n\n        render: function render() {\n            var Component = this.getComponent();\n            var rows = this.state.rows.map(function (model, i) {\n                return this.renderItem(model, Component, i);\n            }.bind(this));\n\n            return React.createElement(\n                Infinite,\n                {\n                    element: 'tbody',\n                    className: 'rows',\n                    useWindow: false,\n                    selfScrolled: true,\n                    loadMore: this.handleInfiniteLoad,\n                    hasMore: this.state.hasMore,\n                    loader: this.loader(),\n                    threshold: 100\n                },\n                rows\n            );\n        }\n    });\n\n    module.exports = GridRows;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/grid/jsx/grid.rows.expandable.jsx\n// module id = 2757\n// module chunks = 41 42\n\n//# sourceURL=webpack:///./src/js/modules/grid/jsx/grid.rows.expandable.jsx?");

/***/ }),

/***/ 2758:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var React = __webpack_require__(4);\n    var GridExpandedProperties = __webpack_require__(2759);\n\n    var GridRowExpanded = React.createClass({\n        displayName: 'GridRowExpanded',\n\n        getDefaultProps: function getDefaultProps() {\n            return {\n                key: '',\n                model: null,\n                columns: [],\n                hiddenColumns: [],\n                screenSize: null,\n                contentComponent: null,\n                isSelected: false,\n                selectedRowClass: 'selected',\n                toggle: function toggle() {}\n            };\n        },\n\n        getRenderContent: function getRenderContent() {\n            var type = this.props.contentComponent || GridExpandedProperties;\n\n            return React.createElement(type, {\n                model: this.props.model,\n                columns: this.props.hiddenColumns\n            });\n        },\n\n        render: function render() {\n            var className = ['row', 'expandable-content', this.props.isSelected ? this.props.selectedRowClass : ''].join(' ');\n\n            return React.createElement(\n                'tr',\n                { className: className },\n                React.createElement(\n                    'td',\n                    { colSpan: this.props.columns.length },\n                    this.getRenderContent()\n                )\n            );\n        }\n    });\n\n    module.exports = GridRowExpanded;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/grid/jsx/grid.row.expanded.jsx\n// module id = 2758\n// module chunks = 41 42\n\n//# sourceURL=webpack:///./src/js/modules/grid/jsx/grid.row.expanded.jsx?");

/***/ }),

/***/ 2759:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var React = __webpack_require__(4);\n    var _ = __webpack_require__(0);\n\n    var Grid = React.createClass({\n        displayName: 'Grid',\n\n        getDefaultProps: function getDefaultProps() {\n            return {\n                columns: [],\n                model: null\n            };\n        },\n\n        getColumnByName: function getColumnByName(columnName) {\n            var found = _.filter(this.props.columns, function (item) {\n                return columnName === item.name;\n            });\n\n            return found[0];\n        },\n\n        render: function render() {\n            return React.createElement(\n                'div',\n                { className: 'properties-table' },\n                React.createElement(\n                    'table',\n                    null,\n                    React.createElement(\n                        'tbody',\n                        null,\n                        this.getDataRows()\n                    )\n                )\n            );\n        },\n\n        getDataRows: function getDataRows() {\n            var model = this.props.model;\n            var map = this.props.columns.map(function (column, i) {\n                var type = column.type || GridCell;\n                var props = _.extend({}, column.cellProps, { key: i, column: column, model: model });\n\n                return React.createElement(\n                    'tr',\n                    { key: model.cid + i },\n                    React.createElement(\n                        'th',\n                        null,\n                        __(column.name),\n                        ':'\n                    ),\n                    React.createElement(type, props)\n                );\n            });\n            return map;\n        }\n\n    });\n\n    module.exports = Grid;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/grid/jsx/grid.expanded.properties.jsx\n// module id = 2759\n// module chunks = 41 42\n\n//# sourceURL=webpack:///./src/js/modules/grid/jsx/grid.expanded.properties.jsx?");

/***/ }),

/***/ 2760:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var React = __webpack_require__(4);\n    var GridCell = __webpack_require__(300);\n\n    var GridRow = React.createClass({\n        displayName: 'GridRow',\n\n        getDefaultProps: function getDefaultProps() {\n            return {\n                key: '',\n                model: null,\n                columns: [],\n                screenSize: null,\n                selectedRowClass: 'selected',\n                isSelected: false,\n                isExpanded: false,\n                couldBeExpanded: false,\n                onRowClick: function onRowClick() {},\n                toggle: function toggle() {},\n                toggleOnRowClick: false,\n                autoHideColumns: false,\n                index: 0\n            };\n        },\n\n        getInitialState: function getInitialState() {\n            return {\n                isExpanded: false,\n                columns: this.props.columns\n            };\n        },\n\n        toggle: function toggle() {\n            var newState = !this.state.isExpanded;\n            this.props.toggle();\n            this.setState({\n                isExpanded: newState\n            });\n        },\n\n        getRenderCells: function getRenderCells() {\n            return this.props.columns.map(function (column, i) {\n                var type = column.type || GridCell;\n                var props = _.extend({}, column.cellProps, {\n                    key: i,\n                    column: column,\n                    model: this.props.model,\n                    expandableElement: this\n                });\n\n                return React.createElement(type, props);\n            }, this);\n        },\n\n        onRowClick: function onRowClick(e) {\n            if (this.props.toggleOnRowClick && this.props.couldBeExpanded) {\n                this.toggle();\n            }\n            this.props.onRowClick(e, this.props.model);\n        },\n\n        render: function render() {\n            var className = ['row', 'expandable', this.props.isSelected ? this.props.selectedRowClass : '', this.props.isExpanded ? 'expanded' : ''].join(' ');\n\n            return React.createElement(\n                'tr',\n                { className: className, onClick: this.onRowClick },\n                this.getRenderCells()\n            );\n        }\n    });\n\n    module.exports = GridRow;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/grid/jsx/grid.row.expandable.jsx\n// module id = 2760\n// module chunks = 41 42\n\n//# sourceURL=webpack:///./src/js/modules/grid/jsx/grid.row.expandable.jsx?");

/***/ }),

/***/ 2965:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var $ = __webpack_require__(7);\n    var _ = __webpack_require__(0);\n    var core = __webpack_require__(5);\n    var server = __webpack_require__(11);\n    var stream = __webpack_require__(28);\n    var FiltersView = __webpack_require__(2754);\n    var closedPositionsStore = __webpack_require__(953);\n\n    var template = _.template(__webpack_require__(2966));\n    var empty = __webpack_require__(2967);\n    var GridConfig = __webpack_require__(301);\n    var Grid = __webpack_require__(864);\n\n    var localStorageKey = 'closed_positions_filter';\n    var React = __webpack_require__(4);\n    var ReactDOM = __webpack_require__(19);\n    var Change = __webpack_require__(140);\n    var user = __webpack_require__(10);\n\n    core.on('ui:login:submit', function () {\n        return localStorage.removeItem(localStorageKey);\n    });\n\n    var ClosedPositionsView = FiltersView.extend({\n        filter: {\n            instruments: 'null',\n            period: 'today',\n            beginPeriod: new Date(),\n            endPeriod: new Date()\n        },\n\n        unavailableDataTemplate: _.template(__webpack_require__(2968)),\n        itemsStore: closedPositionsStore,\n        gridColumnsConfig: {},\n        localStorageKey: localStorageKey,\n\n        events: function events() {\n            return _.extend({}, _.result(FiltersView.prototype, 'events'), {\n                'click .fn-close-popup': 'onClose'\n            });\n        },\n\n        initialize: function initialize(options) {\n            FiltersView.prototype.initialize.apply(this, arguments);\n            this.listenTo(this.itemsStore, 'change', this.updateTotalPL);\n            core.trigger('chart:display:hide');\n        },\n\n        /**\n         * Prepare filter object for rendering\n         */\n        prepareFilters: function prepareFilters() {\n            var items = [];\n\n            this.filterOptions.instruments = { 'null': __('history.order.status.any') };\n\n            _.each(this.itemsStore.get('filterAll'), function (order) {\n                this.filterOptions.instruments[order.symbol] = order.name;\n            }, this);\n\n            items = this.itemsStore.get('filtered');\n\n            this.collection.reset(items);\n\n            FiltersView.prototype.prepareFilters.call(this);\n        },\n\n        /**\n         * Send request to server for the filtered data\n         */\n        applyFilter: function applyFilter() {\n            var filterData = {\n                ///@TODO move format date function to server class\n                'beginPeriod': this.formatDate(this.filter.beginPeriod),\n                'endPeriod': this.formatDate(this.filter.endPeriod),\n                'filterId': _.uniqueId('gwt-uid-') + '.',\n                'showPositions': true,\n                'symbol': this.filter.instruments\n            };\n\n            localStorage.setItem(this.localStorageKey, JSON.stringify(this.filter));\n\n            server.subscribePositionsFilters(stream.getAtmosphereId(), filterData);\n        },\n\n        /**\n         * Return configuration of column for grid\n         * @param {string} columnName\n         * @param {Object} overrideValues\n         * @returns {*}\n         */\n        getColumnConfig: function getColumnConfig(columnName) {\n            var overrideValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n            var config = this.gridColumnsConfig[columnName];\n\n            return _.extend(config ? config : GridConfig.getColumnConfig(columnName), overrideValues);\n        },\n\n        /**\n         * Render the view\n         */\n        render: function render() {\n            this.$el.html(template());\n            FiltersView.prototype.render.call(this);\n            this.gridView = Grid({\n                className: 'tab-closed-positions',\n                collection: this.collection,\n                empty: empty,\n                initialSort: __('history.position.exit.time'),\n                customRowsComponent: __webpack_require__(2757),\n                customRowComponent: __webpack_require__(2760),\n                toggleOnRowClick: true,\n                autoHideColumns: true,\n                columns: [this.getColumnConfig('toggleExpandableRow'), this.getColumnConfig('instrumentName'), this.getColumnConfig('positionDirection'), this.getColumnConfig('orderQuantity'), this.getColumnConfig('pl'), this.getColumnConfig('positionEntryPrice', { alwaysInExpandable: true }), this.getColumnConfig('positionExitPrice', { alwaysInExpandable: true }), this.getColumnConfig('positionEntryTime'), this.getColumnConfig('positionExitTime'), this.getColumnConfig('positionNumber'), this.getColumnConfig('orderNumber', { alwaysInExpandable: true }), this.getColumnConfig('positionCloseReason')],\n                columnsMD: [this.getColumnConfig('toggleExpandableRow'), this.getColumnConfig('instrumentName'), this.getColumnConfig('positionDirection'), this.getColumnConfig('orderQuantity'), this.getColumnConfig('pl'), this.getColumnConfig('positionEntryPrice'), this.getColumnConfig('positionExitPrice')],\n                columnsSM: [this.getColumnConfig('toggleExpandableRow'), this.getColumnConfig('instrumentName'), this.getColumnConfig('positionDirection'), this.getColumnConfig('orderQuantity'), this.getColumnConfig('pl')],\n                columnsXS: [this.getColumnConfig('toggleExpandableRow'), this.getColumnConfig('instrumentName'), this.getColumnConfig('positionDirection'), this.getColumnConfig('orderQuantity'), this.getColumnConfig('pl')]\n            }, this.$el.find('.closed-positions-grid')[0]);\n        },\n\n        onDataUnavailable: function onDataUnavailable() {\n            this.hideLoading();\n            this.$el.find('.closed-positions-grid').html(this.unavailableDataTemplate());\n        },\n\n        destroy: function destroy() {\n            ReactDOM.unmountComponentAtNode(this.$el.find('.panel-total-pl')[0]);\n            FiltersView.prototype.destroy.call(this);\n\n            //if destroy before user login\n            if (!_.isUndefined(this.gridView)) {\n                this.gridView.destroy();\n            }\n\n            this.collection.reset();\n        },\n\n        updateTotalPL: function updateTotalPL(itemsStore) {\n            var items = itemsStore.get('filtered');\n            var pl = _.reduce(items, function (sum, i) {\n                return sum + i.plOpen;\n            }, 0);\n\n            ReactDOM.render(React.createElement(Change, {\n                value: pl,\n                inline: true,\n                text: __('history.position.total.pl'),\n                prefix: user.getUserCurrencySymbol(),\n                precision: 2,\n                alwaysPrecision: true,\n                shouldZeroHide: true\n            }), this.$el.find('.panel-total-pl')[0]);\n        },\n\n        onClose: function onClose() {\n            core.navigateBack();\n        }\n    });\n\n    module.exports = ClosedPositionsView;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/closed-positions/closed.positions.view.js\n// module id = 2965\n// module chunks = 42\n\n//# sourceURL=webpack:///./src/js/modules/closed-positions/closed.positions.view.js?");

/***/ }),

/***/ 2966:
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"closed-positions filter-tab\\\">\\n    <div class=\\\"closed-positions-header\\\">\\n        <div class=\\\"closed-positions-title\\\">\\n            <div><%=__('tab.closed_positions')%></div>\\n        </div>\\n        <div class=\\\"header-actions fn-close-popup\\\">\\n            <i class=\\\"icon-close-circle\\\"></i>\\n        </div>\\n    </div>\\n    <div class=\\\"panel\\\">\\n        <div class=\\\"panel-heading\\\">\\n        </div>\\n\\n        <div class=\\\"panel-total-pl\\\">\\n        </div>\\n\\n        <div class=\\\"panel-body pane--height\\\">\\n            <div class=\\\"pane pane__fluid pane--height pane__scroll\\\">\\n                <div class=\\\"pane pane--height pane__scroll-content\\\">\\n                    <div class=\\\"closed-positions-grid\\\"></div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\";\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/closed-positions/templates/closed.positions.html\n// module id = 2966\n// module chunks = 42\n\n//# sourceURL=webpack:///./src/js/modules/closed-positions/templates/closed.positions.html?");

/***/ }),

/***/ 2967:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var React = __webpack_require__(4);\n\n    var Empty = React.createClass({\n        displayName: \"Empty\",\n\n        render: function render() {\n            return React.createElement(\n                \"div\",\n                { className: \"empty\" },\n                React.createElement(\"div\", { className: \"icon icon-closed-positions-empty\" }),\n                React.createElement(\n                    \"div\",\n                    { className: \"caption\" },\n                    __('instruments.nodata.closed_positions')\n                ),\n                React.createElement(\n                    \"div\",\n                    { className: \"text\" },\n                    __('history.empty.text')\n                )\n            );\n        }\n    });\n\n    module.exports = Empty;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/closed-positions/jsx/empty.jsx\n// module id = 2967\n// module chunks = 42\n\n//# sourceURL=webpack:///./src/js/modules/closed-positions/jsx/empty.jsx?");

/***/ }),

/***/ 2968:
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"filters-unavailable-data\\\">\\n    <div class=\\\"filters-unavailable-data-image\\\"></div>\\n    <div class=\\\"filters-unavailable-data-message\\\"><%-__('chart.no_data')%></div>\\n</div>\";\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/closed-positions/templates/unavailable.data.html\n// module id = 2968\n// module chunks = 42\n\n//# sourceURL=webpack:///./src/js/modules/closed-positions/templates/unavailable.data.html?");

/***/ })

});