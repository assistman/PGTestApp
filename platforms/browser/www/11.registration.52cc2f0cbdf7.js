webpackJsonp([11],{

/***/ 2009:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var RegistrationView = __webpack_require__(2776);\n    var AfterSelectLeveragePopupView = __webpack_require__(2808);\n    var AfterSelectLeveragePopupModel = __webpack_require__(2810);\n\n    module.exports = {\n        RegistrationView: RegistrationView,\n        AfterSelectLeveragePopupView: AfterSelectLeveragePopupView,\n        AfterSelectLeveragePopupModel: AfterSelectLeveragePopupModel\n    };\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/index.js\n// module id = 2009\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/index.js?");

/***/ }),

/***/ 2201:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var Model = __webpack_require__(16);\n\n    module.exports = Model.extend({\n\n        before: function before(savedData) {\n            var updates = {};\n\n            if (savedData[\"country\"] === \"00\") {\n                updates[\"country\"] = \"EMPTY\";\n            }\n\n            if (savedData[\"citizenship\"] === \"00\") {\n                updates[\"citizenship\"] = \"EMPTY\";\n            }\n\n            return updates;\n        }\n\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/step/base/registration.step.personal.information.base.model.js\n// module id = 2201\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/step/base/registration.step.personal.information.base.model.js?");

/***/ }),

/***/ 2244:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var Form = __webpack_require__(853);\n    var Model = __webpack_require__(16);\n\n    var DependentFieldHandlers = Model.extend({\n\n        updateStudyFieldAfterChangeEducationLevel: function updateStudyFieldAfterChangeEducationLevel(field) {\n            this.setDefaultValueWithFireChangeEvent();\n\n            if (Form.isFieldEquals(field, ['EMPTY', 'ed_no_edu', 'ed_prim_edu'])) {\n                this.disable();\n                this.$el.addClass('select-disabled');\n                return;\n            }\n\n            this.enable();\n            this.$el.removeClass('select-disabled');\n        },\n\n        updateStudyFieldDetailsAfterChangeStudyField: function updateStudyFieldDetailsAfterChangeStudyField(field) {\n            var studyField = this.getDependentFieldByName(\"study_field\");\n            var educationLevel = this.getDependentFieldByName(\"education_level\");\n\n            this.setDefaultValue();\n\n            if (Form.isFieldEquals(studyField, ['sf_other'])) {\n                studyField.disable();\n                studyField.$el.css('display', 'none');\n\n                this.enable();\n                this.focus();\n                return;\n            }\n\n            studyField.$el.css('display', 'block');\n\n            this.disable();\n\n            if (Form.isFieldEquals(educationLevel, ['ed_no_edu', 'ed_prim_edu'])) {\n                return;\n            }\n\n            studyField.enable();\n        },\n\n        updateStudyFieldDetailsAfterChangeEducationLevel: function updateStudyFieldDetailsAfterChangeEducationLevel(field) {\n            this.setDefaultValue();\n            this.disable();\n        }\n\n    });\n\n    module.exports = new DependentFieldHandlers();\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/registration.dependent.field.handlers.js\n// module id = 2244\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/registration.dependent.field.handlers.js?");

/***/ }),

/***/ 2289:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var Model = __webpack_require__(16);\n    var server = __webpack_require__(11);\n\n    var RegistrationTinValidations = Model.extend({\n\n        // fallback if we don't take data from server\n        defaults: {\n            tinValidations: {\n                'AD': '(^F[0-7][0-9]{5}[A-Z]$)|(^E[8-9][0-9]{5}[A-Z]$)',\n                'AR': '^2[0,3-7][0-9]{9}$',\n                'AW': '^[0-9]{8}$',\n                'AU': '(^[0-9]{8}$)|(^[0-9]{9}$)|(^[0-9]{11}$)',\n                'AT': '^[0-9]{9}$',\n                'BE': '^[0-9]{11}$',\n                'BZ': '^[0-9]{8}$',\n                'BR': '^[0-9]{11}$',\n                'BG': '^[0-9]{10}$',\n                'CA': '^[0-9]{9}$',\n                'CL': '(^[0-9]{7,8}K$)|(^[0-9]{8,9}$)',\n                'CN': '(^[a-zA-Z0-9]{15}$)|(^[a-zA-Z0-9]{18}$)',\n                'CO': '^[1-9][0-9]{9}$',\n                'CR': '^[0-9]{9}$',\n                'HR': '^[0-9]{11}$',\n                'CZ': '^[0-9]{9,10}$',\n                'DK': '^[0-9]{10}$',\n                'EE': '^[0-9]{11}$',\n                'FO': '^[0-9]{9}$',\n                'FI': '^[0-9]{10}$',\n                'FR': '^[0-3][0-9]{12}$',\n                'DE': '^[0-9]{11}$',\n                'GI': '^[0-9][0-9]{0,5}$',\n                'GR': '^[0-9]{9}$',\n                'GL': '^[0-9]{10}$',\n                'GG': '^GY[0-9]{6}$',\n                'HU': '^[0-9]{10,11}$',\n                'IS': '^[0-9]{10}$',\n                'IN': '^[a-zA-Z]{3}P[a-zA-Z]([1-9][0-9][0-9][0-9]|[0-9][1-9][0-9][0-9]|[0-9][0-9][1-9][0-9]|[0-9][0-9][0-9][1-9])[a-zA-Z]$',\n                'IE': '^[0-9]{7}[a-zA-Z]{1,2}$',\n                'IM': '(^H[0-9]{6}$)|(^H[0-9]{8}$)',\n                'IT': '^[a-zA-Z]{6}[a-zA-Z0-9]{10}$',\n                'JP': '^[0-9]{12}$',\n                'JE': '^JY[0-9]{6}[A-Da-d]$',\n                'KP': '^[0-9]{10}$',\n                'KW': '^[0-9]*$',\n                'LV': '^[0-3][0-9](0[1-9]|1[0-2])[0-9]{2}[0-2][0-9]{4}$',\n                'LI': '^[a-zA-Z][0-9]{5}$',\n                'LT': '^[0-9]{11}$',\n                'LU': '^[0-9]{11}$',\n                'MY': '^[a-zA-Z0-9]{12,13}$',\n                'MT': '(^[0-9]{7}[a-zA-Z]$)|(^[0-9]{9}$)',\n                'MH': '^[0-9]{5}04$',\n                'MU': '^[1,7,8][0-9]{7}$',\n                'MX': '^[a-zA-Z]{4}[0-9]{6}[a-zA-Z0-9]{3}$',\n                'NR': '^[0-9]{9}$',\n                'NL': '^[a-zA-Z0-9]{9}$',\n                'NZ': '^[0-9]{8,9}$',\n                'NO': '^[0-9]{11}$',\n                'PL': '^[0-9]{11}$',\n                'PT': '^[1-4][0-9]{8}$',\n                'RO': '^[1-9][0-9]{2}(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])(0[1-9]|[1-4][0-9]|5[0-2])[0-9]{4}$',\n                'RU': '^[0-9]{12}$',\n                'LC': '^[0-9]{1,6}$',\n                'WS': '^[0-9]{5,}$',\n                'SM': '(^[0-9]{9}$)|(^SM[0-9]{5}$)',\n                'SA': '^[0-9]{10}$',\n                'SC': '^[0-9]{2}2[0-9]{6}$',\n                'SG': '^[S,T,F,G][0-9]{7}[a-zA-Z0-9]$',\n                'SK': '^[0-9]{2}(0[1-9]|1[0-2]|5[1-9]|6[0-2])(0[1-9]|[1-2][0-9]|3[0-1])[0-9]{3,4}$',\n                'SI': '^[1-9]{1}[0-9]{7}$',\n                'ZA': '^[0,1,2,3,9][0-9]{9}$',\n                'ES': '^[a-zA-Z0-9][0-9]{7}[a-zA-Z]$',\n                'SE': '(^[0-9]{10}$)|(^[0-9]{12}$)',\n                'CH': '^[0-9]{13}$',\n                'GB': '^[A-C,E,G,H,J-P,R-T,W-Z][A-C,E,G,H,J-N,P,R-T,W-Z][0-9]{6}[A,B,C,D]$',\n                'UY': '(^[0-9]{9}$)|(^[0-9]{12}$)'\n            }\n        },\n\n        load: function load() {\n            return server.getTinValidations().then(this.loadSuccess.bind(this)).catch(this.loadError.bind(this));\n        },\n\n        loadSuccess: function loadSuccess(res) {\n            if (!res.data) {\n                return Promise.reject();\n            }\n\n            this.set('tinValidations', res.data);\n\n            return Promise.resolve(res);\n        },\n\n        loadError: function loadError(res) {\n            return Promise.reject(res);\n        },\n\n        getFilters: function getFilters() {\n            return ['trim', 'string'];\n        },\n\n        getRulesByCountryCode: function getRulesByCountryCode(code, message) {\n            var rules = {\n                not_empty: message\n            };\n\n            var countryRules = this.get('tinValidations')[code];\n\n            if (countryRules) {\n                rules['regexp'] = [new RegExp(countryRules), message];\n            }\n\n            return rules;\n        }\n\n    });\n\n    module.exports = new RegistrationTinValidations();\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/registration.tin.validation.js\n// module id = 2289\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/registration.tin.validation.js?");

/***/ }),

/***/ 2474:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var Model = __webpack_require__(16);\n    var user = __webpack_require__(10);\n\n    module.exports = Model.extend({\n\n        before: function before(savedData) {\n            var updates = {};\n\n            updates[\"primaryTinTaxJurisdiction\"] = user.getCountry().toUpperCase();\n\n            if (savedData[\"primaryTinTaxJurisdiction\"] === \"00\" && savedData[\"secondaryTinTaxJurisdiction\"] === \"00\") {\n                updates[\"secondaryTinTaxJurisdiction\"] = \"EMPTY\";\n                updates[\"fatca\"] = \"EMPTY\";\n            }\n\n            if (savedData[\"tinAbsenceReason\"] === \"NOT_RELEVANT\") {\n                updates[\"tinAbsenceReason\"] = \"EMPTY\";\n            }\n\n            if (_.isEmpty(savedData[\"primaryTin\"])) {\n                if (savedData[\"primaryTinTaxJurisdiction\"] === \"00\" || savedData[\"tinAbsenceReason\"] === \"EMPTY\") {\n                    updates[\"have_primary_tin\"] = \"EMPTY\";\n                } else {\n                    updates[\"have_primary_tin\"] = \"have_primary_tin_no\";\n                }\n            } else {\n                updates[\"have_primary_tin\"] = \"have_primary_tin_yes\";\n            }\n\n            if (user.getCountry() === \"IT\" && user.getCitizenship() === \"IT\" && !_.isEmpty(user.getNationalCountryIdentifier())) {\n                updates[\"have_primary_tin\"] = \"have_primary_tin_yes\";\n                updates[\"primaryTin\"] = user.getNationalCountryIdentifier();\n            }\n\n            return updates;\n        }\n\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/step/markets/registration.step.tax.information.markets.model.js\n// module id = 2474\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/step/markets/registration.step.tax.information.markets.model.js?");

/***/ }),

/***/ 2495:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var Model = __webpack_require__(16);\n\n    module.exports = Model.extend({\n\n        before: function before(savedData) {\n            var updates = {};\n\n            if (savedData[\"fatca\"] === \"NO\" && _.isEmpty(savedData[\"employment_status\"])) {\n                updates[\"fatca\"] = \"EMPTY\";\n            }\n\n            return updates;\n        }\n\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/step/base/registration.step.financial.information.base.model.js\n// module id = 2495\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/step/base/registration.step.financial.information.base.model.js?");

/***/ }),

/***/ 2496:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var templates = __webpack_require__(85);\n    var validations = __webpack_require__(458);\n    var Form = __webpack_require__(853);\n    var Model = __webpack_require__(16);\n    var Moment = __webpack_require__(6);\n\n    var localization = __webpack_require__(27);\n\n    function addRefuseSecondTinOption(options) {\n        return ['00'].concat(options);\n    }\n\n    function countryCodeToOptions(countries) {\n        var options = _.pluck(countries, 'code').sort(function (a, b) {\n            return __('country.name.' + a).localeCompare(__('country.name.' + b));\n        });\n\n        options.unshift('EMPTY');\n\n        return options;\n    }\n\n    var Overridable = function () {\n        function Overridable(initial) {\n            _classCallCheck(this, Overridable);\n\n            _.extend(this, initial);\n        }\n\n        _createClass(Overridable, [{\n            key: 'override',\n            value: function override(obj) {\n                return _.extend(this, obj);\n            }\n        }]);\n\n        return Overridable;\n    }();\n\n    /////////////////////////\n\n    var ConfigTemplates = Model.extend({\n\n        getAllCountries: function getAllCountries() {\n            return this.get('allCountries');\n        },\n\n        stringInputTemplate: function stringInputTemplate(key) {\n            var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n                _ref$lenght = _ref.lenght,\n                lenght = _ref$lenght === undefined ? 0 : _ref$lenght,\n                _ref$optional = _ref.optional,\n                optional = _ref$optional === undefined ? false : _ref$optional;\n\n            var rules = {};\n\n            if (lenght) {\n                rules.max_length = validations.maxLength(lenght, key);\n            }\n\n            if (!optional) {\n                rules.not_empty = validations.notEmpty(key);\n            }\n\n            return new Overridable({\n                translationKey: key,\n                template: templates.inputBox,\n                validation: {\n                    rules: rules,\n                    filters: ['string']\n                },\n                disable: false,\n                events: {\n                    onblur: Form.checkInputOnBlur\n                }\n            });\n        },\n        defaultDateOfBirth: function defaultDateOfBirth(key, minAge, maxAge) {\n            return new Overridable({\n                translationKey: key,\n                options: {\n                    minAge: minAge,\n                    maxAge: maxAge,\n                    moment: Moment,\n                    splitByComma: localization.splitByComma\n                },\n                template: templates.dateBox,\n                validation: {\n                    rules: {\n                        not_empty: validations.notEmpty(key)\n                    },\n                    filters: []\n                },\n                disable: false\n            });\n        },\n        classicSelectBoxTemplate: function classicSelectBoxTemplate(translationKey) {\n            var fieldNameInErrorTooltip = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n            return new Overridable({\n                translationKey: translationKey,\n                template: templates.selectBox,\n                validation: validations.selectNotEmpty(fieldNameInErrorTooltip ? translationKey : false),\n                disable: false,\n                events: {\n                    onchange: Form.validateFieldOnChange\n                }\n            });\n        },\n        countrySelectBoxTemplate: function countrySelectBoxTemplate(key) {\n            var countries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getAllCountries();\n\n            return new Overridable({\n                translationKey: key,\n                translationGroupPrefix: 'country.name',\n                options: countryCodeToOptions(countries),\n                template: templates.countriesSelectBox,\n                validation: validations.countrySelectNotEmpty(),\n                disable: false,\n                events: {\n                    onchange: Form.validateFieldOnChange\n                }\n            });\n        },\n        yesNoDetailsTemlate: function yesNoDetailsTemlate(translationKey) {\n            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'input';\n            var detailsMaxLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 50;\n\n            return new Overridable({\n                title: __('reg.questionary.cysec.' + translationKey),\n                translationKey: type,\n                link: {\n                    href: __('reg.questionary.cysec.' + translationKey + '.link.href'),\n                    text: __('reg.questionary.cysec.' + translationKey + '.click_here')\n                },\n                options: [{ value: translationKey + '_no', text: __('no') }, { value: translationKey + '_yes', text: __('yes') }],\n                details: {\n                    option: translationKey + '_yes',\n                    type: type,\n                    placeholder: __('reg.questionary.cysec.' + translationKey + '.provide'),\n                    max_length: detailsMaxLength\n                },\n                template: templates.yesNoDetails,\n                disable: false\n            });\n        },\n        fatcaConfigTemplate: function fatcaConfigTemplate() {\n            return new Overridable({\n                translationKey: 'fatca',\n                options: [{\n                    value: 'NO',\n                    text: __('no')\n                }, {\n                    value: 'YES',\n                    text: __('yes')\n                }, {\n                    value: __('registration.field.fatca.link.href'),\n                    text: __('registration.field.label.fatca.learn_more')\n                }],\n                template: templates.fatcaBox,\n                validation: validations.radioNotEmpty('fatca'),\n                disable: false,\n                events: {\n                    onchange: Form.validateFieldOnChange\n                }\n            });\n        },\n        otherFieldDetailsTemplate: function otherFieldDetailsTemplate(dependsOnFieldKey, otherItemKey) {\n            for (var _len = arguments.length, additionalDependencies = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n                additionalDependencies[_key - 2] = arguments[_key];\n            }\n\n            return new Overridable({\n                translationKey: '' + dependsOnFieldKey,\n                template: templates.inputBox,\n                validation: validations.inputNotEqual(__('registration.field.label.' + otherItemKey)),\n                options: {\n                    defaultValue: __('registration.field.label.' + otherItemKey)\n                },\n                dependent: [{\n                    name: dependsOnFieldKey,\n                    handler: function handler(field) {\n\n                        if (field.value() === otherItemKey) {\n                            // EREZ - Don't change disable state of field its changed in its handler\n                            field.$el.css('display', 'none');\n                            this.enable();\n                            this.focus();\n\n                            return;\n                        }\n\n                        // EREZ - Don't change disable state of field its changed in its handler\n                        field.$el.css('display', 'block');\n                        this.disable();\n                    }\n                }].concat(additionalDependencies),\n                events: {\n                    onblur: _.partial(Form.checkDependentFieldOnBlur, dependsOnFieldKey)\n                },\n                placeholder: __('registration.field.value.provide'),\n                disable: true\n            });\n        },\n        multiCheckBox: function multiCheckBox(translationKey) {\n            return new Overridable({\n                translationKey: translationKey,\n                translationGroupPrefix: 'reg.questionary.label.' + translationKey,\n                template: templates.multiCheckBox,\n                validation: validations.multiCheckBoxNotEmpty(),\n                disable: false,\n                events: {\n                    onchange: Form.validateFieldOnChange\n                }\n            });\n        },\n        zipCodeInput: function zipCodeInput(key) {\n            return new Overridable({\n                translationKey: key,\n                template: templates.inputBox,\n                validation: validations.zipCode(key),\n                disable: false,\n                events: {\n                    onblur: Form.checkInputOnBlur\n                }\n            });\n        }\n    });\n\n    module.exports = { ConfigTemplates: ConfigTemplates, addRefuseSecondTinOption: addRefuseSecondTinOption, countryCodeToOptions: countryCodeToOptions };\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/configTemplates.js\n// module id = 2496\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/configTemplates.js?");

/***/ }),

/***/ 2761:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var EMPTY = 'EMPTY';\n    var LOADING = 'LOADING';\n    var SUCCESS = 'SUCCESS';\n    var ERROR = 'ERROR';\n\n    module.exports = {\n        EMPTY: EMPTY,\n        LOADING: LOADING,\n        SUCCESS: SUCCESS,\n        ERROR: ERROR\n    };\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/types.js\n// module id = 2761\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/types.js?");

/***/ }),

/***/ 2776:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_, $) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var $ = __webpack_require__(7);\n    var user = __webpack_require__(10);\n    var core = __webpack_require__(5);\n    var device = __webpack_require__(18);\n    var server = __webpack_require__(11);\n    var settings = __webpack_require__(12);\n    var localization = __webpack_require__(27);\n    var PopupView = __webpack_require__(29);\n    var WizardStageView = __webpack_require__(219);\n    var eventTracker = __webpack_require__(959);\n    var Flow = __webpack_require__(2777);\n    var popups = __webpack_require__(476);\n    var RegistrationStepsProgressView = __webpack_require__(2805);\n\n    var template = _.template(__webpack_require__(2807));\n\n    var activityDetector = null;\n\n    var RegistrationView = PopupView.extend({\n        name: 'registration',\n        stepsViews: [],\n        currentStepView: null,\n\n        events: function events() {\n            return _.extend({}, _.result(PopupView.prototype, 'events'), {\n                'click .fn-personal-information': 'onPersonalInformationSubmit',\n                'click .fn-next': 'onNext',\n                'click .fn-back': 'onBack',\n                'click .fn-finish': 'onRegistrationFinish'\n            });\n        },\n        getOptions: function getOptions(options) {\n            return _.extend({}, _.result(PopupView.prototype, 'getOptions'), {\n                isHeaderShowed: true,\n                caption: user.isPromotionMarketsX() ? __('registration.account.premium_registration') : __('registration.account.registration'),\n                previousCaption: __('actions.exit'),\n                headerStyle: 'wizard',\n                style: 'height: 100%;',\n                ignorableByLoginMessage: true,\n                headerContent: '<span class=\"registration-bonus-steps-to-go hidden\"><span class=\"steps-to-go-message\"></span></span>'\n            }, options);\n        },\n        initialize: function initialize(options) {\n            PopupView.prototype.initialize.apply(this, arguments);\n\n            this.$el.addClass(settings.getBrandName(), false);\n\n            this.startRegistration();\n\n            this.listenTo(settings, 'change:eyecatcher.enabled', this.startEyeCatcher);\n            this.startEyeCatcher();\n        },\n        startRegistration: function startRegistration() {\n            var _this = this;\n\n            this.switchOffControlButtons();\n            this.showLoading();\n\n            return this.loadRegistrationFlow().then(function () {\n                _this.showCurrentRegistrationStep();\n\n                core.trigger('registration:start');\n            });\n        },\n        startEyeCatcher: function startEyeCatcher() {\n            var langs = settings.getLangsForEyeCatcher();\n            var isEnable = settings.isEyeCatcherEnabled();\n\n            if (isEnable && _.contains(langs, __('lang')) && !_.isEmpty(window.LC_API) && device.desktop()) {\n                if (!activityDetector) {\n                    var InactiveTime = __webpack_require__(958);\n\n                    activityDetector = new InactiveTime(settings.getTimeOutForRegistrationEyeCatcher(), 'registration', ['field:change']);\n                    activityDetector.init();\n                }\n            }\n        },\n        loadRegistrationFlow: function loadRegistrationFlow() {\n            return Flow.load().then(this.onFlowLoaded.bind(this)).catch(this.handleError.bind(this));\n        },\n        onFlowLoaded: function onFlowLoaded() {\n            this.render();\n            this.setContent(template({\n                isLiveChatEnabled: settings.isLiveChatEnabled()\n            }));\n\n            this.navigation = Flow.getNavigation();\n\n            this.progress = this.addChildView('.header', RegistrationStepsProgressView, {\n                bonusStepsContainer: this.$el.find('.responsive-header-content '),\n                collection: this.navigation\n            });\n\n            var formWizardParent = this.$el.find('.content');\n\n            this.stepsViews = this.navigation.map(function (step) {\n                return new WizardStageView({\n                    $parent: formWizardParent,\n                    model: step\n                });\n            });\n        },\n        request: function request(action, in_data, flattenData) {\n            function transforms(data) {\n                return flattenData ? '&' + _.map(data.data, function (value, key) {\n                    return key + '=' + encodeURIComponent(value);\n                }).join('&') : '&data=' + encodeURIComponent(JSON.stringify(data.data));\n            }\n\n            var data = {\n                data: in_data || {}\n            };\n\n            return server.actionPost(action, data, transforms).then(function (res) {\n                if (!res.data.success || res.data.error) {\n                    return Promise.reject(res.data.error);\n                }\n\n                return res.data.body ? res.data.body : res.data;\n            });\n        },\n        close: function close() {\n            this.stopListening();\n\n            _.each(this.stepsViews, function (step) {\n                return step.remove();\n            });\n\n            if (activityDetector) {\n                activityDetector.stop();\n                activityDetector = null;\n            }\n\n            PopupView.prototype.close.call(this);\n        },\n        updateControlButtons: function updateControlButtons() {\n            if (this.navigation.isFirstStep()) {\n                this.$el.find('.allow-back').addClass('hidden');\n                this.$el.find('.allow-personal-information').removeClass('hidden');\n            } else {\n                this.$el.find('.allow-back').removeClass('hidden');\n                this.$el.find('.allow-personal-information').addClass('hidden');\n            }\n\n            if (this.navigation.isFirstStep() || this.navigation.isLastStep()) {\n                this.$el.find('.allow-next').addClass('hidden');\n            } else {\n                this.$el.find('.allow-next').removeClass('hidden');\n            }\n\n            if (this.navigation.isLastStep()) {\n                this.$el.find('.allow-finish').removeClass('hidden');\n            } else {\n                this.$el.find('.allow-finish').addClass('hidden');\n            }\n        },\n        switchOffControlButtons: function switchOffControlButtons() {\n            var _this2 = this;\n\n            var buttons = ['.fn-back', '.fn-personal-information', '.fn-next', '.fn-finish'];\n\n            _.each(buttons, function (button) {\n                return _this2.$el.find(button).addClass('disabled').attr('disabled', true);\n            });\n        },\n        switchOnControlButtons: function switchOnControlButtons() {\n            var _this3 = this;\n\n            var buttons = ['.fn-back', '.fn-personal-information', '.fn-next', '.fn-finish'];\n\n            _.each(buttons, function (button) {\n                return _this3.$el.find(button).removeClass('disabled').removeAttr('disabled');\n            });\n        },\n        showCurrentRegistrationStep: function showCurrentRegistrationStep() {\n            this.progress.drawRegistrationProgress();\n\n            this.currentStepView && this.currentStepView.remove();\n            this.currentStepView = this.stepsViews[this.navigation.getCurrentStepId()];\n            this.currentStepView.show();\n\n            this.switchOnControlButtons();\n            this.updateControlButtons();\n            this.hideLoading();\n\n            eventTracker.trackDisplayRegistrationStep(this.navigation.getTrackStepId());\n        },\n        isCustomerPreSelectCompany: function isCustomerPreSelectCompany() {\n            return settings.isRegistrationCustomerSelectedCompanyEnabled() && user.hasCustomerSelectedCompany() && user.hasPendingConfirmSelectedCompany();\n        },\n        onPersonalInformationSubmit: function onPersonalInformationSubmit() {\n            var _this4 = this;\n\n            if (!this.isCurrentRegistrationStepValid()) {\n                return;\n            }\n\n            if (this.isCustomerPreSelectCompany()) {\n                this.showLoading();\n\n                var stepsData = this.prepareStepsSaveData();\n                var selectedCountry = String(stepsData['country']).toLowerCase();\n\n                return server.registrationRegulationCompanyProbeQuery(selectedCountry).then(function (res) {\n                    return _this4.onRegulationCompanyProbeSuccess(res.data);\n                }).catch(this.handleError.bind(this));\n            }\n\n            this.onNext();\n        },\n        onRegulationCompanyProbeSuccess: function onRegulationCompanyProbeSuccess(data) {\n            this.hideLoading();\n\n            if (data.companyMismatch) {\n                return popups.confirmCustomerSelectedCompanyRegulation(this.confirmCompanyMismatch.bind(this), this.rejectCompanyMismatch.bind(this), __('registration.popup.customer_selected_company.text', data['partnerCompany.name'], data.regulationType));\n            }\n\n            this.onNext();\n        },\n        confirmCompanyMismatch: function confirmCompanyMismatch() {\n            return server.registrationConfirmRegulationCompanyMismatch().then(function (res) {\n                return user.updateCustomerBrandCompany(res.data);\n            }).then(this.onNext.bind(this)).then(function () {\n                return user.confirmRegulationCompanyMismatch();\n            }).catch(this.handleError.bind(this));\n        },\n        rejectCompanyMismatch: function rejectCompanyMismatch() {\n            return server.registrationRejectRegulationCompanyMismatch().then(function (res) {\n                return user.updateCustomerBrandCompany(res.data);\n            }).then(this.onNext.bind(this)).then(function () {\n                return user.rejectRegulationCompanyMismatch();\n            }).then(this.reloadRegistrationFlowWhenPartnerCompanyChanged.bind(this)).then(this.goNextStep.bind(this)).catch(this.handleError.bind(this));\n        },\n        isCurrentRegistrationStepValid: function isCurrentRegistrationStepValid() {\n            if (this.currentStepView.validate() !== false) {\n\n                if (device.mobile()) {\n                    this.scrollToFirstError();\n                }\n\n                return false;\n            }\n\n            return true;\n        },\n        scrollToFirstError: function scrollToFirstError() {\n            var firstErrorField = this.currentStepView.getErrorFields()[0];\n\n            if (firstErrorField) {\n                this.$el.find('.registration').scrollTo({\n                    duration: 1000,\n                    complete: _.noop(),\n                    element: firstErrorField.$el\n                });\n            }\n        },\n        onNext: function onNext() {\n            if (!this.isCurrentRegistrationStepValid()) {\n                return;\n            }\n\n            this.showLoading();\n            this.switchOffControlButtons();\n            eventTracker.trackNextRegistrationStep(this.navigation.getTrackStepId());\n\n            return this.submitSteps().then(this.processCountryChanged.bind(this)).then(this.processPartnerCompanyChanged.bind(this)).then(this.goNextStep.bind(this)).catch(this.handleError.bind(this));\n        },\n        goNextStep: function goNextStep() {\n            this.navigation.goNextStep();\n            this.showCurrentRegistrationStep();\n        },\n        goPreviousStep: function goPreviousStep() {\n            this.navigation.goPreviousStep();\n            this.showCurrentRegistrationStep();\n        },\n        onRegistrationFinish: function onRegistrationFinish() {\n            var _this5 = this;\n\n            if (this.currentStepView.validate() !== false) {\n                return;\n            }\n\n            this.submitSteps().then(function (res) {\n                user.getUserData().set('scoreLevel', res.scoreLevel);\n                core.trigger('registration:filled');\n                _this5.close();\n\n                if (settings.isGuaranteedStopLossEnabled()) {\n                    server.loadRegulationGslStatus().then(function (_ref) {\n                        var data = _ref.data;\n\n                        user.setGuaranteedStopLoss(data);\n                    });\n                }\n            }).catch(this.handleError.bind(this));\n        },\n        onBack: function onBack() {\n            this.showLoading();\n            this.switchOffControlButtons();\n            eventTracker.trackPreviousRegistrationStep(this.navigation.getTrackStepId());\n\n            this.currentStepView.saveData();\n\n            this.goPreviousStep();\n        },\n        injectAdditionalPhoneData: function injectAdditionalPhoneData(data) {\n            var phone = data['phone'];\n\n            if (!phone) {\n                return data;\n            }\n\n            var index = phone.indexOf('-');\n            var code = phone.slice(0, index);\n            var number = phone.slice(index + 1);\n\n            data['phoneCountryCode'] = code;\n            data['phoneNationalNumber'] = number;\n\n            return data;\n        },\n        submit: function submit(stepsData) {\n            this.showLoading();\n            console.log('updateAccount...');\n\n            return this.request('v2/updateAccount', stepsData).then(this.onSubmitSuccess.bind(this)).catch(this.onSubmitError.bind(this));\n        },\n        onSubmitSuccess: function onSubmitSuccess(res) {\n            this.hideLoading();\n\n            if (res && res.data && res.data.error) {\n                console.log('updateAccount... FAIL');\n\n                return Promise.reject(res.data.error);\n            }\n\n            console.log('updateAccount... OK');\n\n            return res;\n        },\n        onSubmitError: function onSubmitError(res) {\n            console.log('catch updateAccount... FAIL ' + res);\n            this.handleError(res);\n        },\n        updateUserInfo: function updateUserInfo(stepsData, userInfo) {\n            stepsData.country && user.setCountry(stepsData.country);\n            stepsData.citizenship && user.setCitizenship(stepsData.citizenship);\n            !_.isUndefined(stepsData.nationalCountryIdentifier) && user.setNationalCountryIdentifier(stepsData.nationalCountryIdentifier);\n            stepsData.firstName && user.setFirstName(stepsData.firstName);\n            stepsData.lastName && user.setLastName(stepsData.lastName);\n            stepsData.phone && user.setPhone(stepsData.phone);\n            stepsData.birthDate && user.setDateOfBirth(stepsData.birthDate);\n            stepsData.zipCode && user.setZipCode(stepsData.zipCode);\n            stepsData.city && user.setCity(stepsData.city);\n            stepsData.address && user.setAddress(stepsData.address);\n\n            userInfo['partnerCompanyChanged'] && user.getUserData().setPartnerCompanyNameKey(userInfo['partnerCompanyNameKey']);\n        },\n        prepareStepsSaveData: function prepareStepsSaveData() {\n            this.currentStepView.saveData();\n\n            var stepsData = _.chain(this.stepsViews).map(function (elem) {\n                return elem.model.getSavedData();\n            }).reduce(function (obj, item) {\n                _.assign(obj, item);\n\n                return obj;\n            }, {}).value();\n\n            if (!_.isUndefined(stepsData['phone'])) {\n                stepsData = this.injectAdditionalPhoneData(stepsData);\n            }\n\n            return stepsData;\n        },\n        submitSteps: function submitSteps() {\n            var _this6 = this;\n\n            this.showLoading();\n\n            var stepsData = this.prepareStepsSaveData();\n\n            return this.submit(stepsData).then(function (res) {\n                _this6.updateUserInfo(stepsData, res);\n                _this6.hideLoading();\n\n                return res;\n            });\n        },\n        processCountryChanged: function processCountryChanged(userInfo) {\n            var _this7 = this;\n\n            if (userInfo['countryChanged']) {\n                this.showLoading();\n\n                return Promise.all([settings.load(), localization.loadDictionary()]).then(function () {\n                    core.trigger('user:country:changed');\n                    _this7.hideLoading();\n\n                    return Promise.resolve(userInfo);\n                });\n            }\n\n            return Promise.resolve(userInfo);\n        },\n        reloadRegistrationFlowWhenPartnerCompanyChanged: function reloadRegistrationFlowWhenPartnerCompanyChanged() {\n            core.trigger('user:company:changed');\n\n            return this.loadRegistrationFlow();\n        },\n        processPartnerCompanyChanged: function processPartnerCompanyChanged(userInfo) {\n            var _this8 = this;\n\n            if (userInfo['partnerCompanyChanged']) {\n\n                return this.reloadRegistrationFlowWhenPartnerCompanyChanged().then(function () {\n                    if (!_this8.isCustomerPreSelectCompany()) {\n                        popups.userCompanyChanged(userInfo);\n                    }\n\n                    return Promise.resolve(userInfo);\n                });\n            }\n\n            return Promise.resolve(userInfo);\n        },\n        showLoading: function showLoading() {\n            core.trigger('ui:loading');\n        },\n        hideLoading: function hideLoading() {\n            core.trigger('ui:loading:hide');\n        },\n        handleError: function handleError(e) {\n            this.hideLoading();\n            console.log('Registration error:', e);\n\n            core.trigger('ui:message-box', {\n                text: __('generic.error.message'),\n                onOK: this.close.bind(this),\n                actions: {\n                    onClose: this.close.bind(this)\n                }\n            });\n        },\n        closePopup: function closePopup() {\n            PopupView.prototype.closePopup.call(this);\n\n            core.trigger('sm', 'registration_abort');\n            core.trigger('registration:abort');\n\n            var options = this.options;\n            var onAbort = options && options.onAbort;\n\n            _.isFunction(onAbort) && onAbort();\n\n            eventTracker.trackCloseRegistrationForm();\n        }\n    });\n\n    if (settings.isRegistrationAutocompleteEnabled()) {\n        var RANDOM_TEXT_LENGTH = 15;\n        var RANDOM_NUMBER_LENGTH = 7;\n        var RANDOM_MIN_VALUE = 1;\n        var RANDOM_MAX_VALUE = 10;\n\n        RegistrationView.prototype.events = _.extend({}, _.result(RegistrationView.prototype, 'events'), {\n            'dblclick .content': '__doubleClick'\n        });\n\n        RegistrationView.prototype.__doubleClick = function (event) {\n            var generatedText = function generatedText() {\n                return _.sample('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.split(''), RANDOM_TEXT_LENGTH).join('');\n            };\n            var generatedNumbers = function generatedNumbers() {\n                return _.sample('0123456789'.split(''), RANDOM_NUMBER_LENGTH).join('');\n            };\n            var getRandom = function getRandom(min, max) {\n                return Math.floor(Math.random() * (max - min) + min);\n            };\n\n            this.$('.field-type-phone input').val(generatedNumbers());\n            this.$('.dk-select').forEach(function (el) {\n                var $options = $(el).find('.dk-select-options li');\n\n                _.sample(_.initial($options)).click();\n            });\n            this.$('.field-type-yes-no-details').forEach(function (el) {\n                return _.sample($(el).find('input[type=radio]')).click();\n            });\n\n            this.$('.field-type-multi-select select').forEach(function (el) {\n                _.each(el.options, function (option) {\n                    return option.selected = false;\n                });\n\n                for (var i = 0; i < getRandom(RANDOM_MIN_VALUE, RANDOM_MAX_VALUE); i++) {\n                    _.sample(el.options).selected = true;\n                }\n\n                $(el).trigger('change');\n            });\n            this.$('.field-type-checkbox').forEach(function (el) {\n                return _.sample($(el).find('input')).click();\n            });\n            this.$('.field-type-multi-checkbox').forEach(function (el) {\n                return _.sample($(el).find('input')).click();\n            });\n            this.$('.field-type-radio').forEach(function (el) {\n                return _.sample($(el).find('input')).click();\n            });\n            this.$('.field-type-fatca').forEach(function (el) {\n                return _.sample($(el).find('input')).click();\n            });\n            this.$('.input-field').forEach(function (el) {\n                $(el).val(generatedText());\n                $(el).trigger('change');\n            });\n            this.$('.textarea-field').forEach(function (el) {\n                $(el).val(generatedText());\n                $(el).trigger('change');\n            });\n        };\n    }\n\n    module.exports = RegistrationView;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(7)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/registration.view.js\n// module id = 2776\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/registration.view.js?");

/***/ }),

/***/ 2777:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var Model = __webpack_require__(16);\n    var server = __webpack_require__(11);\n    var user = __webpack_require__(10);\n    var settings = __webpack_require__(12);\n    var WizardStageModel = __webpack_require__(220);\n    var RegistrationFormConfig = __webpack_require__(2778);\n    var StepsNavigation = __webpack_require__(2793);\n\n    var Brand = __webpack_require__(895).BRAND;\n    var Company = __webpack_require__(898).MARKETS_COMPANY;\n\n    var RegistrationFlowDefault = __webpack_require__(2794);\n    var RegistrationFlowTradeV2 = __webpack_require__(2795);\n    var RegistrationFlowMarkets = __webpack_require__(2796);\n    var RegistrationFlowMarketsMeconex = __webpack_require__(2797);\n    var RegistrationFlowMarketsSTAGlobal = __webpack_require__(2798);\n    var RegistrationFlowMarketsSTAGlobalAustralia = __webpack_require__(2799);\n    var RegistrationFlowCFDGlobalV2 = __webpack_require__(2800);\n    var RegistrationFlowCFDGlobal = __webpack_require__(2801);\n    var RegistrationFlowClickTrades = __webpack_require__(2802);\n    var RegistrationFlowFinq = __webpack_require__(2803);\n    var RegistrationFlowGlobtrex = __webpack_require__(2804);\n\n    var REGISTRATION_FLOW_KEY = 0;\n    var LAST_ACTION_KEY = 1;\n    var COUNTRIES_KEY = 2;\n\n    var RegistrationFlow = Model.extend({\n        load: function load() {\n            var userInfo = user.getUserData().getCrmboCustomer();\n\n            return Promise.all([this.loadRegistrationFlow(), server.registrationGetAccount(userInfo), server.registrationGetCountries(userInfo)]).then(this.buildFormConfig.bind(this)).then(this.buildStepsFormWizard.bind(this));\n        },\n        provideBrandRegistrationFlow: function provideBrandRegistrationFlow() {\n            var brand = settings.getBrandName();\n            var userCompany = user.getUserData().getPartnerCompanyNameKey();\n\n            switch (brand) {\n                case Brand.TRADE:\n                case Brand.FINEXO:\n                    return RegistrationFlowTradeV2;\n\n                case Brand.FINQ:\n                    return settings.isOldRegistration() ? RegistrationFlowCFDGlobal : RegistrationFlowFinq;\n\n                case Brand.CFD_GLOBAL:\n                    {\n                        return settings.isNewCfdGlobalReg() ? RegistrationFlowCFDGlobalV2 : RegistrationFlowCFDGlobal;\n                    }\n\n                case Brand.FOREX_4_GROUP:\n                    return RegistrationFlowDefault;\n                case Brand.CLICK_TRADES:\n                    return RegistrationFlowClickTrades;\n\n                case Brand.MARKETS:\n                    switch (userCompany) {\n                        case Company.SAFECAP_LTD:\n                            return RegistrationFlowMarkets;\n\n                        case Company.PRELIUM_LTD:\n                            return RegistrationFlowMarketsSTAGlobal;\n\n                        case Company.STA_GLOBAL:\n                            return this.isAustraliaCountry() ? RegistrationFlowMarketsSTAGlobalAustralia : RegistrationFlowMarketsSTAGlobal;\n\n                        default:\n                            return RegistrationFlowMarketsMeconex;\n                    }\n\n                case Brand.TRADE_TECH_DEMO:\n                    return RegistrationFlowMarkets;\n\n                case Brand.GLOBTREX:\n                    return RegistrationFlowGlobtrex;\n\n                default:\n                    console.warn('Can\\'t recognize registration flow for brand#' + brand + ', company#' + userCompany);\n\n                    return RegistrationFlowDefault;\n            }\n        },\n\n\n        isAustraliaCountry: function isAustraliaCountry() {\n            var country = user.getCountry();\n\n            return country && _.isString(country) && country.toLowerCase() === 'au';\n        },\n\n        loadRegistrationFlow: function loadRegistrationFlow() {\n            var registrationFlow = this.provideBrandRegistrationFlow();\n\n            if (!_.isEmpty(registrationFlow)) {\n                try {\n                    return Promise.resolve(JSON.parse(registrationFlow));\n                } catch (e) {\n                    return Promise.reject(e);\n                }\n            }\n        },\n        buildFormConfig: function buildFormConfig(values) {\n            var registrationFlowData = values[REGISTRATION_FLOW_KEY];\n            var lastActionsData = values[LAST_ACTION_KEY];\n\n            // Fix input for unknown values\n            _.each(lastActionsData, function (v, k) {\n                if (v === 'UNKNOWN') {\n                    lastActionsData[k] = '';\n                }\n            });\n            var countries = values[COUNTRIES_KEY];\n            var allCountries = _.filter(countries, function (country) {\n                return country.code !== '00';\n            });\n            var allowedCountries = _.filter(allCountries, 'allowed');\n            var phoneToCountry = _.reduce(allowedCountries, function (object, value) {\n                object[value.phoneCode] = value.code;\n\n                return object;\n            }, {});\n\n            var formConfig = RegistrationFormConfig.RegistrationFormConfig({\n                allCountries: allCountries,\n                allowedCountries: allowedCountries,\n                phoneToCountry: phoneToCountry,\n                savedData: lastActionsData\n            });\n\n            return {\n                steps: formConfig.getFormElements(registrationFlowData.steps)\n            };\n        },\n        buildStepsFormWizard: function buildStepsFormWizard(data) {\n            this.navigation = new StepsNavigation();\n            this.navigation.setData(_.map(this.navigation.initSteps(data.steps), function (step) {\n                return new WizardStageModel(step);\n            }));\n        },\n        getNavigation: function getNavigation() {\n            return this.navigation;\n        }\n    });\n\n    module.exports = new RegistrationFlow();\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/registration.flow.model.js\n// module id = 2777\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/registration.flow.model.js?");

/***/ }),

/***/ 2778:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var settings = __webpack_require__(12);\n    var user = __webpack_require__(10);\n    var templates = __webpack_require__(85);\n    var tinValidations = __webpack_require__(2289);\n\n    var _require = __webpack_require__(960),\n        getPhoneCodesByCountryCode = _require.getPhoneCodesByCountryCode,\n        getCountriesPhoneCodes = _require.getCountriesPhoneCodes;\n\n    var Brand = __webpack_require__(895).BRAND;\n    var Company = __webpack_require__(898).MARKETS_COMPANY;\n    var RegistrationConfigBase = __webpack_require__(2779);\n    var RegistrationConfigTradeV2 = __webpack_require__(2780);\n    var RegistrationConfigMarkets = __webpack_require__(2781);\n    var RegistrationConfigMarketsMeconex = __webpack_require__(2782);\n    var RegistrationConfigMarketsSTAGlobal = __webpack_require__(2783);\n    var RegistrationConfigCFDGlobalV2 = __webpack_require__(2784);\n    var RegistrationConfigCFDGlobal = __webpack_require__(2787);\n    var RegistrationConfigClickTrades = __webpack_require__(2789);\n    var RegistrationConfigFinq = __webpack_require__(2791);\n    var RegistrationConfigGlobtrex = __webpack_require__(2792);\n\n    var DETAILS_FIELD_SUFFIX = '_details';\n\n    function RegistrationFormConfig(options) {\n\n        function provideBrandRegistrationConfig(config) {\n            config['countriesPhoneCodes'] = getCountriesPhoneCodes(config.allowedCountries);\n\n            var brand = settings.getBrandName();\n            var userCompany = user.getUserData().getPartnerCompanyNameKey();\n\n            switch (brand) {\n                case Brand.TRADE:\n                case Brand.FINEXO:\n                    return new RegistrationConfigTradeV2(config);\n\n                case Brand.FINQ:\n                    return settings.isOldRegistration() ? new RegistrationConfigCFDGlobal(options) : new RegistrationConfigFinq(options);\n\n                case Brand.CFD_GLOBAL:\n                    {\n                        if (settings.isAdvancedShortRegistration()) {\n                            return new RegistrationConfigCFDGlobalV2(config);\n                        } else {\n                            return new RegistrationConfigCFDGlobal(config);\n                        }\n                    }\n\n                case Brand.CLICK_TRADES:\n                    return new RegistrationConfigClickTrades(config);\n\n                case Brand.MARKETS:\n                    tinValidations.load();\n\n                    switch (userCompany) {\n                        case Company.SAFECAP_LTD:\n                            return new RegistrationConfigMarkets(config);\n\n                        case Company.PRELIUM_LTD:\n                        case Company.STA_GLOBAL:\n                            return new RegistrationConfigMarketsSTAGlobal(config);\n\n                        default:\n                            return new RegistrationConfigMarketsMeconex(config);\n                    }\n\n                case Brand.TRADE_TECH_DEMO:\n                    return new RegistrationConfigMarkets(config);\n\n                case Brand.GLOBTREX:\n                    return new RegistrationConfigGlobtrex(config);\n\n                default:\n                    return new RegistrationConfigBase(config);\n            }\n        }\n\n        var registrationStrategy = provideBrandRegistrationConfig(options);\n        var formConfig = registrationStrategy.getFormConfig();\n        var stepModels = registrationStrategy.getStepModels();\n\n        function _updatePhoneValue(phoneElem) {\n            if (!_.isEmpty(phoneElem.savedData) || _.isEmpty(options.savedData['country'])) {\n                return;\n            }\n\n            var countryCodes = getPhoneCodesByCountryCode(options.savedData['country']);\n\n            if (countryCodes) {\n                var code = _.find(options.allowedCountries, function (country) {\n                    return countryCodes.indexOf(country.phoneCode) >= 0;\n                });\n\n                if (code) {\n                    phoneElem.savedData = code.phoneCode + '-';\n                }\n            }\n        }\n\n        function _enrichDetailsFormElement(elem, config) {\n            if (config.template !== templates.yesNoDetails) {\n                return;\n            }\n\n            var savedData = options.savedData[elem.name + DETAILS_FIELD_SUFFIX];\n\n            if (savedData) {\n                config.details.value = savedData;\n            }\n        }\n\n        function _getElemDetails(elem) {\n            if (!formConfig[elem.name]) {\n                console.log('getElemDetails something gone wrong...', elem.name);\n\n                return { name: elem.name };\n            }\n\n            var savedData = options.savedData[elem.name] ? { savedData: options.savedData[elem.name] } : {};\n\n            var details = _.extend({}, elem, savedData, formConfig[elem.name]);\n\n            if ((details.template === templates.selectBox || details.template === templates.selectBoxOverflowWidth) && !_.contains(details.options, 'EMPTY')) {\n                details.options.unshift('EMPTY');\n            }\n\n            if (elem.name === 'phone') {\n                _updatePhoneValue(details);\n            }\n\n            _enrichDetailsFormElement(elem, details);\n\n            return details;\n        }\n\n        function getFormElements(pages) {\n            return _.map(pages, function (page) {\n                return {\n                    'title': page.groupName,\n                    'status': page.status,\n                    'action': stepModels[page.groupName],\n                    'top': _.map(page.top, _getElemDetails),\n                    'form': _.map(page.form, function (formColumn) {\n                        return _.map(formColumn, _getElemDetails);\n                    }),\n                    'bottom': _.map(page.bottom, _getElemDetails)\n                };\n            });\n        }\n\n        return {\n            getFormElements: getFormElements\n        };\n    }\n\n    module.exports.RegistrationFormConfig = RegistrationFormConfig;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/registration.form.config.js\n// module id = 2778\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/registration.form.config.js?");

/***/ }),

/***/ 2779:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var Model = __webpack_require__(16);\n    var Moment = __webpack_require__(6);\n    var localization = __webpack_require__(27);\n    var settings = __webpack_require__(12);\n    var templates = __webpack_require__(85);\n    var validations = __webpack_require__(458);\n    var Form = __webpack_require__(853);\n\n    var RegistrationStepPersonalInformationBaseModel = __webpack_require__(2201);\n    var RegistrationStepFinancialInformationBaseModel = __webpack_require__(2495);\n    var dependentHandlers = __webpack_require__(2244);\n\n    var DEFAULT_EMPTY = 'EMPTY';\n\n    var lowScoreDisclaimerTemplate = settings.isRegistrationLowScoreDisclaimerEnabled() ? _.template('<div class=\"low-score-disclaimer\"><%=__(\"registration.step.disclaimer.financial_information\")%></div>') : _.template('');\n\n    var dependentFieldHandlers = {\n\n        inputOther: function inputOther(field) {\n            if (field.value() === 'OTHER') {\n                field.disable();\n                this.enable();\n                this.focus();\n\n                return;\n            }\n\n            field.enable();\n            this.disable();\n        },\n\n        tradeKindNone: function tradeKindNone(field) {\n            this.$el.find('[value=tk_none]').removeAttr('disabled');\n            this.$el.find('[data-value=tk_none]').removeClass('hidden');\n            this.$el.find('[value=tk_my_own]').removeAttr('disabled');\n            this.$el.find('[data-value=tk_my_own]').removeClass('hidden');\n            this.$el.find('[value=tk_with_advice]').removeAttr('disabled');\n            this.$el.find('[data-value=tk_with_advice]').removeClass('hidden');\n\n            var formFields = field.options.form._fields;\n\n            if (Form.isFieldEquals(formFields['csb_experience'], [DEFAULT_EMPTY]) || Form.isFieldEquals(formFields['fx_experience'], [DEFAULT_EMPTY]) || Form.isFieldEquals(formFields['csb_volume_experience'], [DEFAULT_EMPTY]) || Form.isFieldEquals(formFields['fx_volume_experience'], [DEFAULT_EMPTY])) {\n\n                this.setDefaultValue();\n                this.disable();\n\n                return this.$el.addClass('select-disabled');\n            }\n\n            this.enable();\n            this.$el.removeClass('select-disabled');\n\n            if (!Form.isFieldEquals(formFields['csb_experience'], [DEFAULT_EMPTY, 'ce_none']) || !Form.isFieldEquals(formFields['fx_experience'], [DEFAULT_EMPTY, 'fe_none']) || !Form.isFieldEquals(formFields['csb_volume_experience'], [DEFAULT_EMPTY, 'cve_none']) || !Form.isFieldEquals(formFields['fx_volume_experience'], [DEFAULT_EMPTY, 'fve_none'])) {\n\n                this.$el.find('[value=tk_none]').attr('disabled', 'disabled');\n                this.$el.find('[data-value=tk_none]').addClass('hidden');\n            }\n\n            if (Form.isFieldEquals(formFields['fx_volume_experience'], ['fve_none']) && Form.isFieldEquals(formFields['csb_volume_experience'], ['cve_none'])) {\n                this.$el.find('[value=tk_my_own]').attr('disabled', 'disabled');\n                this.$el.find('[data-value=tk_my_own]').addClass('hidden');\n                this.$el.find('[value=tk_with_advice]').attr('disabled', 'disabled');\n                this.$el.find('[data-value=tk_with_advice]').addClass('hidden');\n            }\n        }\n\n    };\n\n    function countryCodeToOptions(countries) {\n        var options = _.pluck(countries, 'code').sort(function (a, b) {\n            return __('country.name.' + a).localeCompare(__('country.name.' + b));\n        });\n\n        options.unshift('EMPTY');\n\n        return options;\n    }\n\n    module.exports = Model.extend({\n\n        getAllCountries: function getAllCountries() {\n            return this.get('allCountries');\n        },\n\n        getAllCountryCodes: function getAllCountryCodes() {\n            return _.pluck(this.getAllCountries(), 'code');\n        },\n\n        getAllowedCountries: function getAllowedCountries() {\n            return this.get('allowedCountries');\n        },\n\n        getCountriesPhoneCodes: function getCountriesPhoneCodes() {\n            return this.get('countriesPhoneCodes');\n        },\n\n        getPhoneToCountry: function getPhoneToCountry() {\n            return this.get('phoneToCountry');\n        },\n\n        getStepModels: function getStepModels() {\n            return {\n                'personal_information': new RegistrationStepPersonalInformationBaseModel(),\n                'financial_information': new RegistrationStepFinancialInformationBaseModel()\n            };\n        },\n\n        getFormConfig: function getFormConfig() {\n\n            return {\n                // Personal Information Page:\n                firstName: {\n                    translationKey: 'first_name',\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('first_name'),\n                            max_length: validations.maxLength(50, 'first_name')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                lastName: {\n                    translationKey: 'last_name',\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('last_name'),\n                            max_length: validations.maxLength(50, 'last_name')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                phone: {\n                    translationKey: 'phone',\n                    options: {\n                        countries: this.getCountriesPhoneCodes(),\n                        phoneToCountry: this.getPhoneToCountry()\n                    },\n                    template: templates.phoneBox,\n                    validation: {\n                        rules: {\n                            // TODO - localize\n                            not_empty: validations.notEmpty('phone'),\n                            numeric: validations.numeric('phone'),\n                            validateLength: function validateLength(data) {\n                                var min = 6;\n                                var max = 20;\n\n                                if (data.phone.length > max) {\n                                    return __('registration.phone.max', max);\n                                }\n\n                                if (data.phoneInput.length < min) {\n                                    return __('registration.phone.min', min);\n                                }\n\n                                if (_.isEmpty(data.phoneSelect)) {\n                                    return validations.notEmpty('phone');\n                                }\n\n                                return null;\n                            }\n                        },\n                        filters: []\n                    },\n                    disable: false\n                },\n                birthDate: {\n                    translationKey: 'date_of_birth',\n                    // TODO - this could be moved to the date input view\n                    options: {\n                        minAge: 18,\n                        maxAge: 87,\n                        moment: Moment,\n                        splitByComma: localization.splitByComma\n                    },\n                    template: templates.dateBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('date_of_birth')\n                        },\n                        filters: []\n                    },\n                    disable: false\n                },\n                address: {\n                    translationKey: 'address',\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('address'),\n                            max_length: validations.maxLength(50, 'address')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                zipCode: {\n                    translationKey: 'zip_code',\n                    template: templates.inputBox,\n                    validation: validations.zipCode('zip_code'),\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                city: {\n                    translationKey: 'city',\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('city')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                country: {\n                    translationKey: 'country',\n                    translationGroupPrefix: 'country.name',\n                    options: countryCodeToOptions(this.getAllowedCountries()),\n                    template: templates.countriesSelectBox,\n                    validation: validations.selectNotEmpty('country'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                citizenship: {\n                    title: __('registration.field.label.citizenship'),\n                    // EREZ _ THIS IS NOT A MISTAKE\n                    translationKey: 'country',\n                    translationGroupPrefix: 'country.name',\n                    options: countryCodeToOptions(this.getAllCountries()),\n                    template: templates.countriesSelectBox,\n                    validation: validations.selectNotEmpty('citizenship'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n\n                // Financial Information Page:\n                employment_status: {\n                    translationKey: 'employment_status',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty('employment_status'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                profession: {\n                    title: __('reg.questionary.cysec.profession'),\n                    translationKey: 'profession',\n                    template: templates.selectBoxOverflowWidth,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: 'employment_status',\n                        handler: function handler(field) {\n                            if (field.value() === 'EMPTY') {\n                                this.disable();\n                                this.$el.addClass('select-disabled');\n\n                                return;\n                            }\n\n                            if (field.value() === 'es_employed' || field.value() === 'es_self_employed') {\n                                this.$el.removeClass('select-disabled');\n\n                                return this.enable();\n                            }\n\n                            this.setDefaultValue();\n                            this.disable();\n                            this.$el.addClass('select-disabled');\n                        }\n                    }],\n                    disable: 'select-disabled',\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                annual_income: {\n                    title: __('reg.questionary.cysec.annual_income'),\n                    translationKey: 'annual_income',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                intend_invest: {\n                    title: __('reg.questionary.cysec.intend_invest'),\n                    translationKey: 'intend_invest',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                trading_purpose: {\n                    title: __('reg.questionary.cysec.trading_purpose'),\n                    translationKey: 'trading_purpose',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                trading_purpose_details: {\n                    title: __('reg.questionary.cysec.trading_purpose'),\n                    translationKey: 'trading_purpose',\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.industry_other')),\n                    options: {\n                        defaultValue: __('registration.field.label.industry_other')\n                    },\n                    dependent: [{\n                        name: 'trading_purpose',\n                        handler: function handler(field) {\n                            if (field.value() === 'tp_other') {\n                                // EREZ - Don't change disable state of field its changed in its handler\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n\n                                return;\n                            }\n\n                            // EREZ - Don't change disable state of field its changed in its handler\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'trading_purpose')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                savings_investments: {\n                    title: __('reg.questionary.cysec.savings_investments'),\n                    translationKey: 'savings_investments',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                funds_source: {\n                    title: __('reg.questionary.cysec.funds_source'),\n                    translationKey: 'funds_source',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                funds_source_details: {\n                    title: __('reg.questionary.cysec.funds_source'),\n                    translationKey: 'trading_purpose',\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.funds_source')),\n                    options: {\n                        defaultValue: __('registration.field.label.funds_source')\n                    },\n                    dependent: [{\n                        name: 'funds_source',\n                        handler: function handler(field) {\n                            if (field.value() === 'fs_other') {\n                                // EREZ - Don't change disable state of field its changed in its handler\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n\n                                return;\n                            }\n\n                            // EREZ - Don't change disable state of field its changed in its handler\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'funds_source')\n                    },\n                    disable: true\n                },\n                fatca: {\n                    translationKey: 'fatca',\n                    options: [{\n                        value: 'NO',\n                        text: __('no')\n                    }, {\n                        value: 'YES',\n                        text: __('yes')\n                    }, {\n                        value: __('registration.field.fatca.link.href'),\n                        text: __('registration.field.label.fatca.learn_more')\n                    }],\n                    template: templates.fatcaBox,\n                    validation: validations.radioNotEmpty('fatca'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n\n                // Trading Experience Page:\n                education_level: {\n                    translationKey: 'education_level',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty('education_level'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                study_field: {\n                    title: __('registration.field.label.study_field'),\n                    translationKey: 'study_field',\n                    template: templates.selectBoxOverflowWidth,\n                    validation: validations.selectNotEmpty('study_field'),\n                    dependent: [{\n                        name: 'education_level',\n                        handler: dependentHandlers.updateStudyFieldAfterChangeEducationLevel\n                    }],\n                    disable: 'select-disabled',\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                study_field_details: {\n                    title: __('registration.field.label.study_field'),\n                    translationKey: 'study_field_other',\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.study_field_other')),\n                    options: {\n                        defaultValue: __('registration.field.label.study_field_other')\n                    },\n                    dependent: [{\n                        name: 'study_field',\n                        handler: dependentHandlers.updateStudyFieldDetailsAfterChangeStudyField\n                    }, {\n                        name: 'education_level',\n                        handler: dependentHandlers.updateStudyFieldDetailsAfterChangeEducationLevel\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'study_field')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                fx_volume_experience: {\n                    title: __('reg.questionary.cysec.fx_volume_experience'),\n                    translationKey: 'fx_volume_experience',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                csb_volume_experience: {\n                    title: __('reg.questionary.cysec.csb_volume_experience'),\n                    translationKey: 'csb_volume_experience',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                fx_experience: {\n                    title: __('reg.questionary.cysec.fx_experience'),\n                    translationKey: 'fx_experience',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                csb_experience: {\n                    title: __('reg.questionary.cysec.csb_experience'),\n                    translationKey: 'csb_experience',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                trade_kind: {\n                    title: __('reg.questionary.cysec.trade_kind'),\n                    translationKey: 'trade_kind',\n                    template: templates.selectBoxOverflowWidth,\n                    validation: validations.selectNotEmpty(),\n                    disable: 'select-disabled',\n                    dependent: [{\n                        name: 'csb_experience',\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }, {\n                        name: 'fx_experience',\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }, {\n                        name: 'csb_volume_experience',\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }, {\n                        name: 'fx_volume_experience',\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }],\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                low_score_disclaimer: {\n                    title: '',\n                    translationKey: '',\n                    template: lowScoreDisclaimerTemplate,\n                    validation: {},\n                    disable: false,\n                    dependent: []\n                },\n\n                // Financial Knowledge Page:\n                termsAndConditions: {\n                    translationKey: 'terms_and_conditions',\n                    options: {\n                        value: '',\n                        text: 'TRANS_OPTION_TEXT_KEY',\n                        parseString: true\n                    },\n                    template: templates.checkBox,\n                    validation: {\n                        rules: {\n                            not_equals: ['false', __('registration.warning.this_field_is_required', __('registration.field.label.termsAndConditions'))]\n                        },\n                        filters: []\n                    },\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                apple_drops: {\n                    title: __('reg.questionary.cysec.apple_drops'),\n                    translationKey: 'apple_drops',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                facebook_buy_markets: {\n                    title: __('reg.questionary.cysec.facebook_buy_markets'),\n                    translationKey: 'facebook_buy_markets',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                maximum_open_position: {\n                    title: __('reg.questionary.cysec.maximum_open_position'),\n                    translationKey: 'maximum_open_position',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                trade_leverage: {\n                    title: __('reg.questionary.cysec.trade_leverage'),\n                    translationKey: 'trade_leverage',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                cfd_trading: {\n                    title: __('reg.questionary.cysec.cfd_trading'),\n                    translationKey: 'cfd_trading',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n\n                    /*\n                    industryDetails: {\n                        title: __(\"registration.field.label.industry\"),\n                        translationKey: \"industry_other\",\n                        template: templates.inputBox,\n                        validation: validations.inputNotEqual(__('registration.field.label.industry_other')),\n                        options: {\n                            defaultValue: __('registration.field.label.industry_other')\n                        },\n                        dependent: [{\n                            name: \"industry\",\n                            handler: function (field){\n                                if (field.value() === \"OTHER\") {\n                                    // EREZ - Don't change disable state of field its changed in its handler\n                                    field.$el.css('display', 'none');\n                                    this.enable();\n                                    this.focus();\n                                    return;\n                                }\n                                 // EREZ - Don't change disable state of field its changed in its handler\n                                field.$el.css('display', 'block');\n                                this.disable();\n                            }\n                        },{\n                            name: \"employmentStatus\",\n                            handler: function (field, form){\n                                if (this.isDisabled()){\n                                    return;\n                                }\n                                 if (field.value() !== \"SALARIED_EMPLOYEE\" && field.value() !== \"SELF_EMPLOYEE\"){\n                                    this.disable();\n                                    form.getField('industry').$el.css('display', 'block');\n                                     return;\n                                }\n                                 this.enable();\n                                this.focus();\n                            }\n                        }],\n                        events: {\n                            onblur: _.partial(Form.checkDependentFieldOnBlur, 'industry')\n                        },\n                        disable: true\n                    },\n                    sourceOfIncome: {\n                        translationKey: \"source_of_income\",\n                        template: templates.selectBox,\n                        validation: validations.selectNotEmpty('source_of_income'),\n                        dependent: [{\n                            name: \"employmentStatus\",\n                            handler: function (field){\n                                if (field.value() === \"EMPTY\"){\n                                    this.disable();\n                                    return this.$el.addClass('select-disabled');\n                                }\n                                 if (field.value() === \"SALARIED_EMPLOYEE\" || field.value() === \"SELF_EMPLOYEE\"){\n                                    this.setDefaultValue();\n                                    this.disable();\n                                    return this.$el.addClass('select-disabled');\n                                }\n                                 this.$el.removeClass('select-disabled');\n                                this.enable();\n                            }\n                        }],\n                        disable: true\n                    },\n                    sourceOfIncomeDetails: {\n                        title: __(\"registration.field.label.source_of_income\"),\n                        translationKey: \"source_of_income_other\",\n                        template: templates.inputBox,\n                        validation: validations.inputNotEqual(__('source_of_income_other')),\n                        options: {\n                            defaultValue: __('registration.field.label.source_of_income_other')\n                        },\n                        dependent: [{\n                            name: \"sourceOfIncome\",\n                            handler: function (field){\n                                if (field.value() === \"OTHER\") {\n                                    // EREZ - Don't change disable state of field its changed in its handler\n                                    field.$el.css('display', 'none');\n                                    this.enable();\n                                    this.focus();\n                                    return;\n                                }\n                                 // EREZ - Don't change disable state of field its changed in its handler\n                                field.$el.css('display', 'block');\n                                this.disable();\n                            }\n                        }, {\n                            name: \"employmentStatus\",\n                            handler: function (field, form){\n                                if (this.isDisabled()){\n                                    return;\n                                }\n                                 if (field.value() === \"SALARIED_EMPLOYEE\" || field.value() === \"SELF_EMPLOYEE\"){\n                                    this.disable();\n                                    // form.getField('sourceOfIncome').$el.css('display', 'block');\n                                    this.$el.addClass('input-disabled');\n                                     return;\n                                }\n                                 this.enable();\n                                this.focus();\n                            }\n                        }],\n                        events: {\n                            onblur: _.partial(Form.checkDependentFieldOnBlur, 'sourceOfIncome')\n                        },\n                        disable: true\n                    },\n                    grossIncome: {\n                        translationKey: \"gross_income\",\n                        template: templates.selectBox,\n                        validation: validations.selectNotEmpty('gross_income'),\n                        disable: false\n                    },\n                    netWorth: {\n                        translationKey: \"net_worth\",\n                        template: templates.selectBox,\n                        validation: validations.selectNotEmpty('net_worth'),\n                        disable: false\n                    },\n                    anticipatedTradingTurnover: {\n                        translationKey: \"account_turnover\",\n                        template: templates.selectBox,\n                        validation: validations.selectNotEmpty('account_turnover'),\n                        disable: false\n                    },\n                    registrationReason: {\n                        translationKey: \"purpose_and_reason\",\n                        template: templates.selectBox,\n                        validation: validations.selectNotEmpty('purpose_and_reason'),\n                        disable: false\n                    },\n                    registrationReasonDetails: {\n                        title: __(\"registration.field.label.purpose_and_reason\"),\n                        translationKey: \"purpose_and_reason_other\",\n                        template: templates.inputBox,\n                        validation: validations.inputNotEqual(__('purpose_and_reason_other')),\n                        options: {\n                            defaultValue: __('registration.field.label.purpose_and_reason_other')\n                        },\n                        dependent: [{\n                            name: \"registrationReason\",\n                            handler: dependentFieldHandlers.inputOther\n                        }],\n                        disable: true\n                    },\n                    natureOfTransactions: {\n                        translationKey: \"nature_of_transactions\",\n                        template: templates.selectBox,\n                        validation: validations.selectNotEmpty('nature_of_transactions'),\n                        disable: false\n                    },\n                    natureOfTransactionsDetails: {\n                        title: __(\"registration.field.label.nature_of_transactions\"),\n                        translationKey: \"nature_of_transactions_other\",\n                        template: templates.inputBox,\n                        validation: {},\n                        options: {\n                            defaultValue: __('nature_of_transactions_other')\n                        },\n                        dependent: [{\n                            name: \"natureOfTransactions\",\n                            handler: dependentFieldHandlers.inputOther\n                        }],\n                        disable: true\n                    },\n                    originOfFunds: {\n                        translationKey: \"originOfFunds\",\n                        translationGroupPrefix: \"registration.form.label\",\n                        template: templates.multiCheckBox,\n                        validation: validations.multiCheckBoxNotEmpty(),\n                        disable: false\n                    },\n                    allowMarketingEmails: {\n                        title: dictionary.getLabel(\".address\"),\n                        options: [{\n                            value: \"\",\n                            text: \"TRANS_OPTION_TEXT_KEY\"\n                        }],\n                        template: templates.selectBox,\n                        validation: {},\n                        dependent: \"ID_TO_DEPENDENT ITEM\"\n                    },\n                    anticipatedTradingTurnover: {\n                        translationKey: \"account_turnover\",\n                        template: templates.selectBox,\n                        validation: validations.selectNotEmpty('account_turnover'),\n                        disable: false\n                    },\n                    tradingExperience: {\n                        translationKey: \"forex_cfds_trading_experience\",\n                        template: templates.selectBox,\n                        validation: validations.selectNotEmpty(),\n                        disable: false\n                    },\n                    tradingFrequency: {\n                        translationKey: \"forex_cfds_trading_frequency\",\n                        template: templates.selectBox,\n                        validation: validations.selectNotEmpty(),\n                        dependent: [{\n                            name: \"tradingExperience\",\n                            handler: function (field){\n                                if (field.value() == 'EMPTY' || field.value() == 'NONE'){\n                                    this.disable();\n                                    this.setDefaultValue();\n                                    this.$el.addClass('select-disabled');\n                                    return;\n                                }\n                                 this.$el.removeClass('select-disabled');\n                                this.enable();\n                            }\n                        }],\n                        disable: true\n                    },\n                    tradingVolume: {\n                        translationKey: \"trading_volume_of_forex_cfds_transactions\",\n                        template: templates.selectBox,\n                        validation: validations.selectNotEmpty(),\n                        dependent: [{\n                            name: \"tradingExperience\",\n                            handler: function (field){\n                                if (field.value() == 'EMPTY' || field.value() == 'NONE'){\n                                    this.disable();\n                                    this.setDefaultValue();\n                                    this.$el.addClass('select-disabled');\n                                    return;\n                                }\n                                 this.$el.removeClass('select-disabled');\n                                this.enable();\n                            }\n                        }],\n                        disable: true\n                    },\n                    typesOfService: {\n                        translationKey: \"typesOfService\",\n                        translationGroupPrefix: 'registration.form.label',\n                        template: templates.multiCheckBox,\n                        validation: validations.multiCheckBoxNotEmpty(),\n                        disable: false,\n                        events: {\n                            click: function (e) {\n                                if (e.currentTarget.value === 'tsfNoneAbove'){\n                                    _.each(this.$el.find('input[type=checkbox]'), function (checkbox){\n                                        if(checkbox.value !== 'tsfNoneAbove'){\n                                            checkbox.checked = false;\n                                        }\n                                    });\n                                 } else {\n                                    this.$el.find('input[value=tsfNoneAbove]')[0].checked = false;\n                                }\n                            }\n                        }\n                    },\n                    financialExperience: {\n                        translationKey: \"financial_experience\",\n                        // TODO - Need to change value to server expected\n                        options: [{\n                            value: 'false',\n                            text: 'No'\n                        }, {\n                            value: 'true',\n                            text: 'Yes'\n                        }],\n                        template: templates.financialExpBox,\n                        validation: validations.radioNotEmpty(),\n                        disable: false\n                    }\n                    */\n                } };\n        }\n\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/registration.form.config.base.js\n// module id = 2779\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/registration.form.config.base.js?");

/***/ }),

/***/ 2780:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var Model = __webpack_require__(16);\n    var Moment = __webpack_require__(6);\n    var localization = __webpack_require__(27);\n    var settings = __webpack_require__(12);\n    var templates = __webpack_require__(85);\n    var validations = __webpack_require__(458);\n    var user = __webpack_require__(10);\n    var Form = __webpack_require__(853);\n\n    var _require = __webpack_require__(13),\n        EMPTY = _require.EMPTY;\n\n    var RegistrationStepPersonalInformationBaseModel = __webpack_require__(2201);\n    var dependentHandlers = __webpack_require__(2244);\n\n    var DEFAULT_EMPTY = EMPTY;\n\n    var lowScoreDisclaimerTemplate = settings.isRegistrationLowScoreDisclaimerEnabled() ? _.template('<div class=\"low-score-disclaimer\"><%=__(\"registration.step.disclaimer.financial_information\")%></div>') : _.template('');\n\n    var dependentFieldHandlers = {\n\n        tradeKindNone: function tradeKindNone(field) {\n            this.$el.find('[value=tk_none]').removeAttr('disabled');\n            this.$el.find('[data-value=tk_none]').removeClass('hidden');\n            this.$el.find('[value=tk_my_own]').removeAttr('disabled');\n            this.$el.find('[data-value=tk_my_own]').removeClass('hidden');\n            this.$el.find('[value=tk_with_advice]').removeAttr('disabled');\n            this.$el.find('[data-value=tk_with_advice]').removeClass('hidden');\n\n            var formFields = field.options.form._fields;\n\n            if (Form.isFieldEquals(formFields['csb_experience'], [DEFAULT_EMPTY]) || Form.isFieldEquals(formFields['fx_experience'], [DEFAULT_EMPTY]) || Form.isFieldEquals(formFields['csb_volume_experience'], [DEFAULT_EMPTY]) || Form.isFieldEquals(formFields['fx_volume_experience'], [DEFAULT_EMPTY])) {\n\n                this.setDefaultValue();\n                this.disable();\n\n                return this.$el.addClass('select-disabled');\n            }\n\n            this.enable();\n            this.$el.removeClass('select-disabled');\n\n            if (!Form.isFieldEquals(formFields['csb_experience'], [DEFAULT_EMPTY, 'ce_none']) || !Form.isFieldEquals(formFields['fx_experience'], [DEFAULT_EMPTY, 'fe_none']) || !Form.isFieldEquals(formFields['csb_volume_experience'], [DEFAULT_EMPTY, 'cve_none']) || !Form.isFieldEquals(formFields['fx_volume_experience'], [DEFAULT_EMPTY, 'fve_none'])) {\n\n                this.$el.find('[value=tk_none]').attr('disabled', 'disabled');\n                this.$el.find('[data-value=tk_none]').addClass('hidden');\n            }\n\n            if (Form.isFieldEquals(formFields['fx_volume_experience'], ['fve_none']) && Form.isFieldEquals(formFields['csb_volume_experience'], ['cve_none'])) {\n                this.$el.find('[value=tk_my_own]').attr('disabled', 'disabled');\n                this.$el.find('[data-value=tk_my_own]').addClass('hidden');\n                this.$el.find('[value=tk_with_advice]').attr('disabled', 'disabled');\n                this.$el.find('[data-value=tk_with_advice]').addClass('hidden');\n            }\n        },\n\n        showHaveSecondTinCountry: function showHaveSecondTinCountry(field) {\n            var haveTin = this.getDependentFieldByName('have_tin');\n            var haveSecondTin = this.getDependentFieldByName('have_second_tin');\n\n            if (Form.isFieldEquals(haveTin, ['have_tin_yes']) && Form.isFieldEquals(haveSecondTin, ['have_second_tin_yes'])) {\n                this.enable();\n\n                return;\n            }\n\n            this.setDefaultValueWithFireChangeEvent();\n            this.validate();\n            this.disable();\n        },\n\n        updateHaveSecondTinAfterChangeHaveTin: function updateHaveSecondTinAfterChangeHaveTin(field) {\n            var haveTin = this.getDependentFieldByName('have_tin');\n\n            if (Form.isFieldEquals(haveTin, ['have_tin_yes'])) {\n                this.enable();\n\n                return;\n            }\n\n            this.disable();\n        },\n\n        showTinAbsenceReason: function showTinAbsenceReason(field) {\n            var haveTin = this.getDependentFieldByName('have_tin');\n\n            if (Form.isFieldEquals(haveTin, ['have_tin_no'])) {\n                this.enable();\n\n                return;\n            }\n\n            this.disable();\n        },\n\n        updateTinAbsenceReasonDetailsAfterChangeTinAbsenceReason: function updateTinAbsenceReasonDetailsAfterChangeTinAbsenceReason(field) {\n            var haveTin = this.getDependentFieldByName('have_tin');\n            var tinAbsenceReason = this.getDependentFieldByName('tin_absence_reason');\n\n            if (Form.isFieldEquals(haveTin, ['have_tin_no']) && Form.isFieldEquals(tinAbsenceReason, ['tin_absence_reason_other'])) {\n                tinAbsenceReason.disable();\n                this.enable();\n                this.$el.css('display', 'block');\n                this.focus();\n\n                return;\n            }\n\n            if (Form.isFieldEquals(haveTin, ['have_tin_no'])) {\n                tinAbsenceReason.enable();\n            }\n\n            this.$el.css('display', 'none');\n        },\n\n        updateTinAbsenceReasonDetailsAfterChangeHaveTin: function updateTinAbsenceReasonDetailsAfterChangeHaveTin(field) {\n            var haveTin = this.getDependentFieldByName('have_tin');\n            var tinAbsenceReason = this.getDependentFieldByName('tin_absence_reason');\n\n            if (!Form.isFieldEquals(haveTin, ['have_tin_no'])) {\n                this.disable();\n                this.setDefaultValueWithFireChangeEvent();\n                tinAbsenceReason.setDefaultValueWithFireChangeEvent();\n                this.$el.css('display', 'none');\n\n                return;\n            }\n\n            if (Form.isFieldEquals(tinAbsenceReason, ['tin_absence_reason_other'])) {\n                tinAbsenceReason.disable();\n                this.enable();\n                this.$el.css('display', 'block');\n            }\n        },\n\n        updateHaveSecondTinCountrySource: function updateHaveSecondTinCountrySource(countryCodes, field) {\n            var _this = this;\n\n            countryCodes.forEach(function (code) {\n                _this.$el.find('[value=\"' + code + '\"]').removeAttr('disabled');\n                _this.$el.find('[data-value=\"' + code + '\"]').removeClass('hidden');\n            });\n\n            var country = field.getValue().toLowerCase();\n            var tinCountry = this.getValue();\n\n            this.$el.find('[value=\"' + country + '\"]').attr('disabled', 'disabled');\n            this.$el.find('[data-value=\"' + country + '\"]').addClass('hidden');\n\n            if (tinCountry === country) {\n                this.setDefaultValueWithFireChangeEvent();\n            }\n        },\n\n        activateWorkCountriesOnlyIfEmployed: function activateWorkCountriesOnlyIfEmployed(field) {\n            if (Form.isFieldEquals(field, ['es_employed', 'es_self_employed'])) {\n                var workCountries = this.getValue();\n\n                if (_.isEmpty(workCountries) || workCountries[0] === DEFAULT_EMPTY) {\n                    this.setValue(user.getCountry().toLowerCase());\n                }\n\n                this.enable();\n                this.$el.removeClass('select-disabled');\n\n                return;\n            }\n\n            this.disable();\n            this.setDefaultValueWithFireChangeEvent();\n            this.$el.addClass('select-disabled');\n        },\n\n        activateOnlyIfEmployed: function activateOnlyIfEmployed(field) {\n            if (Form.isFieldEquals(field, ['es_employed', 'es_self_employed'])) {\n                this.enable();\n                this.$el.removeClass('select-disabled');\n\n                return;\n            }\n\n            this.disable();\n            this.setDefaultValueWithFireChangeEvent();\n            this.$el.addClass('select-disabled');\n        }\n\n    };\n\n    function countriesToOptions(countries) {\n        var options = _.pluck(countries, 'code').sort(function (a, b) {\n            return __('country.name.' + a).localeCompare(__('country.name.' + b));\n        });\n\n        options.unshift(EMPTY);\n\n        return options;\n    }\n\n    function lowerCaseOptions(options) {\n        return _.map(options, function (option) {\n            if (option === EMPTY) {\n                return option;\n            }\n\n            return option.toLowerCase();\n        });\n    }\n\n    module.exports = Model.extend({\n\n        getAllCountries: function getAllCountries() {\n            return this.get('allCountries');\n        },\n\n        getAllowedCountries: function getAllowedCountries() {\n            return this.get('allowedCountries');\n        },\n\n        getAllowedCountryCodes: function getAllowedCountryCodes() {\n            return _.pluck(this.getAllowedCountries(), 'code');\n        },\n\n        getSortedAllowedCountryCodes: function getSortedAllowedCountryCodes() {\n            return this.getAllowedCountryCodes().sort(function (a, b) {\n                return __('country.name.' + a).localeCompare(__('country.name.' + b));\n            });\n        },\n\n        getCountryCodes: function getCountryCodes() {\n            return this.getSortedAllowedCountryCodes().map(function (code) {\n                return code.toLowerCase();\n            });\n        },\n\n        getCountriesPhoneCodes: function getCountriesPhoneCodes() {\n            return this.get('countriesPhoneCodes');\n        },\n\n        getPhoneToCountry: function getPhoneToCountry() {\n            return this.get('phoneToCountry');\n        },\n\n        getStepModels: function getStepModels() {\n            return {\n                'personal_information': new RegistrationStepPersonalInformationBaseModel()\n            };\n        },\n\n        getFormConfig: function getFormConfig() {\n\n            return {\n                // First Page:\n                firstName: {\n                    translationKey: 'first_name',\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('first_name'),\n                            max_length: validations.maxLength(50, 'first_name')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                lastName: {\n                    translationKey: 'last_name',\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('last_name'),\n                            max_length: validations.maxLength(50, 'last_name')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                phone: {\n                    translationKey: 'phone',\n                    options: {\n                        countries: this.getCountriesPhoneCodes(),\n                        phoneToCountry: this.getPhoneToCountry()\n                    },\n                    template: templates.phoneBox,\n                    validation: {\n                        rules: {\n                            // TODO - localize\n                            not_empty: validations.notEmpty('phone'),\n                            numeric: validations.numeric('phone'),\n                            validateLength: function validateLength(data) {\n                                var min = 6;\n                                var max = 20;\n\n                                if (data.phone.length > max) {\n                                    return __('registration.phone.max', max);\n                                }\n\n                                if (data.phoneInput.length < min) {\n                                    return __('registration.phone.min', min);\n                                }\n\n                                if (_.isEmpty(data.phoneSelect)) {\n                                    return validations.notEmpty('phone');\n                                }\n\n                                return null;\n                            }\n                        },\n                        filters: []\n                    },\n                    disable: false\n                },\n                birthDate: {\n                    translationKey: 'date_of_birth',\n                    // TODO - this could be moved to the date input view\n                    options: {\n                        minAge: 18,\n                        maxAge: 87,\n                        moment: Moment,\n                        splitByComma: localization.splitByComma\n                    },\n                    template: templates.dateBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('date_of_birth')\n                        },\n                        filters: []\n                    },\n                    disable: false\n                },\n                address: {\n                    translationKey: 'address',\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('address'),\n                            max_length: validations.maxLength(50, 'address')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                zipCode: {\n                    translationKey: 'zip_code',\n                    template: templates.inputBox,\n                    validation: validations.zipCode('zip_code'),\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                city: {\n                    translationKey: 'city',\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('city')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                country: {\n                    translationKey: 'country',\n                    translationGroupPrefix: 'country.name',\n                    options: countriesToOptions(this.getAllowedCountries()),\n                    template: templates.countriesSelectBox,\n                    validation: validations.countrySelectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                citizenship: {\n                    title: __('registration.field.label.citizenship'),\n                    translationKey: 'country',\n                    translationGroupPrefix: 'country.name',\n                    options: countriesToOptions(this.getAllCountries()),\n                    template: templates.countriesSelectBox,\n                    validation: validations.countrySelectNotEmpty('citizenship'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n\n                have_tin: {\n                    title: __('reg.questionary.cysec.have_tin'),\n                    translationKey: 'have_tin',\n                    link: {\n                        href: __('reg.questionary.cysec.have_tin.link.href'),\n                        text: __('reg.questionary.cysec.have_tin.learn_more')\n                    },\n                    options: [{ value: 'have_tin_no', text: __('no') }, { value: 'have_tin_yes', text: __('yes') }],\n                    details: {\n                        option: 'have_tin_yes',\n                        placeholder: __('reg.questionary.cysec.have_tin.tin'),\n                        max_length: 50,\n                        type: 'input'\n                    },\n                    template: templates.yesNoDetails,\n                    disable: false\n                },\n                have_second_tin: {\n                    title: __('reg.questionary.cysec.have_second_tin'),\n                    translationKey: 'have_second_tin',\n                    options: [{ value: 'have_second_tin_no', text: __('no') }, { value: 'have_second_tin_yes', text: __('yes') }],\n                    details: {\n                        option: 'have_second_tin_yes',\n                        placeholder: __('reg.questionary.cysec.have_second_tin.tin'),\n                        max_length: 50,\n                        type: 'input'\n                    },\n                    template: templates.yesNoDetails,\n                    dependent: [{\n                        name: 'have_tin',\n                        handler: dependentFieldHandlers.updateHaveSecondTinAfterChangeHaveTin\n                    }],\n                    disable: true\n                },\n                have_second_tin_country: {\n                    title: __('reg.questionary.cysec.have_second_tin_country'),\n                    translationKey: 'have_second_tin_country',\n                    translationGroupPrefix: 'country.name',\n                    options: this.getCountryCodes(),\n                    template: templates.countriesSelectBox,\n                    validation: validations.countrySelectNotEmpty(),\n                    dependent: [{\n                        name: 'have_second_tin',\n                        handler: dependentFieldHandlers.showHaveSecondTinCountry\n                    }, {\n                        name: 'have_tin',\n                        handler: dependentFieldHandlers.showHaveSecondTinCountry\n                    }, {\n                        name: 'country',\n                        handler: _.partial(dependentFieldHandlers.updateHaveSecondTinCountrySource, this.getCountryCodes())\n                    }],\n                    disable: true,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                tin_absence_reason: {\n                    title: __('reg.questionary.cysec.tin_absence_reason'),\n                    translationKey: 'tin_absence_reason',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: 'have_tin',\n                        handler: dependentFieldHandlers.showTinAbsenceReason\n                    }],\n                    disable: true,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                tin_absence_reason_details: {\n                    title: __('reg.questionary.cysec.tin_absence_reason'),\n                    translationKey: 'tin_absence_reason',\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty()\n                        }\n                    },\n                    dependent: [{\n                        name: 'tin_absence_reason',\n                        handler: dependentFieldHandlers.updateTinAbsenceReasonDetailsAfterChangeTinAbsenceReason\n                    }, {\n                        name: 'have_tin',\n                        handler: dependentFieldHandlers.updateTinAbsenceReasonDetailsAfterChangeHaveTin\n                    }],\n                    events: {\n                        onblur: _.partial(Form.validateFieldOnChange, 'tin_absence_reason')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n\n                us_resident: {\n                    title: __('reg.questionary.cysec.us_resident'),\n                    translationKey: 'us_resident',\n                    link: {\n                        href: __('reg.questionary.cysec.us_resident.link.href'),\n                        text: __('reg.questionary.cysec.us_resident.learn_more')\n                    },\n                    options: [{ value: 'ur_no', text: __('no') }, { value: 'ur_yes', text: __('yes') }],\n                    details: {\n                        option: 'ur_yes',\n                        placeholder: __('reg.questionary.cysec.us_resident.tin'),\n                        max_length: 50,\n                        type: 'input'\n                    },\n                    template: templates.yesNoDetails,\n                    disable: false\n                },\n                pep: {\n                    title: __('reg.questionary.cysec.pep'),\n                    translationKey: 'pep',\n                    link: {\n                        href: __('reg.questionary.cysec.pep.link.href'),\n                        text: __('reg.questionary.cysec.pep.click_here')\n                    },\n                    options: [{ value: 'pep_no', text: __('no') }, { value: 'pep_yes', text: __('yes') }],\n                    details: {\n                        option: 'pep_yes',\n                        placeholder: __('reg.questionary.cysec.pep.provide'),\n                        max_length: 1000,\n                        type: 'input'\n                    },\n                    template: templates.yesNoDetails,\n                    disable: false\n                },\n\n                // Second Page:\n                employment_status: {\n                    translationKey: 'employment_status',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty('employment_status'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                trading_purpose: {\n                    title: __('reg.questionary.cysec.trading_purpose'),\n                    translationKey: 'trading_purpose',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                trading_purpose_details: {\n                    title: __('reg.questionary.cysec.trading_purpose'),\n                    translationKey: 'trading_purpose',\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.industry_other')),\n                    options: {\n                        defaultValue: __('registration.field.label.industry_other')\n                    },\n                    dependent: [{\n                        name: 'trading_purpose',\n                        handler: function handler(field) {\n                            if (field.value() === 'tp_other') {\n                                // EREZ - Don't change disable state of field its changed in its handler\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n\n                                return;\n                            }\n\n                            // EREZ - Don't change disable state of field its changed in its handler\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'trading_purpose')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                anticipated_turnover: {\n                    title: __('reg.questionary.cysec.anticipated_turnover'),\n                    translationKey: 'anticipated_turnover',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                anticipated_turnover_details: {\n                    title: __('reg.questionary.cysec.anticipated_turnover'),\n                    translationKey: 'anticipated_turnover',\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            max_length: validations.maxLength(50, 'anticipated_turnover_details')\n                        },\n                        filters: ['string']\n                    },\n                    dependent: [{\n                        name: 'anticipated_turnover',\n                        handler: function handler(field) {\n                            if (field.value() === 'at_o_1000000') {\n                                field.disable();\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n\n                                return;\n                            }\n\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'anticipated_turnover')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                transactions_nature: {\n                    title: __('reg.questionary.cysec.transactions_nature'),\n                    translationKey: 'transactions_nature',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                transactions_nature_details: {\n                    title: __('reg.questionary.cysec.transactions_nature'),\n                    translationKey: 'transactions_nature',\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.tn_other')),\n                    options: {\n                        defaultValue: __('registration.field.label.tn_other')\n                    },\n                    dependent: [{\n                        name: 'transactions_nature',\n                        handler: function handler(field) {\n                            if (field.value() === 'tn_other') {\n                                field.disable();\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n\n                                return;\n                            }\n\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'transactions_nature')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                industry: {\n                    title: __('reg.questionary.cysec.industry'),\n                    translationKey: 'industry',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: 'employment_status',\n                        handler: dependentFieldHandlers.activateOnlyIfEmployed\n                    }],\n                    disable: 'select-disabled',\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                industry_details: {\n                    title: __('reg.questionary.cysec.industry'),\n                    translationKey: 'industry',\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.i_other')),\n                    dependent: [{\n                        name: 'industry',\n                        handler: function handler(field) {\n                            if (field.value() === 'i_other') {\n                                field.disable();\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n\n                                return;\n                            }\n\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'industry')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                work_countries: {\n                    title: __('reg.questionary.cysec.work_countries'),\n                    translationKey: 'work_countries',\n                    translationGroupPrefix: 'country.name',\n                    template: templates.multiSelect,\n                    validation: validations.multiSelectNotEmpty(),\n                    options: lowerCaseOptions(countriesToOptions(this.getAllCountries())),\n                    dependent: [{\n                        name: 'employment_status',\n                        handler: dependentFieldHandlers.activateWorkCountriesOnlyIfEmployed\n                    }],\n                    disable: 'select-disabled'\n                },\n                work_position: {\n                    title: __('reg.questionary.cysec.work_position'),\n                    translationKey: 'work_position',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: 'employment_status',\n                        handler: dependentFieldHandlers.activateOnlyIfEmployed\n                    }],\n                    disable: 'select-disabled',\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                work_position_details: {\n                    title: __('reg.questionary.cysec.work_position'),\n                    translationKey: 'work_position',\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.work_position_other')),\n                    dependent: [{\n                        name: 'work_position',\n                        handler: function handler(field) {\n                            if (field.value() === 'work_position_other') {\n                                field.disable();\n                                field.$el.css('visibility', 'hidden');\n                                this.enable();\n                                this.focus();\n\n                                return;\n                            }\n\n                            field.$el.css('visibility', 'visible');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'work_position')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                source_of_income: {\n                    title: __('reg.questionary.cysec.source_of_income'),\n                    translationKey: 'source_of_income',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                source_of_income_details: {\n                    title: __('reg.questionary.cysec.source_of_income'),\n                    translationKey: 'source_of_income',\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.so_other')),\n                    options: {\n                        defaultValue: __('registration.field.label.so_other')\n                    },\n                    dependent: [{\n                        name: 'source_of_income',\n                        handler: function handler(field) {\n                            if (field.value() === 'so_other') {\n                                field.disable();\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n\n                                return;\n                            }\n\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'source_of_income')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                estimated_gross_income: {\n                    title: __('reg.questionary.cysec.estimated_gross_income'),\n                    translationKey: 'estimated_gross_income',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                estimated_gross_income_details: {\n                    title: __('reg.questionary.cysec.estimated_gross_income'),\n                    translationKey: 'estimated_gross_income',\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.egi_o_250000')),\n                    options: {\n                        defaultValue: __('registration.field.label.egi_o_250000')\n                    },\n                    dependent: [{\n                        name: 'estimated_gross_income',\n                        handler: function handler(field) {\n                            if (field.value() === 'egi_o_250000') {\n                                field.disable();\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n\n                                return;\n                            }\n\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'estimated_gross_income')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                net_worth: {\n                    title: __('reg.questionary.cysec.net_worth'),\n                    translationKey: 'net_worth',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                net_worth_details: {\n                    title: __('reg.questionary.cysec.net_worth'),\n                    translationKey: 'net_worth',\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.nw_o_1000000')),\n                    options: {\n                        defaultValue: __('registration.field.label.nw_o_1000000')\n                    },\n                    dependent: [{\n                        name: 'net_worth',\n                        handler: function handler(field) {\n                            if (field.value() === 'nw_o_1000000') {\n                                field.disable();\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n\n                                return;\n                            }\n\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'net_worth')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                orin_of_funds: {\n                    title: __('reg.questionary.cysec.orin_of_funds'),\n                    translationKey: 'orin_of_funds',\n                    translationGroupPrefix: 'reg.questionary.cysec.orin_of_funds',\n                    template: templates.multiCheckBox,\n                    validation: validations.multiCheckBoxNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n\n                // Third Page:\n                education_level: {\n                    translationKey: 'education_level',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty('education_level'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                study_field: {\n                    title: __('registration.field.label.study_field'),\n                    translationKey: 'study_field',\n                    template: templates.selectBoxOverflowWidth,\n                    validation: validations.selectNotEmpty('study_field'),\n                    dependent: [{\n                        name: 'education_level',\n                        handler: dependentHandlers.updateStudyFieldAfterChangeEducationLevel\n                    }],\n                    disable: 'select-disabled',\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                study_field_details: {\n                    title: __('registration.field.label.study_field'),\n                    translationKey: 'study_field_other',\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.study_field_other')),\n                    options: {\n                        defaultValue: __('registration.field.label.study_field_other')\n                    },\n                    dependent: [{\n                        name: 'study_field',\n                        handler: dependentHandlers.updateStudyFieldDetailsAfterChangeStudyField\n                    }, {\n                        name: 'education_level',\n                        handler: dependentHandlers.updateStudyFieldDetailsAfterChangeEducationLevel\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'study_field')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                fx_volume_experience: {\n                    title: __('reg.questionary.cysec.fx_volume_experience'),\n                    translationKey: 'fx_volume_experience',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                csb_volume_experience: {\n                    title: __('reg.questionary.cysec.csb_volume_experience'),\n                    translationKey: 'csb_volume_experience',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                fx_experience: {\n                    title: __('reg.questionary.cysec.fx_experience'),\n                    translationKey: 'fx_experience',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                csb_experience: {\n                    title: __('reg.questionary.cysec.csb_experience'),\n                    translationKey: 'csb_experience',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                trade_kind: {\n                    title: __('reg.questionary.cysec.trade_kind'),\n                    translationKey: 'trade_kind',\n                    template: templates.selectBoxOverflowWidth,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    dependent: [{\n                        name: 'csb_experience',\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }, {\n                        name: 'fx_experience',\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }, {\n                        name: 'csb_volume_experience',\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }, {\n                        name: 'fx_volume_experience',\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }],\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                low_score_disclaimer: {\n                    title: '',\n                    translationKey: '',\n                    template: lowScoreDisclaimerTemplate,\n                    validation: {},\n                    disable: false,\n                    dependent: []\n                },\n\n                // Forth Page:\n                termsAndConditions: {\n                    translationKey: 'terms_and_conditions',\n                    options: {\n                        value: '',\n                        text: 'TRANS_OPTION_TEXT_KEY',\n                        parseString: true\n                    },\n                    template: templates.checkBox,\n                    validation: {\n                        rules: {\n                            not_equals: ['false', __('registration.warning.this_field_is_required', __('registration.field.label.termsAndConditions'))]\n                        },\n                        filters: []\n                    },\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                quiz_1: {\n                    title: __('reg.questionary.cysec.quiz_1'),\n                    translationKey: 'quiz_1',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                quiz_2: {\n                    title: __('reg.questionary.cysec.quiz_2'),\n                    translationKey: 'quiz_2',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                quiz_3: {\n                    title: __('reg.questionary.cysec.quiz_3'),\n                    translationKey: 'quiz_3',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                quiz_4: {\n                    title: __('reg.questionary.cysec.quiz_4'),\n                    translationKey: 'quiz_4',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                quiz_5: {\n                    title: __('reg.questionary.cysec.quiz_5'),\n                    translationKey: 'quiz_5',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                }\n            };\n        }\n\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/registration.form.config.trade.v2.js\n// module id = 2780\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/registration.form.config.trade.v2.js?");

/***/ }),

/***/ 2781:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var Model = __webpack_require__(16);\n    var Moment = __webpack_require__(6);\n    var localization = __webpack_require__(27);\n    var settings = __webpack_require__(12);\n    var templates = __webpack_require__(85);\n    var validations = __webpack_require__(458);\n    var tinValidations = __webpack_require__(2289);\n    var user = __webpack_require__(10);\n    var Form = __webpack_require__(853);\n\n    var RegistrationStepPersonalInformationBaseModel = __webpack_require__(2201);\n    var RegistrationStepTaxInformationMarketsModel = __webpack_require__(2474);\n    var dependentHandlers = __webpack_require__(2244);\n\n    var DEFAULT_EMPTY = 'EMPTY';\n\n    var lowScoreDisclaimerTemplate = settings.isRegistrationLowScoreDisclaimerEnabled() ? _.template('<div class=\"low-score-disclaimer\"><%=__(\"registration.step.disclaimer.financial_information\")%></div>') : _.template('');\n\n    function userHasItalianNationalCountryIdentifier() {\n        return user.getCountry() === 'IT' && user.getCitizenship() === 'IT' && !_.isEmpty(user.getNationalCountryIdentifier());\n    }\n\n    var dependentFieldHandlers = {\n\n        tradeKindNone: function tradeKindNone(field) {\n            this.$el.find('[value=tk_none]').removeAttr('disabled');\n            this.$el.find('[data-value=tk_none]').removeClass('hidden');\n            this.$el.find('[value=tk_my_own]').removeAttr('disabled');\n            this.$el.find('[data-value=tk_my_own]').removeClass('hidden');\n            this.$el.find('[value=tk_with_advice]').removeAttr('disabled');\n            this.$el.find('[data-value=tk_with_advice]').removeClass('hidden');\n\n            var formFields = field.options.form._fields;\n\n            if (Form.isFieldEquals(formFields['csb_experience'], [DEFAULT_EMPTY]) || Form.isFieldEquals(formFields['fx_experience'], [DEFAULT_EMPTY]) || Form.isFieldEquals(formFields['csb_volume_experience'], [DEFAULT_EMPTY]) || Form.isFieldEquals(formFields['fx_volume_experience'], [DEFAULT_EMPTY])) {\n\n                this.setDefaultValue();\n                this.disable();\n\n                return this.$el.addClass('select-disabled');\n            }\n\n            this.enable();\n            this.$el.removeClass('select-disabled');\n\n            if (!Form.isFieldEquals(formFields['csb_experience'], [DEFAULT_EMPTY, 'ce_none']) || !Form.isFieldEquals(formFields['fx_experience'], [DEFAULT_EMPTY, 'fe_none']) || !Form.isFieldEquals(formFields['csb_volume_experience'], [DEFAULT_EMPTY, 'cve_none']) || !Form.isFieldEquals(formFields['fx_volume_experience'], [DEFAULT_EMPTY, 'fve_none'])) {\n\n                this.$el.find('[value=tk_none]').attr('disabled', 'disabled');\n                this.$el.find('[data-value=tk_none]').addClass('hidden');\n            }\n\n            if (Form.isFieldEquals(formFields['fx_volume_experience'], ['fve_none']) && Form.isFieldEquals(formFields['csb_volume_experience'], ['cve_none'])) {\n                this.$el.find('[value=tk_my_own]').attr('disabled', 'disabled');\n                this.$el.find('[data-value=tk_my_own]').addClass('hidden');\n                this.$el.find('[value=tk_with_advice]').attr('disabled', 'disabled');\n                this.$el.find('[data-value=tk_with_advice]').addClass('hidden');\n            }\n        },\n\n        showNationalCountryIdentifier: function showNationalCountryIdentifier(field) {\n            if (Form.isFieldEquals(field, ['IT'])) {\n                this.enable();\n                this.setTooltipMessage(__('registration.field.explanation.national_country_identifier'));\n                this.showNotErrorTooltip();\n\n                return;\n            }\n\n            this.hideTooltip();\n            this.setDefaultValueWithFireChangeEvent();\n            this.validate();\n            this.disable();\n        },\n\n        afterChangeTinAbsenceReason: function afterChangeTinAbsenceReason(field) {\n            if (Form.isFieldEquals(field, ['NOT_REQUIRED'])) {\n                field.setTooltipMessage(__('reg.questionary.cysec.tin_absence_reason.not_required.tooltip'));\n                field.showNotErrorTooltip();\n\n                return;\n            }\n\n            field.hideTooltip();\n        },\n\n        updatePrimaryTinAfterChangeHavePrimaryTin: function updatePrimaryTinAfterChangeHavePrimaryTin(field) {\n            if (userHasItalianNationalCountryIdentifier()) {\n                this.$el.addClass('input-disabled');\n                field.$el.addClass('select-disabled');\n            }\n\n            if (Form.isFieldEquals(field, ['have_primary_tin_yes'])) {\n                this.enable();\n\n                return;\n            }\n\n            this.setDefaultValueWithFireChangeEvent();\n            this.disable();\n        },\n\n        updatePrimaryTinAfterChangePrimaryTinTaxJurisdiction: function updatePrimaryTinAfterChangePrimaryTinTaxJurisdiction(field) {\n            var taxJurisdiction = field.getValue().toUpperCase();\n            var tinValidationRules = tinValidations.getRulesByCountryCode(taxJurisdiction, __('registration.warning.primary_tin'));\n\n            this.setRules(tinValidationRules);\n        },\n\n        updatePrimaryTinAbsenceReasonAfterChangeHavePrimaryTin: function updatePrimaryTinAbsenceReasonAfterChangeHavePrimaryTin(field) {\n            if (Form.isFieldEquals(field, ['have_primary_tin_no'])) {\n                this.enable();\n\n                return;\n            }\n\n            this.setDefaultValueWithFireChangeEvent();\n            this.disable();\n        },\n\n        updateSecondaryTinTaxJurisdictionAfterChangeHavePrimaryTin: function updateSecondaryTinTaxJurisdictionAfterChangeHavePrimaryTin(field) {\n            if (Form.isFieldEquals(field, ['have_primary_tin_yes'])) {\n                this.enable();\n\n                return;\n            }\n\n            this.setDefaultValueWithFireChangeEvent();\n            this.disable();\n        },\n\n        updateSecondaryTinAfterChangeSecondaryTinTaxJurisdiction: function updateSecondaryTinAfterChangeSecondaryTinTaxJurisdiction(field) {\n            if (!Form.isFieldEquals(field, ['EMPTY', '00'])) {\n                var taxJurisdiction = field.getValue().toUpperCase();\n                var tinValidationRules = tinValidations.getRulesByCountryCode(taxJurisdiction, __('registration.warning.secondary_tin'));\n\n                this.setRules(tinValidationRules);\n\n                this.enable();\n                this.setDefaultState();\n\n                return;\n            }\n\n            this.setDefaultValueWithFireChangeEvent();\n            this.disable();\n        },\n\n        updateSecondaryTinTaxJurisdictionSource: function updateSecondaryTinTaxJurisdictionSource(countryCodes) {\n            var _this = this;\n\n            countryCodes.forEach(function (code) {\n                _this.$el.find('[value=\"' + code + '\"]').removeAttr('disabled');\n                _this.$el.find('[data-value=\"' + code + '\"]').removeClass('hidden');\n            });\n\n            var userCountry = user.getCountry().toUpperCase();\n\n            this.$el.find('[value=\"' + userCountry + '\"]').attr('disabled', 'disabled');\n            this.$el.find('[data-value=\"' + userCountry + '\"]').addClass('hidden');\n        }\n\n    };\n\n    function countryCodeToOptions(countries) {\n        var options = _.pluck(countries, 'code').sort(function (a, b) {\n            return __('country.name.' + a).localeCompare(__('country.name.' + b));\n        });\n\n        options.unshift('EMPTY');\n\n        return options;\n    }\n\n    function taxJurisdictionOptions(options) {\n        return ['00'].concat(options);\n    }\n\n    module.exports = Model.extend({\n\n        getAllCountries: function getAllCountries() {\n            return this.get('allCountries');\n        },\n\n        getAllCountryCodes: function getAllCountryCodes() {\n            return _.pluck(this.getAllCountries(), 'code');\n        },\n\n        getAllowedCountries: function getAllowedCountries() {\n            return this.get('allowedCountries');\n        },\n\n        getCountriesPhoneCodes: function getCountriesPhoneCodes() {\n            return this.get('countriesPhoneCodes');\n        },\n\n        getPhoneToCountry: function getPhoneToCountry() {\n            return this.get('phoneToCountry');\n        },\n\n        getStepModels: function getStepModels() {\n            return {\n                'personal_information': new RegistrationStepPersonalInformationBaseModel(),\n                'tax_information': new RegistrationStepTaxInformationMarketsModel()\n            };\n        },\n\n        getFormConfig: function getFormConfig() {\n\n            return {\n                // Personal Information Page:\n                firstName: {\n                    translationKey: 'first_name',\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('first_name'),\n                            max_length: validations.maxLength(50, 'first_name')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                lastName: {\n                    translationKey: 'last_name',\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('last_name'),\n                            max_length: validations.maxLength(50, 'last_name')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                phone: {\n                    translationKey: 'phone',\n                    options: {\n                        countries: this.getCountriesPhoneCodes(),\n                        phoneToCountry: this.getPhoneToCountry()\n                    },\n                    template: templates.phoneBox,\n                    validation: {\n                        rules: {\n                            // TODO - localize\n                            not_empty: validations.notEmpty('phone'),\n                            numeric: validations.numeric('phone'),\n                            validateLength: function validateLength(data) {\n                                var min = 6;\n                                var max = 20;\n\n                                if (data.phone.length > max) {\n                                    return __('registration.phone.max', max);\n                                }\n\n                                if (data.phoneInput.length < min) {\n                                    return __('registration.phone.min', min);\n                                }\n\n                                if (_.isEmpty(data.phoneSelect)) {\n                                    return validations.notEmpty('phone');\n                                }\n\n                                return null;\n                            }\n                        },\n                        filters: []\n                    },\n                    disable: false\n                },\n                birthDate: {\n                    translationKey: 'date_of_birth',\n                    // TODO - this could be moved to the date input view\n                    options: {\n                        minAge: 18,\n                        maxAge: 87,\n                        moment: Moment,\n                        splitByComma: localization.splitByComma\n                    },\n                    template: templates.dateBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('date_of_birth')\n                        },\n                        filters: []\n                    },\n                    disable: false\n                },\n                address: {\n                    translationKey: 'address',\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('address'),\n                            max_length: validations.maxLength(50, 'address')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                zipCode: {\n                    translationKey: 'zip_code',\n                    template: templates.inputBox,\n                    validation: validations.zipCode('zip_code'),\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                city: {\n                    translationKey: 'city',\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('city')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                country: {\n                    translationKey: 'country',\n                    translationGroupPrefix: 'country.name',\n                    options: countryCodeToOptions(this.getAllowedCountries()),\n                    template: templates.countriesSelectBox,\n                    validation: validations.selectNotEmpty('country'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                citizenship: {\n                    title: __('registration.field.label.citizenship'),\n                    // EREZ _ THIS IS NOT A MISTAKE\n                    translationKey: 'country',\n                    translationGroupPrefix: 'country.name',\n                    options: countryCodeToOptions(this.getAllCountries()),\n                    template: templates.countriesSelectBox,\n                    validation: validations.selectNotEmpty('citizenship'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                nationalCountryIdentifier: {\n                    title: __('registration.field.label.national_country_identifier'),\n                    template: templates.inputBox,\n                    dependent: [{\n                        name: 'citizenship',\n                        handler: dependentFieldHandlers.showNationalCountryIdentifier\n                    }],\n                    validation: {\n                        rules: {\n                            regexp: [/^$|^[a-zA-Z]{6}[a-zA-Z0-9]{10}$/, __('registration.warning.national_country_identifier')]\n                        },\n                        filters: ['string']\n                    },\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    },\n                    disable: true\n                },\n\n                // Tax information Page:\n                primaryTinTaxJurisdiction: {\n                    title: __('registration.field.label.primary_tin_tax_jurisdiction'),\n                    translationKey: 'primary_tin_tax_jurisdiction',\n                    translationGroupPrefix: 'tax_jurisdiction',\n                    options: countryCodeToOptions(this.getAllCountries()),\n                    template: templates.countriesSelectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: 'select-disabled',\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                have_primary_tin: {\n                    title: __('registration.field.label.have_primary_tin'),\n                    translationKey: 'have_primary_tin',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: 'tinAbsenceReason',\n                        handler: dependentFieldHandlers.afterChangeTinAbsenceReason\n                    }],\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                primaryTin: {\n                    title: __('registration.field.label.primary_tin'),\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {},\n                        filters: tinValidations.getFilters\n                    },\n                    dependent: [{\n                        name: 'have_primary_tin',\n                        handler: dependentFieldHandlers.updatePrimaryTinAfterChangeHavePrimaryTin\n                    }, {\n                        name: 'primaryTinTaxJurisdiction',\n                        handler: dependentFieldHandlers.updatePrimaryTinAfterChangePrimaryTinTaxJurisdiction\n                    }],\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    },\n                    disable: true\n                },\n                tinAbsenceReason: {\n                    title: __('registration.field.label.tin_absence_reason'),\n                    translationKey: 'tin_absence_reason',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: 'have_primary_tin',\n                        handler: dependentFieldHandlers.updatePrimaryTinAbsenceReasonAfterChangeHavePrimaryTin\n                    }],\n                    disable: true,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                secondaryTinTaxJurisdiction: {\n                    title: __('registration.field.label.secondary_tin_tax_jurisdiction'),\n                    translationKey: 'country',\n                    translationGroupPrefix: 'tax_jurisdiction',\n                    options: taxJurisdictionOptions(countryCodeToOptions(this.getAllCountries())),\n                    template: templates.countriesSelectBox,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: 'have_primary_tin',\n                        handler: dependentFieldHandlers.updateSecondaryTinTaxJurisdictionAfterChangeHavePrimaryTin\n                    }, {\n                        name: 'primaryTinTaxJurisdiction',\n                        handler: _.partial(dependentFieldHandlers.updateSecondaryTinTaxJurisdictionSource, this.getAllCountryCodes())\n                    }],\n                    disable: true,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                secondaryTin: {\n                    title: __('registration.field.label.secondary_tin'),\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {},\n                        filters: tinValidations.getFilters\n                    },\n                    dependent: [{\n                        name: 'secondaryTinTaxJurisdiction',\n                        handler: dependentFieldHandlers.updateSecondaryTinAfterChangeSecondaryTinTaxJurisdiction\n                    }],\n                    disable: true,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                fatca: {\n                    translationKey: 'fatca',\n                    options: [{\n                        value: 'NO',\n                        text: __('no')\n                    }, {\n                        value: 'YES',\n                        text: __('yes')\n                    }, {\n                        value: __('registration.field.fatca.link.href'),\n                        text: __('registration.field.label.fatca.learn_more')\n                    }],\n                    template: templates.fatcaBox,\n                    validation: validations.radioNotEmpty('fatca'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                tax_information_disclaimer: {\n                    template: _.template('<div class=\"disclaimer\"><%=__(\"registration.step.disclaimer.tax_information\")%></div>'),\n                    disable: false\n                },\n\n                // Financial Information Page:\n                employment_status: {\n                    translationKey: 'employment_status',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty('employment_status'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                profession: {\n                    title: __('reg.questionary.cysec.profession'),\n                    translationKey: 'profession',\n                    template: templates.selectBoxOverflowWidth,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: 'employment_status',\n                        handler: function handler(field) {\n                            if (field.value() === 'EMPTY') {\n                                this.disable();\n                                this.$el.addClass('select-disabled');\n\n                                return;\n                            }\n\n                            if (field.value() === 'es_employed' || field.value() === 'es_self_employed') {\n                                this.$el.removeClass('select-disabled');\n\n                                return this.enable();\n                            }\n\n                            this.setDefaultValue();\n                            this.disable();\n                            this.$el.addClass('select-disabled');\n                        }\n                    }],\n                    disable: 'select-disabled',\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                annual_income: {\n                    title: __('reg.questionary.cysec.annual_income'),\n                    translationKey: 'annual_income',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                intend_invest: {\n                    title: __('reg.questionary.cysec.intend_invest'),\n                    translationKey: 'intend_invest',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                trading_purpose: {\n                    title: __('reg.questionary.cysec.trading_purpose'),\n                    translationKey: 'trading_purpose',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                trading_purpose_details: {\n                    title: __('reg.questionary.cysec.trading_purpose'),\n                    translationKey: 'trading_purpose',\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.industry_other')),\n                    options: {\n                        defaultValue: __('registration.field.label.industry_other')\n                    },\n                    dependent: [{\n                        name: 'trading_purpose',\n                        handler: function handler(field) {\n                            if (field.value() === 'tp_other') {\n                                // EREZ - Don't change disable state of field its changed in its handler\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n\n                                return;\n                            }\n\n                            // EREZ - Don't change disable state of field its changed in its handler\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'trading_purpose')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                savings_investments: {\n                    title: __('reg.questionary.cysec.savings_investments'),\n                    translationKey: 'savings_investments',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                funds_source: {\n                    title: __('reg.questionary.cysec.funds_source'),\n                    translationKey: 'funds_source',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                funds_source_details: {\n                    title: __('reg.questionary.cysec.funds_source'),\n                    translationKey: 'trading_purpose',\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.funds_source')),\n                    options: {\n                        defaultValue: __('registration.field.label.funds_source')\n                    },\n                    dependent: [{\n                        name: 'funds_source',\n                        handler: function handler(field) {\n                            if (field.value() === 'fs_other') {\n                                // EREZ - Don't change disable state of field its changed in its handler\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n\n                                return;\n                            }\n\n                            // EREZ - Don't change disable state of field its changed in its handler\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'funds_source')\n                    },\n                    disable: true\n                },\n\n                // Trading Experience Page:\n                education_level: {\n                    translationKey: 'education_level',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty('education_level'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                study_field: {\n                    title: __('registration.field.label.study_field'),\n                    translationKey: 'study_field',\n                    template: templates.selectBoxOverflowWidth,\n                    validation: validations.selectNotEmpty('study_field'),\n                    dependent: [{\n                        name: 'education_level',\n                        handler: dependentHandlers.updateStudyFieldAfterChangeEducationLevel\n                    }],\n                    disable: 'select-disabled',\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                study_field_details: {\n                    title: __('registration.field.label.study_field'),\n                    translationKey: 'study_field_other',\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.study_field_other')),\n                    options: {\n                        defaultValue: __('registration.field.label.study_field_other')\n                    },\n                    dependent: [{\n                        name: 'study_field',\n                        handler: dependentHandlers.updateStudyFieldDetailsAfterChangeStudyField\n                    }, {\n                        name: 'education_level',\n                        handler: dependentHandlers.updateStudyFieldDetailsAfterChangeEducationLevel\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'study_field')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                fx_volume_experience: {\n                    title: __('reg.questionary.cysec.fx_volume_experience'),\n                    translationKey: 'fx_volume_experience',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                csb_volume_experience: {\n                    title: __('reg.questionary.cysec.csb_volume_experience'),\n                    translationKey: 'csb_volume_experience',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                fx_experience: {\n                    title: __('reg.questionary.cysec.fx_experience'),\n                    translationKey: 'fx_experience',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                csb_experience: {\n                    title: __('reg.questionary.cysec.csb_experience'),\n                    translationKey: 'csb_experience',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                trade_kind: {\n                    title: __('reg.questionary.cysec.trade_kind'),\n                    translationKey: 'trade_kind',\n                    template: templates.selectBoxOverflowWidth,\n                    validation: validations.selectNotEmpty(),\n                    disable: 'select-disabled',\n                    dependent: [{\n                        name: 'csb_experience',\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }, {\n                        name: 'fx_experience',\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }, {\n                        name: 'csb_volume_experience',\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }, {\n                        name: 'fx_volume_experience',\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }],\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                low_score_disclaimer: {\n                    title: '',\n                    translationKey: '',\n                    template: lowScoreDisclaimerTemplate,\n                    validation: {},\n                    disable: false,\n                    dependent: []\n                },\n\n                // Financial Knowledge Page:\n                termsAndConditions: {\n                    translationKey: 'terms_and_conditions',\n                    options: {\n                        value: '',\n                        text: 'TRANS_OPTION_TEXT_KEY',\n                        parseString: true\n                    },\n                    template: templates.checkBox,\n                    validation: {\n                        rules: {\n                            not_equals: ['false', __('registration.warning.this_field_is_required', __('registration.field.label.termsAndConditions'))]\n                        },\n                        filters: []\n                    },\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                apple_drops: {\n                    title: __('reg.questionary.cysec.apple_drops'),\n                    translationKey: 'apple_drops',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                facebook_buy_markets: {\n                    title: __('reg.questionary.cysec.facebook_buy_markets'),\n                    translationKey: 'facebook_buy_markets',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                maximum_open_position: {\n                    title: __('reg.questionary.cysec.maximum_open_position'),\n                    translationKey: 'maximum_open_position',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                trade_leverage: {\n                    title: __('reg.questionary.cysec.trade_leverage'),\n                    translationKey: 'trade_leverage',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                cfd_trading: {\n                    title: __('reg.questionary.cysec.cfd_trading'),\n                    translationKey: 'cfd_trading',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                }\n\n            };\n        }\n\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/registration.form.config.markets.js\n// module id = 2781\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/registration.form.config.markets.js?");

/***/ }),

/***/ 2782:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var Model = __webpack_require__(16);\n    var Moment = __webpack_require__(6);\n    var localization = __webpack_require__(27);\n    var settings = __webpack_require__(12);\n    var templates = __webpack_require__(85);\n    var validations = __webpack_require__(458);\n    var tinValidations = __webpack_require__(2289);\n    var user = __webpack_require__(10);\n    var Form = __webpack_require__(853);\n\n    var RegistrationStepPersonalInformationBaseModel = __webpack_require__(2201);\n    var RegistrationStepTaxInformationMarketsModel = __webpack_require__(2474);\n    var dependentHandlers = __webpack_require__(2244);\n\n    var DEFAULT_EMPTY = 'EMPTY';\n\n    var lowScoreDisclaimerTemplate = settings.isRegistrationLowScoreDisclaimerEnabled() ? _.template('<div class=\"low-score-disclaimer\"><%=__(\"registration.step.disclaimer.financial_information\")%></div>') : _.template('');\n\n    function userHasItalianNationalCountryIdentifier() {\n        return user.getCountry() === 'IT' && user.getCitizenship() === 'IT' && !_.isEmpty(user.getNationalCountryIdentifier());\n    }\n\n    var dependentFieldHandlers = {\n\n        tradeKindNone: function tradeKindNone(field) {\n            this.$el.find('[value=tk_none]').removeAttr('disabled');\n            this.$el.find('[data-value=tk_none]').removeClass('hidden');\n            this.$el.find('[value=tk_my_own]').removeAttr('disabled');\n            this.$el.find('[data-value=tk_my_own]').removeClass('hidden');\n            this.$el.find('[value=tk_with_advice]').removeAttr('disabled');\n            this.$el.find('[data-value=tk_with_advice]').removeClass('hidden');\n\n            var formFields = field.options.form._fields;\n\n            if (Form.isFieldEquals(formFields['fx_experience'], [DEFAULT_EMPTY]) || Form.isFieldEquals(formFields['fx_volume_experience'], [DEFAULT_EMPTY])) {\n\n                this.setDefaultValue();\n                this.disable();\n\n                return this.$el.addClass('select-disabled');\n            }\n\n            this.enable();\n            this.$el.removeClass('select-disabled');\n\n            if (!Form.isFieldEquals(formFields['fx_experience'], [DEFAULT_EMPTY, 'fe_none']) || !Form.isFieldEquals(formFields['fx_volume_experience'], [DEFAULT_EMPTY, 'fve_none'])) {\n\n                this.$el.find('[value=tk_none]').attr('disabled', 'disabled');\n                this.$el.find('[data-value=tk_none]').addClass('hidden');\n            }\n\n            if (Form.isFieldEquals(formFields['fx_volume_experience'], ['fve_none'])) {\n                this.$el.find('[value=tk_my_own]').attr('disabled', 'disabled');\n                this.$el.find('[data-value=tk_my_own]').addClass('hidden');\n                this.$el.find('[value=tk_with_advice]').attr('disabled', 'disabled');\n                this.$el.find('[data-value=tk_with_advice]').addClass('hidden');\n            }\n        },\n\n        showNationalCountryIdentifier: function showNationalCountryIdentifier(field) {\n            if (Form.isFieldEquals(field, ['IT'])) {\n                this.enable();\n                this.setTooltipMessage(__('registration.field.explanation.national_country_identifier'));\n                this.showNotErrorTooltip();\n\n                return;\n            }\n\n            this.hideTooltip();\n            this.setDefaultValueWithFireChangeEvent();\n            this.validate();\n            this.disable();\n        },\n\n        afterChangeTinAbsenceReason: function afterChangeTinAbsenceReason(field) {\n            if (Form.isFieldEquals(field, ['NOT_REQUIRED'])) {\n                field.setTooltipMessage(__('reg.questionary.cysec.tin_absence_reason.not_required.tooltip'));\n                field.showNotErrorTooltip();\n\n                return;\n            }\n\n            field.hideTooltip();\n        },\n\n        updatePrimaryTinAfterChangeHavePrimaryTin: function updatePrimaryTinAfterChangeHavePrimaryTin(field) {\n            if (userHasItalianNationalCountryIdentifier()) {\n                this.$el.addClass('input-disabled');\n                field.$el.addClass('select-disabled');\n            }\n\n            if (Form.isFieldEquals(field, ['have_primary_tin_yes'])) {\n                this.enable();\n\n                return;\n            }\n\n            this.setDefaultValueWithFireChangeEvent();\n            this.disable();\n        },\n\n        updatePrimaryTinAfterChangePrimaryTinTaxJurisdiction: function updatePrimaryTinAfterChangePrimaryTinTaxJurisdiction(field) {\n            var taxJurisdiction = field.getValue().toUpperCase();\n            var tinValidationRules = tinValidations.getRulesByCountryCode(taxJurisdiction, __('registration.warning.primary_tin'));\n\n            this.setRules(tinValidationRules);\n        },\n\n        updatePrimaryTinAbsenceReasonAfterChangeHavePrimaryTin: function updatePrimaryTinAbsenceReasonAfterChangeHavePrimaryTin(field) {\n            if (Form.isFieldEquals(field, ['have_primary_tin_no'])) {\n                this.enable();\n\n                return;\n            }\n\n            this.setDefaultValueWithFireChangeEvent();\n            this.disable();\n        },\n\n        updateSecondaryTinTaxJurisdictionAfterChangeHavePrimaryTin: function updateSecondaryTinTaxJurisdictionAfterChangeHavePrimaryTin(field) {\n            if (Form.isFieldEquals(field, ['have_primary_tin_yes'])) {\n                this.enable();\n\n                return;\n            }\n\n            this.setDefaultValueWithFireChangeEvent();\n            this.disable();\n        },\n\n        updateSecondaryTinAfterChangeSecondaryTinTaxJurisdiction: function updateSecondaryTinAfterChangeSecondaryTinTaxJurisdiction(field) {\n            if (!Form.isFieldEquals(field, ['EMPTY', '00'])) {\n                var taxJurisdiction = field.getValue().toUpperCase();\n                var tinValidationRules = tinValidations.getRulesByCountryCode(taxJurisdiction, __('registration.warning.secondary_tin'));\n\n                this.setRules(tinValidationRules);\n\n                this.enable();\n                this.setDefaultState();\n\n                return;\n            }\n\n            this.setDefaultValueWithFireChangeEvent();\n            this.disable();\n        },\n\n        updateSecondaryTinTaxJurisdictionSource: function updateSecondaryTinTaxJurisdictionSource(countryCodes) {\n            var _this = this;\n\n            countryCodes.forEach(function (code) {\n                _this.$el.find('[value=\"' + code + '\"]').removeAttr('disabled');\n                _this.$el.find('[data-value=\"' + code + '\"]').removeClass('hidden');\n            });\n\n            var userCountry = user.getCountry().toUpperCase();\n\n            this.$el.find('[value=\"' + userCountry + '\"]').attr('disabled', 'disabled');\n            this.$el.find('[data-value=\"' + userCountry + '\"]').addClass('hidden');\n        }\n\n    };\n\n    function countryCodeToOptions(countries) {\n        var options = _.pluck(countries, 'code').sort(function (a, b) {\n            return __('country.name.' + a).localeCompare(__('country.name.' + b));\n        });\n\n        options.unshift('EMPTY');\n\n        return options;\n    }\n\n    function taxJurisdictionOptions(options) {\n        return ['00'].concat(options);\n    }\n\n    module.exports = Model.extend({\n\n        getAllCountries: function getAllCountries() {\n            return this.get('allCountries');\n        },\n\n        getAllCountryCodes: function getAllCountryCodes() {\n            return _.pluck(this.getAllCountries(), 'code');\n        },\n\n        getAllowedCountries: function getAllowedCountries() {\n            return this.get('allowedCountries');\n        },\n\n        getCountriesPhoneCodes: function getCountriesPhoneCodes() {\n            return this.get('countriesPhoneCodes');\n        },\n\n        getPhoneToCountry: function getPhoneToCountry() {\n            return this.get('phoneToCountry');\n        },\n\n        getStepModels: function getStepModels() {\n            return {\n                'personal_information': new RegistrationStepPersonalInformationBaseModel(),\n                'tax_information': new RegistrationStepTaxInformationMarketsModel()\n            };\n        },\n\n        getFormConfig: function getFormConfig() {\n\n            return {\n                // Personal Information Page:\n                firstName: {\n                    translationKey: 'first_name',\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('first_name'),\n                            max_length: validations.maxLength(50, 'first_name')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                lastName: {\n                    translationKey: 'last_name',\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('last_name'),\n                            max_length: validations.maxLength(50, 'last_name')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                phone: {\n                    translationKey: 'phone',\n                    options: {\n                        countries: this.getCountriesPhoneCodes(),\n                        phoneToCountry: this.getPhoneToCountry()\n                    },\n                    template: templates.phoneBox,\n                    validation: {\n                        rules: {\n                            // TODO - localize\n                            not_empty: validations.notEmpty('phone'),\n                            numeric: validations.numeric('phone'),\n                            validateLength: function validateLength(data) {\n                                var min = 6;\n                                var max = 20;\n\n                                if (data.phone.length > max) {\n                                    return __('registration.phone.max', max);\n                                }\n\n                                if (data.phoneInput.length < min) {\n                                    return __('registration.phone.min', min);\n                                }\n\n                                if (_.isEmpty(data.phoneSelect)) {\n                                    return validations.notEmpty('phone');\n                                }\n\n                                return null;\n                            }\n                        },\n                        filters: []\n                    },\n                    disable: false\n                },\n                birthDate: {\n                    translationKey: 'date_of_birth',\n                    // TODO - this could be moved to the date input view\n                    options: {\n                        minAge: 18,\n                        maxAge: 87,\n                        moment: Moment,\n                        splitByComma: localization.splitByComma\n                    },\n                    template: templates.dateBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('date_of_birth')\n                        },\n                        filters: []\n                    },\n                    disable: false\n                },\n                address: {\n                    translationKey: 'address',\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('address'),\n                            max_length: validations.maxLength(50, 'address')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                zipCode: {\n                    translationKey: 'zip_code',\n                    template: templates.inputBox,\n                    validation: validations.zipCode('zip_code'),\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                city: {\n                    translationKey: 'city',\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('city')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                country: {\n                    translationKey: 'country',\n                    translationGroupPrefix: 'country.name',\n                    options: countryCodeToOptions(this.getAllowedCountries()),\n                    template: templates.countriesSelectBox,\n                    validation: validations.selectNotEmpty('country'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                citizenship: {\n                    title: __('registration.field.label.citizenship'),\n                    // EREZ _ THIS IS NOT A MISTAKE\n                    translationKey: 'country',\n                    translationGroupPrefix: 'country.name',\n                    options: countryCodeToOptions(this.getAllCountries()),\n                    template: templates.countriesSelectBox,\n                    validation: validations.selectNotEmpty('citizenship'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                nationalCountryIdentifier: {\n                    title: __('registration.field.label.national_country_identifier'),\n                    template: templates.inputBox,\n                    dependent: [{\n                        name: 'citizenship',\n                        handler: dependentFieldHandlers.showNationalCountryIdentifier\n                    }],\n                    validation: {\n                        rules: {\n                            regexp: [/^$|^[a-zA-Z]{6}[a-zA-Z0-9]{10}$/, __('registration.warning.national_country_identifier')]\n                        },\n                        filters: ['string']\n                    },\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    },\n                    disable: true\n                },\n\n                // Tax information Page:\n                primaryTinTaxJurisdiction: {\n                    title: __('registration.field.label.primary_tin_tax_jurisdiction'),\n                    translationKey: 'primary_tin_tax_jurisdiction',\n                    translationGroupPrefix: 'tax_jurisdiction',\n                    options: countryCodeToOptions(this.getAllCountries()),\n                    template: templates.countriesSelectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: 'select-disabled',\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                have_primary_tin: {\n                    title: __('registration.field.label.have_primary_tin'),\n                    translationKey: 'have_primary_tin',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: 'tinAbsenceReason',\n                        handler: dependentFieldHandlers.afterChangeTinAbsenceReason\n                    }],\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                primaryTin: {\n                    title: __('registration.field.label.primary_tin'),\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {},\n                        filters: tinValidations.getFilters\n                    },\n                    dependent: [{\n                        name: 'have_primary_tin',\n                        handler: dependentFieldHandlers.updatePrimaryTinAfterChangeHavePrimaryTin\n                    }, {\n                        name: 'primaryTinTaxJurisdiction',\n                        handler: dependentFieldHandlers.updatePrimaryTinAfterChangePrimaryTinTaxJurisdiction\n                    }],\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    },\n                    disable: true\n                },\n                tinAbsenceReason: {\n                    title: __('registration.field.label.tin_absence_reason'),\n                    translationKey: 'tin_absence_reason',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: 'have_primary_tin',\n                        handler: dependentFieldHandlers.updatePrimaryTinAbsenceReasonAfterChangeHavePrimaryTin\n                    }],\n                    disable: true,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                secondaryTinTaxJurisdiction: {\n                    title: __('registration.field.label.secondary_tin_tax_jurisdiction'),\n                    translationKey: 'country',\n                    translationGroupPrefix: 'tax_jurisdiction',\n                    options: taxJurisdictionOptions(countryCodeToOptions(this.getAllCountries())),\n                    template: templates.countriesSelectBox,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: 'have_primary_tin',\n                        handler: dependentFieldHandlers.updateSecondaryTinTaxJurisdictionAfterChangeHavePrimaryTin\n                    }, {\n                        name: 'primaryTinTaxJurisdiction',\n                        handler: _.partial(dependentFieldHandlers.updateSecondaryTinTaxJurisdictionSource, this.getAllCountryCodes())\n                    }],\n                    disable: true,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                secondaryTin: {\n                    title: __('registration.field.label.secondary_tin'),\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {},\n                        filters: tinValidations.getFilters\n                    },\n                    dependent: [{\n                        name: 'secondaryTinTaxJurisdiction',\n                        handler: dependentFieldHandlers.updateSecondaryTinAfterChangeSecondaryTinTaxJurisdiction\n                    }],\n                    disable: true,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                fatca: {\n                    translationKey: 'fatca',\n                    options: [{\n                        value: 'NO',\n                        text: __('no')\n                    }, {\n                        value: 'YES',\n                        text: __('yes')\n                    }, {\n                        value: __('registration.field.fatca.link.href'),\n                        text: __('registration.field.label.fatca.learn_more')\n                    }],\n                    template: templates.fatcaBox,\n                    validation: validations.radioNotEmpty('fatca'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                tax_information_disclaimer: {\n                    template: _.template('<div class=\"disclaimer\"><%=__(\"registration.step.disclaimer.tax_information\")%></div>'),\n                    disable: false\n                },\n\n                // Financial Information Page:\n                employment_status: {\n                    translationKey: 'employment_status',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty('employment_status'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                profession: {\n                    title: __('reg.questionary.cysec.profession'),\n                    translationKey: 'profession',\n                    template: templates.selectBoxOverflowWidth,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: 'employment_status',\n                        handler: function handler(field) {\n                            if (field.value() === 'EMPTY') {\n                                this.disable();\n                                this.$el.addClass('select-disabled');\n\n                                return;\n                            }\n\n                            if (field.value() === 'es_employed' || field.value() === 'es_self_employed') {\n                                this.$el.removeClass('select-disabled');\n\n                                return this.enable();\n                            }\n\n                            this.setDefaultValue();\n                            this.disable();\n                            this.$el.addClass('select-disabled');\n                        }\n                    }],\n                    disable: 'select-disabled',\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                annual_income: {\n                    title: __('reg.questionary.cysec.annual_income'),\n                    translationKey: 'annual_income',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                intend_invest: {\n                    title: __('reg.questionary.cysec.intend_invest'),\n                    translationKey: 'intend_invest',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                trading_purpose: {\n                    title: __('reg.questionary.cysec.trading_purpose'),\n                    translationKey: 'trading_purpose',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                trading_purpose_details: {\n                    title: __('reg.questionary.cysec.trading_purpose'),\n                    translationKey: 'trading_purpose',\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.industry_other')),\n                    options: {\n                        defaultValue: __('registration.field.label.industry_other')\n                    },\n                    dependent: [{\n                        name: 'trading_purpose',\n                        handler: function handler(field) {\n                            if (field.value() === 'tp_other') {\n                                // EREZ - Don't change disable state of field its changed in its handler\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n\n                                return;\n                            }\n\n                            // EREZ - Don't change disable state of field its changed in its handler\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'trading_purpose')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                savings_investments: {\n                    title: __('reg.questionary.cysec.savings_investments'),\n                    translationKey: 'savings_investments',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                funds_source: {\n                    title: __('reg.questionary.cysec.funds_source'),\n                    translationKey: 'funds_source',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                funds_source_details: {\n                    title: __('reg.questionary.cysec.funds_source'),\n                    translationKey: 'trading_purpose',\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.funds_source')),\n                    options: {\n                        defaultValue: __('registration.field.label.funds_source')\n                    },\n                    dependent: [{\n                        name: 'funds_source',\n                        handler: function handler(field) {\n                            if (field.value() === 'fs_other') {\n                                // EREZ - Don't change disable state of field its changed in its handler\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n\n                                return;\n                            }\n\n                            // EREZ - Don't change disable state of field its changed in its handler\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'funds_source')\n                    },\n                    disable: true\n                },\n\n                // Trading Experience Page:\n                education_level: {\n                    translationKey: 'education_level',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty('education_level'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                study_field: {\n                    title: __('registration.field.label.study_field'),\n                    translationKey: 'study_field',\n                    template: templates.selectBoxOverflowWidth,\n                    validation: validations.selectNotEmpty('study_field'),\n                    dependent: [{\n                        name: 'education_level',\n                        handler: dependentHandlers.updateStudyFieldAfterChangeEducationLevel\n                    }],\n                    disable: 'select-disabled',\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                study_field_details: {\n                    title: __('registration.field.label.study_field'),\n                    translationKey: 'study_field_other',\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.study_field_other')),\n                    options: {\n                        defaultValue: __('registration.field.label.study_field_other')\n                    },\n                    dependent: [{\n                        name: 'study_field',\n                        handler: dependentHandlers.updateStudyFieldDetailsAfterChangeStudyField\n                    }, {\n                        name: 'education_level',\n                        handler: dependentHandlers.updateStudyFieldDetailsAfterChangeEducationLevel\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'study_field')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                fx_volume_experience: {\n                    title: __('reg.questionary.cysec.fx_volume_experience'),\n                    translationKey: 'fx_volume_experience',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                fx_experience: {\n                    title: __('reg.questionary.cysec.fx_experience'),\n                    translationKey: 'fx_experience',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                trade_kind: {\n                    title: __('reg.questionary.cysec.trade_kind'),\n                    translationKey: 'trade_kind',\n                    template: templates.selectBoxOverflowWidth,\n                    validation: validations.selectNotEmpty(),\n                    disable: 'select-disabled',\n                    dependent: [{\n                        name: 'fx_experience',\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }, {\n                        name: 'fx_volume_experience',\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }],\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                low_score_disclaimer: {\n                    title: '',\n                    translationKey: '',\n                    template: lowScoreDisclaimerTemplate,\n                    validation: {},\n                    disable: false,\n                    dependent: []\n                },\n\n                termsAndConditions: {\n                    translationKey: 'terms_and_conditions',\n                    options: {\n                        value: '',\n                        text: 'TRANS_OPTION_TEXT_KEY',\n                        parseString: true\n                    },\n                    template: templates.checkBox,\n                    validation: {\n                        rules: {\n                            not_equals: ['false', __('registration.warning.this_field_is_required', __('registration.field.label.termsAndConditions'))]\n                        },\n                        filters: []\n                    },\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                }\n\n            };\n        }\n\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/registration.form.config.markets.meconex.js\n// module id = 2782\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/registration.form.config.markets.meconex.js?");

/***/ }),

/***/ 2783:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var Model = __webpack_require__(16);\n    var Moment = __webpack_require__(6);\n    var localization = __webpack_require__(27);\n    var settings = __webpack_require__(12);\n    var templates = __webpack_require__(85);\n    var validations = __webpack_require__(458);\n    var tinValidations = __webpack_require__(2289);\n    var user = __webpack_require__(10);\n    var Form = __webpack_require__(853);\n\n    var RegistrationStepPersonalInformationBaseModel = __webpack_require__(2201);\n    var RegistrationStepTaxInformationMarketsModel = __webpack_require__(2474);\n    var dependentHandlers = __webpack_require__(2244);\n\n    var DEFAULT_EMPTY = 'EMPTY';\n\n    var lowScoreDisclaimerTemplate = settings.isRegistrationLowScoreDisclaimerEnabled() ? _.template('<div class=\"low-score-disclaimer\"><%=__(\"registration.step.disclaimer.financial_information\")%></div>') : _.template('');\n\n    function userHasItalianNationalCountryIdentifier() {\n        return user.getCountry() === 'IT' && user.getCitizenship() === 'IT' && !_.isEmpty(user.getNationalCountryIdentifier());\n    }\n\n    var dependentFieldHandlers = {\n\n        tradeKindNone: function tradeKindNone(field) {\n            this.$el.find('[value=tk_none]').removeAttr('disabled');\n            this.$el.find('[data-value=tk_none]').removeClass('hidden');\n            this.$el.find('[value=tk_my_own]').removeAttr('disabled');\n            this.$el.find('[data-value=tk_my_own]').removeClass('hidden');\n            this.$el.find('[value=tk_with_advice]').removeAttr('disabled');\n            this.$el.find('[data-value=tk_with_advice]').removeClass('hidden');\n\n            var formFields = field.options.form._fields;\n\n            if (Form.isFieldEquals(formFields['fx_experience'], [DEFAULT_EMPTY]) || Form.isFieldEquals(formFields['fx_volume_experience'], [DEFAULT_EMPTY])) {\n\n                this.setDefaultValue();\n                this.disable();\n\n                return this.$el.addClass('select-disabled');\n            }\n\n            this.enable();\n            this.$el.removeClass('select-disabled');\n\n            if (!Form.isFieldEquals(formFields['fx_experience'], [DEFAULT_EMPTY, 'fe_none']) || !Form.isFieldEquals(formFields['fx_volume_experience'], [DEFAULT_EMPTY, 'fve_none'])) {\n\n                this.$el.find('[value=tk_none]').attr('disabled', 'disabled');\n                this.$el.find('[data-value=tk_none]').addClass('hidden');\n            }\n\n            if (Form.isFieldEquals(formFields['fx_volume_experience'], ['fve_none'])) {\n                this.$el.find('[value=tk_my_own]').attr('disabled', 'disabled');\n                this.$el.find('[data-value=tk_my_own]').addClass('hidden');\n                this.$el.find('[value=tk_with_advice]').attr('disabled', 'disabled');\n                this.$el.find('[data-value=tk_with_advice]').addClass('hidden');\n            }\n        },\n\n        showNationalCountryIdentifier: function showNationalCountryIdentifier(field) {\n            if (Form.isFieldEquals(field, ['IT'])) {\n                this.enable();\n                this.setTooltipMessage(__('registration.field.explanation.national_country_identifier'));\n                this.showNotErrorTooltip();\n\n                return;\n            }\n\n            this.hideTooltip();\n            this.setDefaultValueWithFireChangeEvent();\n            this.validate();\n            this.disable();\n        },\n\n        afterChangeTinAbsenceReason: function afterChangeTinAbsenceReason(field) {\n            if (Form.isFieldEquals(field, ['NOT_REQUIRED'])) {\n                field.setTooltipMessage(__('reg.questionary.tin_absence_reason.not_required.tooltip'));\n                field.showNotErrorTooltip();\n\n                return;\n            }\n\n            field.hideTooltip();\n        },\n\n        updatePrimaryTinAfterChangeHavePrimaryTin: function updatePrimaryTinAfterChangeHavePrimaryTin(field) {\n            if (userHasItalianNationalCountryIdentifier()) {\n                this.$el.addClass('input-disabled');\n                field.$el.addClass('select-disabled');\n            }\n\n            if (Form.isFieldEquals(field, ['have_primary_tin_yes'])) {\n                this.enable();\n\n                return;\n            }\n\n            this.setDefaultValueWithFireChangeEvent();\n            this.disable();\n        },\n\n        updatePrimaryTinAfterChangePrimaryTinTaxJurisdiction: function updatePrimaryTinAfterChangePrimaryTinTaxJurisdiction(field) {\n            var taxJurisdiction = field.getValue().toUpperCase();\n            var tinValidationRules = tinValidations.getRulesByCountryCode(taxJurisdiction, __('registration.warning.primary_tin'));\n\n            this.setRules(tinValidationRules);\n        },\n\n        updatePrimaryTinAbsenceReasonAfterChangeHavePrimaryTin: function updatePrimaryTinAbsenceReasonAfterChangeHavePrimaryTin(field) {\n            if (Form.isFieldEquals(field, ['have_primary_tin_no'])) {\n                this.enable();\n\n                return;\n            }\n\n            this.setDefaultValueWithFireChangeEvent();\n            this.disable();\n        },\n\n        updateSecondaryTinTaxJurisdictionAfterChangeHavePrimaryTin: function updateSecondaryTinTaxJurisdictionAfterChangeHavePrimaryTin(field) {\n            if (Form.isFieldEquals(field, ['have_primary_tin_yes'])) {\n                this.enable();\n\n                return;\n            }\n\n            this.setDefaultValueWithFireChangeEvent();\n            this.disable();\n        },\n\n        updateSecondaryTinAfterChangeSecondaryTinTaxJurisdiction: function updateSecondaryTinAfterChangeSecondaryTinTaxJurisdiction(field) {\n            if (!Form.isFieldEquals(field, ['EMPTY', '00'])) {\n                var taxJurisdiction = field.getValue().toUpperCase();\n                var tinValidationRules = tinValidations.getRulesByCountryCode(taxJurisdiction, __('registration.warning.secondary_tin'));\n\n                this.setRules(tinValidationRules);\n\n                this.enable();\n                this.setDefaultState();\n\n                return;\n            }\n\n            this.setDefaultValueWithFireChangeEvent();\n            this.disable();\n        },\n\n        updateSecondaryTinTaxJurisdictionSource: function updateSecondaryTinTaxJurisdictionSource(countryCodes) {\n            var _this = this;\n\n            countryCodes.forEach(function (code) {\n                _this.$el.find('[value=\"' + code + '\"]').removeAttr('disabled');\n                _this.$el.find('[data-value=\"' + code + '\"]').removeClass('hidden');\n            });\n\n            var userCountry = user.getCountry().toUpperCase();\n\n            this.$el.find('[value=\"' + userCountry + '\"]').attr('disabled', 'disabled');\n            this.$el.find('[data-value=\"' + userCountry + '\"]').addClass('hidden');\n        }\n\n    };\n\n    function countryCodeToOptions(countries) {\n        var options = _.pluck(countries, 'code').sort(function (a, b) {\n            return __('country.name.' + a).localeCompare(__('country.name.' + b));\n        });\n\n        options.unshift('EMPTY');\n\n        return options;\n    }\n\n    function taxJurisdictionOptions(options) {\n        return ['00'].concat(options);\n    }\n\n    module.exports = Model.extend({\n\n        getAllCountries: function getAllCountries() {\n            return this.get('allCountries');\n        },\n\n        getAllCountryCodes: function getAllCountryCodes() {\n            return _.pluck(this.getAllCountries(), 'code');\n        },\n\n        getAllowedCountries: function getAllowedCountries() {\n            return this.get('allowedCountries');\n        },\n\n        getCountriesPhoneCodes: function getCountriesPhoneCodes() {\n            return this.get('countriesPhoneCodes');\n        },\n\n        getPhoneToCountry: function getPhoneToCountry() {\n            return this.get('phoneToCountry');\n        },\n\n        getStepModels: function getStepModels() {\n            return {\n                'personal_information': new RegistrationStepPersonalInformationBaseModel(),\n                'tax_information': new RegistrationStepTaxInformationMarketsModel()\n            };\n        },\n\n        getFormConfig: function getFormConfig() {\n\n            return {\n                // Personal Information Page:\n                firstName: {\n                    translationKey: 'first_name',\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('first_name'),\n                            max_length: validations.maxLength(50, 'first_name')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                lastName: {\n                    translationKey: 'last_name',\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('last_name'),\n                            max_length: validations.maxLength(50, 'last_name')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                phone: {\n                    translationKey: 'phone',\n                    options: {\n                        countries: this.getCountriesPhoneCodes(),\n                        phoneToCountry: this.getPhoneToCountry()\n                    },\n                    template: templates.phoneBox,\n                    validation: {\n                        rules: {\n                            // TODO - localize\n                            not_empty: validations.notEmpty('phone'),\n                            numeric: validations.numeric('phone'),\n                            validateLength: function validateLength(data) {\n                                var min = 6;\n                                var max = 20;\n\n                                if (data.phone.length > max) {\n                                    return __('registration.phone.max', max);\n                                }\n\n                                if (data.phoneInput.length < min) {\n                                    return __('registration.phone.min', min);\n                                }\n\n                                if (_.isEmpty(data.phoneSelect)) {\n                                    return validations.notEmpty('phone');\n                                }\n\n                                return null;\n                            }\n                        },\n                        filters: []\n                    },\n                    disable: false\n                },\n                birthDate: {\n                    translationKey: 'date_of_birth',\n                    // TODO - this could be moved to the date input view\n                    options: {\n                        minAge: 18,\n                        maxAge: 87,\n                        moment: Moment,\n                        splitByComma: localization.splitByComma\n                    },\n                    template: templates.dateBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('date_of_birth')\n                        },\n                        filters: []\n                    },\n                    disable: false\n                },\n                address: {\n                    translationKey: 'address',\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('address'),\n                            max_length: validations.maxLength(50, 'address')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                zipCode: {\n                    translationKey: 'zip_code',\n                    template: templates.inputBox,\n                    validation: validations.zipCode('zip_code'),\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                city: {\n                    translationKey: 'city',\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('city')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                country: {\n                    translationKey: 'country',\n                    translationGroupPrefix: 'country.name',\n                    options: countryCodeToOptions(this.getAllowedCountries()),\n                    template: templates.countriesSelectBox,\n                    validation: validations.selectNotEmpty('country'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                citizenship: {\n                    title: __('registration.field.label.citizenship'),\n                    // EREZ _ THIS IS NOT A MISTAKE\n                    translationKey: 'country',\n                    translationGroupPrefix: 'country.name',\n                    options: countryCodeToOptions(this.getAllCountries()),\n                    template: templates.countriesSelectBox,\n                    validation: validations.selectNotEmpty('citizenship'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                nationalCountryIdentifier: {\n                    title: __('registration.field.label.national_country_identifier'),\n                    template: templates.inputBox,\n                    dependent: [{\n                        name: 'citizenship',\n                        handler: dependentFieldHandlers.showNationalCountryIdentifier\n                    }],\n                    validation: {\n                        rules: {\n                            regexp: [/^$|^[a-zA-Z]{6}[a-zA-Z0-9]{10}$/, __('registration.warning.national_country_identifier')]\n                        },\n                        filters: ['string']\n                    },\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    },\n                    disable: true\n                },\n\n                // Tax information Page:\n                primaryTinTaxJurisdiction: {\n                    title: __('registration.field.label.primary_tin_tax_jurisdiction'),\n                    translationKey: 'primary_tin_tax_jurisdiction',\n                    translationGroupPrefix: 'tax_jurisdiction',\n                    options: countryCodeToOptions(this.getAllCountries()),\n                    template: templates.countriesSelectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: 'select-disabled',\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                have_primary_tin: {\n                    title: __('registration.field.label.have_primary_tin'),\n                    translationKey: 'have_primary_tin',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: 'tinAbsenceReason',\n                        handler: dependentFieldHandlers.afterChangeTinAbsenceReason\n                    }],\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                primaryTin: {\n                    title: __('registration.field.label.primary_tin'),\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {},\n                        filters: tinValidations.getFilters\n                    },\n                    dependent: [{\n                        name: 'have_primary_tin',\n                        handler: dependentFieldHandlers.updatePrimaryTinAfterChangeHavePrimaryTin\n                    }, {\n                        name: 'primaryTinTaxJurisdiction',\n                        handler: dependentFieldHandlers.updatePrimaryTinAfterChangePrimaryTinTaxJurisdiction\n                    }],\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    },\n                    disable: true\n                },\n                tinAbsenceReason: {\n                    title: __('registration.field.label.tin_absence_reason'),\n                    translationKey: 'tin_absence_reason',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: 'have_primary_tin',\n                        handler: dependentFieldHandlers.updatePrimaryTinAbsenceReasonAfterChangeHavePrimaryTin\n                    }],\n                    disable: true,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                secondaryTinTaxJurisdiction: {\n                    title: __('registration.field.label.secondary_tin_tax_jurisdiction'),\n                    translationKey: 'country',\n                    translationGroupPrefix: 'tax_jurisdiction',\n                    options: taxJurisdictionOptions(countryCodeToOptions(this.getAllCountries())),\n                    template: templates.countriesSelectBox,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: 'have_primary_tin',\n                        handler: dependentFieldHandlers.updateSecondaryTinTaxJurisdictionAfterChangeHavePrimaryTin\n                    }, {\n                        name: 'primaryTinTaxJurisdiction',\n                        handler: _.partial(dependentFieldHandlers.updateSecondaryTinTaxJurisdictionSource, this.getAllCountryCodes())\n                    }],\n                    disable: true,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                secondaryTin: {\n                    title: __('registration.field.label.secondary_tin'),\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {},\n                        filters: tinValidations.getFilters\n                    },\n                    dependent: [{\n                        name: 'secondaryTinTaxJurisdiction',\n                        handler: dependentFieldHandlers.updateSecondaryTinAfterChangeSecondaryTinTaxJurisdiction\n                    }],\n                    disable: true,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                fatca: {\n                    translationKey: 'fatca',\n                    options: [{\n                        value: 'NO',\n                        text: __('no')\n                    }, {\n                        value: 'YES',\n                        text: __('yes')\n                    }, {\n                        value: __('registration.field.fatca.link.href'),\n                        text: __('registration.field.label.fatca.learn_more')\n                    }],\n                    template: templates.fatcaBox,\n                    validation: validations.radioNotEmpty('fatca'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                tax_information_disclaimer: {\n                    template: _.template('<div class=\"disclaimer\"><%=__(\"registration.step.disclaimer.tax_information\")%></div>'),\n                    disable: false\n                },\n\n                // Financial Information Page:\n                employment_status: {\n                    translationKey: 'employment_status',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty('employment_status'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                profession: {\n                    title: __('reg.questionary.cysec.profession'),\n                    translationKey: 'profession',\n                    template: templates.selectBoxOverflowWidth,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: 'employment_status',\n                        handler: function handler(field) {\n                            if (field.value() === 'EMPTY') {\n                                this.disable();\n                                this.$el.addClass('select-disabled');\n\n                                return;\n                            }\n\n                            if (field.value() === 'es_employed' || field.value() === 'es_self_employed') {\n                                this.$el.removeClass('select-disabled');\n\n                                return this.enable();\n                            }\n\n                            this.setDefaultValue();\n                            this.disable();\n                            this.$el.addClass('select-disabled');\n                        }\n                    }],\n                    disable: 'select-disabled',\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                annual_income: {\n                    title: __('reg.questionary.cysec.annual_income'),\n                    translationKey: 'annual_income',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                intend_invest: {\n                    title: __('reg.questionary.cysec.intend_invest'),\n                    translationKey: 'intend_invest',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                trading_purpose: {\n                    title: __('reg.questionary.cysec.trading_purpose'),\n                    translationKey: 'trading_purpose',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                trading_purpose_details: {\n                    title: __('reg.questionary.cysec.trading_purpose'),\n                    translationKey: 'trading_purpose',\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.industry_other')),\n                    options: {\n                        defaultValue: __('registration.field.label.industry_other')\n                    },\n                    dependent: [{\n                        name: 'trading_purpose',\n                        handler: function handler(field) {\n                            if (field.value() === 'tp_other') {\n                                // EREZ - Don't change disable state of field its changed in its handler\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n\n                                return;\n                            }\n\n                            // EREZ - Don't change disable state of field its changed in its handler\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'trading_purpose')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                savings_investments: {\n                    title: __('reg.questionary.cysec.savings_investments'),\n                    translationKey: 'savings_investments',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                funds_source: {\n                    title: __('reg.questionary.cysec.funds_source'),\n                    translationKey: 'funds_source',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                funds_source_details: {\n                    title: __('reg.questionary.funds_source'),\n                    translationKey: 'trading_purpose',\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.funds_source')),\n                    options: {\n                        defaultValue: __('registration.field.label.funds_source')\n                    },\n                    dependent: [{\n                        name: 'funds_source',\n                        handler: function handler(field) {\n                            if (field.value() === 'fs_other') {\n                                // EREZ - Don't change disable state of field its changed in its handler\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n\n                                return;\n                            }\n\n                            // EREZ - Don't change disable state of field its changed in its handler\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'funds_source')\n                    },\n                    disable: true\n                },\n\n                // Trading Experience Page:\n                education_level: {\n                    translationKey: 'education_level',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty('education_level'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                study_field: {\n                    title: __('registration.field.label.study_field'),\n                    translationKey: 'study_field',\n                    template: templates.selectBoxOverflowWidth,\n                    validation: validations.selectNotEmpty('study_field'),\n                    dependent: [{\n                        name: 'education_level',\n                        handler: dependentHandlers.updateStudyFieldAfterChangeEducationLevel\n                    }],\n                    disable: 'select-disabled',\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                study_field_details: {\n                    title: __('registration.field.label.study_field'),\n                    translationKey: 'study_field_other',\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.study_field_other')),\n                    options: {\n                        defaultValue: __('registration.field.label.study_field_other')\n                    },\n                    dependent: [{\n                        name: 'study_field',\n                        handler: dependentHandlers.updateStudyFieldDetailsAfterChangeStudyField\n                    }, {\n                        name: 'education_level',\n                        handler: dependentHandlers.updateStudyFieldDetailsAfterChangeEducationLevel\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'study_field')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                fx_volume_experience: {\n                    title: __('reg.questionary.cysec.fx_volume_experience'),\n                    translationKey: 'fx_volume_experience',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                fx_experience: {\n                    title: __('reg.questionary.cysec.fx_experience'),\n                    translationKey: 'fx_experience',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                trade_kind: {\n                    title: __('reg.questionary.cysec.trade_kind'),\n                    translationKey: 'trade_kind',\n                    template: templates.selectBoxOverflowWidth,\n                    validation: validations.selectNotEmpty(),\n                    disable: 'select-disabled',\n                    dependent: [{\n                        name: 'fx_experience',\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }, {\n                        name: 'fx_volume_experience',\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }],\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                low_score_disclaimer: {\n                    title: '',\n                    translationKey: '',\n                    template: lowScoreDisclaimerTemplate,\n                    validation: {},\n                    disable: false,\n                    dependent: []\n                },\n\n                // Financial Knowledge Page:\n                what_does_cfd_stand_for: {\n                    title: __('reg.questionary.what_does_cfd_stand_for'),\n                    translationGroupPrefix: 'reg.questionary.what_does_cfd_stand_for',\n                    template: templates.selectBoxOverflowWidth,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                price_apple_drops: {\n                    title: __('reg.questionary.price_apple_drops'),\n                    translationGroupPrefix: 'reg.questionary.price_apple_drops',\n                    template: templates.selectBoxOverflowWidth,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                knowledge_of_markets: {\n                    title: __('reg.questionary.knowledge_of_markets'),\n                    translationGroupPrefix: 'reg.questionary.knowledge_of_markets',\n                    template: templates.selectBoxOverflowWidth,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                max_amount_leverage: {\n                    title: __('reg.questionary.max_amount_leverage'),\n                    translationGroupPrefix: 'reg.questionary.max_amount_leverage',\n                    template: templates.selectBoxOverflowWidth,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                true_about_cfd: {\n                    title: __('reg.questionary.true_about_cfd'),\n                    translationGroupPrefix: 'reg.questionary.true_about_cfd',\n                    template: templates.selectBoxOverflowWidth,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                cfd_owner_asset: {\n                    title: __('reg.questionary.cfd_owner_asset'),\n                    translationGroupPrefix: 'reg.questionary.cfd_owner_asset',\n                    template: templates.selectBoxOverflowWidth,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                leverage_risks: {\n                    title: __('reg.questionary.leverage_risks'),\n                    translationGroupPrefix: 'reg.questionary.leverage_risks',\n                    template: templates.selectBoxOverflowWidth,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                margin_call: {\n                    title: __('reg.questionary.margin_call'),\n                    translationGroupPrefix: 'reg.questionary.margin_call',\n                    template: templates.selectBoxOverflowWidth,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                avoid_margin_stop: {\n                    title: __('reg.questionary.avoid_margin_stop'),\n                    translationGroupPrefix: 'reg.questionary.avoid_margin_stop',\n                    template: templates.selectBoxOverflowWidth,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                volatility_market_fluctuates: {\n                    title: __('reg.questionary.volatility_market_fluctuates'),\n                    translationGroupPrefix: 'reg.questionary.volatility_market_fluctuates',\n                    template: templates.selectBoxOverflowWidth,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n\n                termsAndConditions: {\n                    translationKey: 'terms_and_conditions',\n                    options: {\n                        value: '',\n                        text: 'TRANS_OPTION_TEXT_KEY',\n                        parseString: true\n                    },\n                    template: templates.checkBox,\n                    validation: {\n                        rules: {\n                            not_equals: ['false', __('registration.warning.this_field_is_required', __('registration.field.label.termsAndConditions'))]\n                        },\n                        filters: []\n                    },\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n\n                agreeToElectronicVerification: {\n                    translationKey: 'agreeToElectronicVerification',\n                    hint: __('registration.field.hint.agreeToElectronicVerification'),\n                    options: {\n                        value: '',\n                        parseString: true\n                    },\n                    template: templates.checkBox,\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                }\n\n            };\n        }\n\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/registration.form.config.markets.sta_global.js\n// module id = 2783\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/registration.form.config.markets.sta_global.js?");

/***/ }),

/***/ 2784:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_, $) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var settings = __webpack_require__(12);\n    var templates = __webpack_require__(85);\n    var validations = __webpack_require__(458);\n    var Form = __webpack_require__(853);\n    var user = __webpack_require__(10);\n\n    var _require = __webpack_require__(2496),\n        ConfigTemplates = _require.ConfigTemplates,\n        addRefuseSecondTinOption = _require.addRefuseSecondTinOption,\n        countryCodeToOptions = _require.countryCodeToOptions;\n\n    var tinValidations = __webpack_require__(2289);\n    var RegistrationStepFinancialInformationModel = __webpack_require__(2785);\n    var RegistrationStepPersonalInformationBaseModel = __webpack_require__(2201);\n    var RegistrationStepTaxInformationModel = __webpack_require__(2786);\n    var dependentHandlers = __webpack_require__(2244);\n\n    var lowScoreDisclaimerTemplate = settings.isRegistrationLowScoreDisclaimerEnabled() ? _.template('<div class=\"low-score-disclaimer\"><%=__(\"registration.step.disclaimer.financial_information\")%></div>') : _.template('');\n\n    var DEFAULT_EMPTY = 'EMPTY';\n\n    var dependentFieldHandlers = {\n\n        tradeKindNone: function tradeKindNone(field) {\n            this.$el.find('[value=tk_none]').removeAttr('disabled');\n            this.$el.find('[data-value=tk_none]').removeClass('hidden');\n\n            var formFields = field.options.form._fields;\n\n            if (Form.isFieldEquals(formFields['csb_experience'], [DEFAULT_EMPTY]) || Form.isFieldEquals(formFields['fx_experience'], [DEFAULT_EMPTY]) || Form.isFieldEquals(formFields['csb_volume_experience'], [DEFAULT_EMPTY]) || Form.isFieldEquals(formFields['fx_volume_experience'], [DEFAULT_EMPTY])) {\n\n                this.setDefaultValue();\n                this.disable();\n\n                return this.$el.addClass('select-disabled');\n            }\n\n            this.enable();\n            this.$el.removeClass('select-disabled');\n\n            if (!Form.isFieldEquals(formFields['csb_experience'], [DEFAULT_EMPTY, 'ce_none']) || !Form.isFieldEquals(formFields['fx_experience'], [DEFAULT_EMPTY, 'fe_none']) || !Form.isFieldEquals(formFields['csb_volume_experience'], [DEFAULT_EMPTY, 'cve_none']) || !Form.isFieldEquals(formFields['fx_volume_experience'], [DEFAULT_EMPTY, 'fve_none'])) {\n\n                this.$el.find('[value=tk_none]').attr('disabled', 'disabled');\n                this.$el.find('[data-value=tk_none]').addClass('hidden');\n            }\n        },\n\n        activateOnlyIfEmployed: function activateOnlyIfEmployed(field) {\n            if (Form.isFieldEquals(field, ['es_employed', 'es_self_employed'])) {\n                this.enable();\n                this.$el.removeClass('select-disabled');\n\n                return;\n            }\n\n            this.disable();\n            this.setDefaultValueWithFireChangeEvent();\n            this.$el.addClass('select-disabled');\n        },\n        activateOnlyIfNotEmployed: function activateOnlyIfNotEmployed(field) {\n            if (Form.isFieldEquals(field, ['es_retired', 'es_student', 'es_unemployed'])) {\n                this.enable();\n                this.$el.removeClass('select-disabled');\n\n                return;\n            }\n\n            this.disable();\n            this.setDefaultValueWithFireChangeEvent();\n            this.$el.addClass('select-disabled');\n        },\n        activateOnlyIfYes: function activateOnlyIfYes(field) {\n            if (Form.isFieldEquals(field, ['yes'])) {\n                this.enable();\n\n                return;\n            }\n\n            this.disable();\n            this.setDefaultValueWithFireChangeEvent();\n        },\n\n        activateIfNotEmpty: function activateIfNotEmpty(field) {\n\n            if (!_.isEmpty(field.value())) {\n                this.enable();\n                this.$el.removeClass('select-disabled');\n\n                return;\n            }\n\n            this.disable();\n            this.setDefaultValueWithFireChangeEvent();\n\n            if (!field.isDisabled()) {\n                this.$el.addClass('select-disabled');\n            } else {\n                this.$el.removeClass('select-disabled');\n            }\n        },\n\n        afterChangeTinAbsenceReason: function afterChangeTinAbsenceReason(field) {\n            if (Form.isFieldEquals(field, ['NOT_REQUIRED'])) {\n                field.setTooltipMessage(__('reg.questionary.cysec.tin_absence_reason.not_required.tooltip'));\n                field.showNotErrorTooltip();\n\n                return;\n            }\n\n            field.hideTooltip();\n        },\n\n        updatePrimaryTinAfterChangeHavePrimaryTin: function updatePrimaryTinAfterChangeHavePrimaryTin(field) {\n\n            if (Form.isFieldEquals(field, ['have_primary_tin_yes'])) {\n                this.enable();\n\n                return;\n            }\n\n            this.setDefaultValueWithFireChangeEvent();\n            this.disable();\n        },\n\n        updateTooltipAfterGBTaxJurisdiction: function updateTooltipAfterGBTaxJurisdiction(field) {\n            var taxJurisdiction = field.getValue().toUpperCase();\n            var labelTextEl = $(this.$el.find('label > span')[0]);\n\n            taxJurisdiction === 'GB' ? labelTextEl.html(__('registration.field.label.nino_question')) : labelTextEl.html(__('registration.field.label.have_primary_tin'));\n        },\n\n        updatePrimaryTinAfterChangePrimaryTinTaxJurisdiction: function updatePrimaryTinAfterChangePrimaryTinTaxJurisdiction(field) {\n            var taxJurisdiction = field.getValue().toUpperCase();\n            var tinValidationRules = tinValidations.getRulesByCountryCode(taxJurisdiction, __('registration.warning.primary_tin'));\n\n            this.setRules(tinValidationRules);\n        },\n\n        updatePrimaryTinAbsenceReasonAfterChangeHavePrimaryTin: function updatePrimaryTinAbsenceReasonAfterChangeHavePrimaryTin(field) {\n            if (Form.isFieldEquals(field, ['have_primary_tin_no'])) {\n                this.enable();\n\n                return;\n            }\n\n            this.setDefaultValueWithFireChangeEvent();\n            this.disable();\n        },\n\n        updateSecondaryTinTaxJurisdictionAfterChangeHavePrimaryTin: function updateSecondaryTinTaxJurisdictionAfterChangeHavePrimaryTin(field) {\n            if (Form.isFieldEquals(field, ['have_primary_tin_yes'])) {\n                this.enable();\n\n                return;\n            }\n\n            this.setDefaultValueWithFireChangeEvent();\n            this.disable();\n        },\n\n        updateSecondaryTinAfterChangeSecondaryTinTaxJurisdiction: function updateSecondaryTinAfterChangeSecondaryTinTaxJurisdiction(field) {\n\n            if (!Form.isFieldEquals(field, ['EMPTY', '00'])) {\n                var taxJurisdiction = field.getValue().toUpperCase();\n                var tinValidationRules = tinValidations.getRulesByCountryCode(taxJurisdiction, __('registration.warning.secondary_tin'));\n                var labelTextEl = $(this.$el.find('label')[0]);\n\n                taxJurisdiction === 'GB' ? labelTextEl.html(__('registration.field.label.nino_question')) : labelTextEl.html(__('registration.field.label.secondary_tin'));\n                this.setRules(tinValidationRules);\n                this.enable();\n                this.setDefaultState();\n\n                return;\n            }\n\n            this.setDefaultValueWithFireChangeEvent();\n            this.disable();\n        },\n\n        updateSecondaryTinTaxJurisdictionSource: function updateSecondaryTinTaxJurisdictionSource(countryCodes) {\n            var _this = this;\n\n            countryCodes.forEach(function (code) {\n                _this.$el.find('[value=\"' + code + '\"]').removeAttr('disabled');\n                _this.$el.find('[data-value=\"' + code + '\"]').removeClass('hidden');\n            });\n\n            var userCountry = user.getCountry().toUpperCase();\n\n            this.$el.find('[value=\"' + userCountry + '\"]').attr('disabled', 'disabled');\n            this.$el.find('[data-value=\"' + userCountry + '\"]').addClass('hidden');\n        },\n\n        updateEmploymentStatusDetailsAfterChangeEmploymentStatus: function updateEmploymentStatusDetailsAfterChangeEmploymentStatus(field) {\n            if (Form.isFieldEquals(field, ['es_employed', 'es_self_employed'])) {\n\n                var label = field.value() === 'es_employed' ? __('registration.field.label.employment_status_detailed.employer_details') : __('registration.field.label.employment_status_detailed.profession_details');\n\n                this.$el.find('label').html(label);\n\n                this.enable();\n\n                return;\n            }\n\n            this.setDefaultValueWithFireChangeEvent();\n            this.disable();\n        }\n    };\n\n    module.exports = ConfigTemplates.extend({\n\n        getAllCountryCodes: function getAllCountryCodes() {\n            return _.pluck(this.getAllCountries(), 'code');\n        },\n\n        getAllowedCountries: function getAllowedCountries() {\n            return this.get('allowedCountries');\n        },\n\n        getAllowedCountryCodes: function getAllowedCountryCodes() {\n            return _.pluck(this.getAllowedCountries(), 'code');\n        },\n\n        getSortedAllowedCountryCodes: function getSortedAllowedCountryCodes() {\n            return this.getAllowedCountryCodes().sort(function (a, b) {\n                return __('country.name.' + a).localeCompare(__('country.name.' + b));\n            });\n        },\n\n        getCountryCodes: function getCountryCodes() {\n            return this.getSortedAllowedCountryCodes().map(function (code) {\n                return code.toLowerCase();\n            });\n        },\n\n        getCountriesPhoneCodes: function getCountriesPhoneCodes() {\n            return this.get('countriesPhoneCodes');\n        },\n\n        getPhoneToCountry: function getPhoneToCountry() {\n            return this.get('phoneToCountry');\n        },\n\n        getStepModels: function getStepModels() {\n            return {\n                'personal_information': new RegistrationStepPersonalInformationBaseModel(),\n                'financial_information_cfd': new RegistrationStepFinancialInformationModel(),\n                'tax_information': new RegistrationStepTaxInformationModel()\n            };\n        },\n\n        getFormConfig: function getFormConfig() {\n\n            return {\n                // First Page:\n                firstName: this.stringInputTemplate('first_name', { lenght: 50 }), //\n\n                lastName: this.stringInputTemplate('last_name', { lenght: 50 }),\n\n                maritalStatus: this.classicSelectBoxTemplate('marital_status'),\n\n                birthDate: this.defaultDateOfBirth('date_of_birth', 18, 87),\n\n                address: this.stringInputTemplate('address', { lenght: 50 }),\n\n                zipCode: this.zipCodeInput('zip_code'),\n\n                city: this.stringInputTemplate('city'),\n\n                country: this.countrySelectBoxTemplate('country', this.getAllowedCountries()),\n\n                citizenship: this.countrySelectBoxTemplate('citizenship', this.getAllCountries()).override({\n                    validation: validations.countrySelectNotEmpty('citizenship')\n                }),\n\n                pep: this.yesNoDetailsTemlate('pep', 'textarea', 1000),\n\n                // Tax information Page:\n\n                primaryTinTaxJurisdiction: this.countrySelectBoxTemplate('primary_tin_tax_jurisdiction').override({\n                    translationGroupPrefix: 'tax_jurisdiction'\n                }),\n\n                tinAbsenceReason: this.classicSelectBoxTemplate('tin_absence_reason').override({\n                    dependent: [{\n                        name: 'have_primary_tin',\n                        handler: dependentFieldHandlers.updatePrimaryTinAbsenceReasonAfterChangeHavePrimaryTin\n                    }],\n                    disable: true\n                }),\n\n                have_primary_tin: this.classicSelectBoxTemplate('have_primary_tin').override({\n                    dependent: [{\n                        name: 'tinAbsenceReason',\n                        handler: dependentFieldHandlers.afterChangeTinAbsenceReason\n                    }, {\n                        name: 'primaryTinTaxJurisdiction',\n                        handler: dependentFieldHandlers.updateTooltipAfterGBTaxJurisdiction\n                    }],\n                    helpHintText: __('reg.questionary.cysec.have_primary_tin.tooltip')\n                }),\n\n                primaryTin: this.stringInputTemplate('primary_tin').override({\n                    validation: {\n                        rules: {},\n                        filters: tinValidations.getFilters\n                    },\n                    dependent: [{\n                        name: 'have_primary_tin',\n                        handler: dependentFieldHandlers.updatePrimaryTinAfterChangeHavePrimaryTin\n                    }, {\n                        name: 'primaryTinTaxJurisdiction',\n                        handler: dependentFieldHandlers.updatePrimaryTinAfterChangePrimaryTinTaxJurisdiction\n                    }],\n                    disable: true\n                }),\n\n                secondaryTinTaxJurisdiction: this.countrySelectBoxTemplate('secondary_tin_tax_jurisdiction').override({\n                    options: addRefuseSecondTinOption(countryCodeToOptions(this.getAllCountries())),\n                    translationGroupPrefix: 'tax_jurisdiction',\n                    dependent: [{\n                        name: 'have_primary_tin',\n                        handler: dependentFieldHandlers.updateSecondaryTinTaxJurisdictionAfterChangeHavePrimaryTin\n                    }, {\n                        name: 'primaryTinTaxJurisdiction',\n                        handler: _.partial(dependentFieldHandlers.updateSecondaryTinTaxJurisdictionSource, this.getAllCountryCodes())\n                    }],\n                    disable: true\n                }),\n\n                secondaryTin: this.stringInputTemplate('secondary_tin').override({\n                    validation: {\n                        rules: {},\n                        filters: tinValidations.getFilters\n                    },\n                    dependent: [{\n                        name: 'secondaryTinTaxJurisdiction',\n                        handler: dependentFieldHandlers.updateSecondaryTinAfterChangeSecondaryTinTaxJurisdiction\n                    }],\n                    disable: true\n                }),\n\n                fatca: this.fatcaConfigTemplate(),\n\n                // prof info:\n\n                education_level: this.classicSelectBoxTemplate('education_level', true),\n\n                study_field: this.classicSelectBoxTemplate('study_field').override({\n                    template: templates.selectBoxOverflowWidth,\n                    dependent: [{\n                        name: 'education_level',\n                        handler: dependentHandlers.updateStudyFieldAfterChangeEducationLevel\n                    }],\n                    disable: 'select-disabled'\n                }),\n\n                study_field_details: this.otherFieldDetailsTemplate('study_field', 'sf_other').override({\n                    dependent: [{\n                        name: 'study_field',\n                        handler: dependentHandlers.updateStudyFieldDetailsAfterChangeStudyField\n                    }, {\n                        name: 'education_level',\n                        handler: dependentHandlers.updateStudyFieldDetailsAfterChangeEducationLevel\n                    }]\n                }),\n\n                qualification_level: this.classicSelectBoxTemplate('qualification_level').override({\n                    template: templates.selectBoxOverflowWidth\n                }),\n\n                employment_status_detailed: this.classicSelectBoxTemplate('employment_status_detailed', true),\n\n                employment_status_detailed_details: this.stringInputTemplate('employment_status_detailed').override({\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true,\n                    dependent: [{\n                        name: 'employment_status_detailed',\n                        handler: dependentFieldHandlers.updateEmploymentStatusDetailsAfterChangeEmploymentStatus\n                    }],\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                }),\n\n                profession: this.classicSelectBoxTemplate('profession').override({\n                    dependent: [{\n                        name: 'employment_status_detailed',\n                        handler: dependentFieldHandlers.activateOnlyIfEmployed\n                    }],\n                    disable: 'select-disabled'\n                }),\n\n                profession_details: this.otherFieldDetailsTemplate('profession', 'i_other'),\n\n                source_of_income: this.classicSelectBoxTemplate('source_of_income').override({\n                    dependent: [{\n                        name: 'employment_status_detailed',\n                        handler: dependentFieldHandlers.activateOnlyIfNotEmployed\n                    }]\n                }),\n\n                source_of_income_details: this.otherFieldDetailsTemplate('source_of_income', 'so_other'),\n\n                // Financial information. Third page\n                annual_income: this.classicSelectBoxTemplate('annual_income'),\n\n                net_worth: this.classicSelectBoxTemplate('net_worth'),\n\n                net_worth_details: this.otherFieldDetailsTemplate('net_worth', 'nw_o_1000000'),\n\n                yearly_income: this.classicSelectBoxTemplate('yearly_income'),\n\n                yearly_income_details: this.otherFieldDetailsTemplate('yearly_income', 'ndi_o_50000'),\n\n                intend_invest: this.classicSelectBoxTemplate('intend_invest'),\n\n                intend_invest_details: this.otherFieldDetailsTemplate('intend_invest', 'at_o_10000'),\n\n                funds_source: this.classicSelectBoxTemplate('funds_source'),\n\n                funds_source_details: this.otherFieldDetailsTemplate('funds_source', 'fs_other'),\n\n                orin_of_funds: this.multiCheckBox('orin_of_funds'),\n\n                funds_source_bank: this.stringInputTemplate('funds_source_bank', { optional: true }).override({\n                    disable: true,\n                    dependent: [{\n                        name: 'funds_source_bank_details',\n                        handler: function handler() {\n                            this.value('other');\n                        }\n                    }]\n                }),\n\n                funds_source_bank_details: this.stringInputTemplate('funds_source_bank_details', { optional: true }).override({\n                    title: __('registration.field.label.funds_source_bank'),\n                    dataBefore: __('registration.field.funds_source_title.title')\n                }),\n\n                funds_source_country: this.stringInputTemplate('funds_source_country', { optional: true }).override({\n                    disable: true,\n                    dependent: [{\n                        name: 'funds_source_country_details',\n                        handler: function handler() {\n                            this.value('other');\n                        }\n                    }]\n                }),\n\n                funds_source_country_details: this.countrySelectBoxTemplate('funds_source_country_details').override({\n                    title: __('registration.field.label.funds_source_country'),\n                    validation: {}, //empty\n                    options: countryCodeToOptions(this.getAllowedCountries()).map(function (item) {\n                        return item !== 'EMPTY' ? item.toLowerCase() : item;\n                    }), // to lowercase for sync with mobile values in DB\n                    dependent: [{\n                        name: 'funds_source_bank_details',\n                        handler: dependentFieldHandlers.activateIfNotEmpty\n                    }]\n                }),\n\n                different_withdrawals_dest: this.classicSelectBoxTemplate('different_withdrawals_dest'),\n\n                withdrawals_dest_bank: this.stringInputTemplate('withdrawals_dest_bank', { optional: true }).override({\n                    disable: true,\n                    dependent: [{\n                        name: 'withdrawals_dest_bank_details',\n                        handler: function handler() {\n                            this.value('other');\n                        }\n                    }]\n                }),\n\n                withdrawals_dest_bank_details: this.stringInputTemplate('withdrawals_dest_bank_details', { optional: true }).override({\n                    title: __('registration.field.label.withdrawals_dest_bank'),\n                    dependent: [{\n                        name: 'different_withdrawals_dest',\n                        handler: dependentFieldHandlers.activateOnlyIfYes\n                    }],\n                    disable: true\n                }),\n\n                withdrawals_dest_country: this.stringInputTemplate('withdrawals_dest_country').override({\n                    dependent: [{\n                        name: 'withdrawals_dest_country_details',\n                        handler: function handler() {\n                            this.value('other');\n                        }\n                    }],\n                    disable: true\n                }),\n\n                withdrawals_dest_country_details: this.countrySelectBoxTemplate('withdrawals_dest_country_details', this.getAllowedCountries()).override({\n                    title: __('registration.field.label.withdrawals_dest_country'),\n                    validation: {}, //empty\n                    options: countryCodeToOptions(this.getAllowedCountries()).map(function (item) {\n                        return item !== 'EMPTY' ? item.toLowerCase() : item;\n                    }), // to lowercase for sync with mobile values in DB\n                    dependent: [{\n                        name: 'withdrawals_dest_bank_details',\n                        handler: dependentFieldHandlers.activateIfNotEmpty\n                    }, {\n                        name: 'different_withdrawals_dest',\n                        handler: function handler(field) {\n                            if (Form.isFieldEquals(field, ['yes'])) {\n                                this.enable();\n                                this.$el.addClass('select-disabled');\n\n                                return;\n                            }\n\n                            this.disable();\n                            this.setDefaultValueWithFireChangeEvent();\n                            this.$el.removeClass('select-disabled');\n                        }\n                    }],\n                    disable: true\n                }),\n\n                //Trading experience. Forth page\n                fx_volume_experience: this.classicSelectBoxTemplate('fx_volume_experience'),\n\n                csb_volume_experience: this.classicSelectBoxTemplate('csb_volume_experience'),\n\n                fx_experience: this.classicSelectBoxTemplate('fx_experience'),\n\n                csb_experience: this.classicSelectBoxTemplate('csb_experience'),\n\n                trade_kind: this.classicSelectBoxTemplate('trade_kind').override({\n                    template: templates.selectBoxOverflowWidth,\n                    dependent: [{\n                        name: 'csb_experience',\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }, {\n                        name: 'fx_experience',\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }, {\n                        name: 'csb_volume_experience',\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }, {\n                        name: 'fx_volume_experience',\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }]\n                }),\n\n                low_score_disclaimer: {\n                    title: '',\n                    translationKey: '',\n                    template: lowScoreDisclaimerTemplate,\n                    validation: {},\n                    disable: false,\n                    dependent: []\n                },\n\n                average_leverage: this.classicSelectBoxTemplate('average_leverage'),\n\n                // Forth Page:\n                quiz_information_disclaimer: {\n                    template: _.template('<div class=\"quiz-disclaimer\"><%=__(\"registration.step.disclaimer.quiz_information\")%></div>'),\n                    disable: false\n                },\n\n                termsAndConditions: {\n                    translationKey: 'terms_and_conditions',\n                    options: {\n                        value: '',\n                        text: 'TRANS_OPTION_TEXT_KEY',\n                        parseString: true\n                    },\n                    template: templates.checkBox,\n                    validation: {\n                        rules: {\n                            not_equals: ['false', __('registration.warning.this_field_is_required', __('registration.field.label.termsAndConditions'))]\n                        },\n                        filters: []\n                    },\n                    disable: false,\n                    className: 'coLtermsAndConditions',\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n\n                quiz_1: this.classicSelectBoxTemplate('quiz_1'),\n\n                quiz_2: this.classicSelectBoxTemplate('quiz_2'),\n\n                quiz_3: this.classicSelectBoxTemplate('quiz_3'),\n\n                quiz_4: this.classicSelectBoxTemplate('quiz_4'),\n\n                quiz_5: this.classicSelectBoxTemplate('quiz_5'),\n\n                quiz_6: this.classicSelectBoxTemplate('quiz_6'),\n\n                quiz_7: this.classicSelectBoxTemplate('quiz_7')\n\n            };\n        }\n\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(7)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/registration.form.config.cfdglobal.v2.js\n// module id = 2784\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/registration.form.config.cfdglobal.v2.js?");

/***/ }),

/***/ 2785:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var Model = __webpack_require__(16);\n    var user = __webpack_require__(10);\n\n    module.exports = Model.extend({\n        before: function before(savedData) {\n            var updates = {};\n\n            if (updates[\"withdrawals_dest_country_details\"] = \"EMPTY\") {\n                updates[\"withdrawals_dest_country_details\"] = user.getCountry().toLowerCase();\n            }\n            if (updates[\"funds_source_country_details\"] = \"EMPTY\") {\n                updates[\"funds_source_country_details\"] = user.getCountry().toLowerCase();\n            }\n            return updates;\n        }\n\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/step/cfdglobal/registration.step.financial.information.cfdglobal.v2.model.js\n// module id = 2785\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/step/cfdglobal/registration.step.financial.information.cfdglobal.v2.model.js?");

/***/ }),

/***/ 2786:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var Model = __webpack_require__(16);\n    var user = __webpack_require__(10);\n\n    module.exports = Model.extend({\n\n        after: function after(data) {\n\n            var fatca = data[\"fatca\"];\n            if (fatca) {\n                switch (fatca) {\n                    case \"NO\":\n                        data[\"us_resident\"] = \"ur_no\";break;\n                    case \"YES\":\n                        data[\"us_resident\"] = \"ur_yes\";break;\n                }\n            }\n\n            return data;\n        },\n\n        before: function before(savedData) {\n            var updates = {};\n\n            updates[\"primaryTinTaxJurisdiction\"] = user.getCountry().toUpperCase();\n\n            if (savedData[\"primaryTinTaxJurisdiction\"] === \"00\" && savedData[\"secondaryTinTaxJurisdiction\"] === \"00\") {\n                updates[\"secondaryTinTaxJurisdiction\"] = \"EMPTY\";\n                updates[\"fatca\"] = \"EMPTY\";\n            }\n\n            if (savedData[\"tinAbsenceReason\"] === \"NOT_RELEVANT\") {\n                updates[\"tinAbsenceReason\"] = \"EMPTY\";\n            }\n\n            if (_.isEmpty(savedData[\"primaryTin\"])) {\n                if (savedData[\"primaryTinTaxJurisdiction\"] === \"00\" || savedData[\"tinAbsenceReason\"] === \"EMPTY\") {\n                    updates[\"have_primary_tin\"] = \"EMPTY\";\n                } else {\n                    updates[\"have_primary_tin\"] = \"have_primary_tin_no\";\n                }\n            } else {\n                updates[\"have_primary_tin\"] = \"have_primary_tin_yes\";\n            }\n\n            return updates;\n        }\n\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/step/cfdglobal/registration.step.tax.information.cfdglobal.v2.model.js\n// module id = 2786\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/step/cfdglobal/registration.step.tax.information.cfdglobal.v2.model.js?");

/***/ }),

/***/ 2787:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var Model = __webpack_require__(16);\n    var Moment = __webpack_require__(6);\n    var localization = __webpack_require__(27);\n    var settings = __webpack_require__(12);\n    var templates = __webpack_require__(85);\n    var validations = __webpack_require__(458);\n    var user = __webpack_require__(10);\n    var Form = __webpack_require__(853);\n\n    var RegistrationStepFinancialInformationModel = __webpack_require__(2788);\n    var dependentHandlers = __webpack_require__(2244);\n\n    var DEFAULT_EMPTY = 'EMPTY';\n\n    var lowScoreDisclaimerTemplate = settings.isRegistrationLowScoreDisclaimerEnabled() ? _.template('<div class=\"low-score-disclaimer\"><%=__(\"registration.step.disclaimer.financial_information\")%></div>') : _.template('');\n\n    var dependentFieldHandlers = {\n\n        tradeKindNone: function tradeKindNone(field) {\n            this.$el.find('[value=tk_none]').removeAttr('disabled');\n            this.$el.find('[data-value=tk_none]').removeClass('hidden');\n            this.$el.find('[value=tk_my_own]').removeAttr('disabled');\n            this.$el.find('[data-value=tk_my_own]').removeClass('hidden');\n            this.$el.find('[value=tk_with_advice]').removeAttr('disabled');\n            this.$el.find('[data-value=tk_with_advice]').removeClass('hidden');\n\n            var formFields = field.options.form._fields;\n\n            if (Form.isFieldEquals(formFields['csb_experience'], [DEFAULT_EMPTY]) || Form.isFieldEquals(formFields['fx_experience'], [DEFAULT_EMPTY]) || Form.isFieldEquals(formFields['csb_volume_experience'], [DEFAULT_EMPTY]) || Form.isFieldEquals(formFields['fx_volume_experience'], [DEFAULT_EMPTY])) {\n\n                this.setDefaultValue();\n                this.disable();\n\n                return this.$el.addClass('select-disabled');\n            }\n\n            this.enable();\n            this.$el.removeClass('select-disabled');\n\n            if (!Form.isFieldEquals(formFields['csb_experience'], [DEFAULT_EMPTY, 'ce_none']) || !Form.isFieldEquals(formFields['fx_experience'], [DEFAULT_EMPTY, 'fe_none']) || !Form.isFieldEquals(formFields['csb_volume_experience'], [DEFAULT_EMPTY, 'cve_none']) || !Form.isFieldEquals(formFields['fx_volume_experience'], [DEFAULT_EMPTY, 'fve_none'])) {\n\n                this.$el.find('[value=tk_none]').attr('disabled', 'disabled');\n                this.$el.find('[data-value=tk_none]').addClass('hidden');\n            }\n\n            if (Form.isFieldEquals(formFields['fx_volume_experience'], ['fve_none']) && Form.isFieldEquals(formFields['csb_volume_experience'], ['cve_none'])) {\n                this.$el.find('[value=tk_my_own]').attr('disabled', 'disabled');\n                this.$el.find('[data-value=tk_my_own]').addClass('hidden');\n                this.$el.find('[value=tk_with_advice]').attr('disabled', 'disabled');\n                this.$el.find('[data-value=tk_with_advice]').addClass('hidden');\n            }\n        },\n\n        activateWorkCountriesOnlyIfEmployed: function activateWorkCountriesOnlyIfEmployed(field) {\n            if (Form.isFieldEquals(field, ['es_employed', 'es_self_employed'])) {\n                var workCountries = this.getValue();\n\n                if (_.isEmpty(workCountries) || workCountries.length === 0 || workCountries[0] === DEFAULT_EMPTY) {\n                    this.setValue(user.getCountry().toLowerCase());\n                }\n\n                this.enable();\n                this.$el.removeClass('select-disabled');\n\n                return;\n            }\n\n            this.disable();\n            this.setDefaultValueWithFireChangeEvent();\n            this.$el.addClass('select-disabled');\n        },\n\n        activateOnlyIfEmployed: function activateOnlyIfEmployed(field) {\n            if (Form.isFieldEquals(field, ['es_employed', 'es_self_employed'])) {\n                this.enable();\n                this.$el.removeClass('select-disabled');\n\n                return;\n            }\n\n            this.disable();\n            this.setDefaultValueWithFireChangeEvent();\n            this.$el.addClass('select-disabled');\n        },\n        activateOnlyIfNotEmployed: function activateOnlyIfNotEmployed(field) {\n            if (Form.isFieldEquals(field, ['es_retired', 'es_student', 'es_unemployed'])) {\n                this.enable();\n                this.$el.removeClass('select-disabled');\n\n                return;\n            }\n\n            this.disable();\n            this.setDefaultValueWithFireChangeEvent();\n            this.$el.addClass('select-disabled');\n        }\n    };\n\n    function countriesToOptions(countries) {\n        var options = _.pluck(countries, 'code').sort(function (a, b) {\n            return __('country.name.' + a).localeCompare(__('country.name.' + b));\n        });\n\n        options.unshift('EMPTY');\n\n        return options;\n    }\n\n    function lowerCaseOptions(options) {\n        return _.map(options, function (o) {\n            return o.toLowerCase();\n        });\n    }\n\n    module.exports = Model.extend({\n\n        getAllCountries: function getAllCountries() {\n            return this.get('allCountries');\n        },\n\n        getAllowedCountries: function getAllowedCountries() {\n            return this.get('allowedCountries');\n        },\n\n        getAllowedCountryCodes: function getAllowedCountryCodes() {\n            return _.pluck(this.getAllowedCountries(), 'code');\n        },\n\n        getSortedAllowedCountryCodes: function getSortedAllowedCountryCodes() {\n            return this.getAllowedCountryCodes().sort(function (a, b) {\n                return __('country.name.' + a).localeCompare(__('country.name.' + b));\n            });\n        },\n\n        getCountryCodes: function getCountryCodes() {\n            return this.getSortedAllowedCountryCodes().map(function (code) {\n                return code.toLowerCase();\n            });\n        },\n\n        getCountriesPhoneCodes: function getCountriesPhoneCodes() {\n            return this.get('countriesPhoneCodes');\n        },\n\n        getPhoneToCountry: function getPhoneToCountry() {\n            return this.get('phoneToCountry');\n        },\n\n        getStepModels: function getStepModels() {\n            return {\n                'financial_information': new RegistrationStepFinancialInformationModel()\n            };\n        },\n\n        getFormConfig: function getFormConfig() {\n\n            return {\n                // First Page:\n                firstName: {\n                    translationKey: 'first_name',\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('first_name'),\n                            max_length: validations.maxLength(50, 'first_name')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                lastName: {\n                    translationKey: 'last_name',\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('last_name'),\n                            max_length: validations.maxLength(50, 'last_name')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                phone: {\n                    translationKey: 'phone',\n                    options: {\n                        countries: this.getCountriesPhoneCodes(),\n                        phoneToCountry: this.getPhoneToCountry()\n                    },\n                    template: templates.phoneBox,\n                    validation: {\n                        rules: {\n                            // TODO - localize\n                            not_empty: validations.notEmpty('phone'),\n                            numeric: validations.numeric('phone'),\n                            validateLength: function validateLength(data) {\n                                var min = 6;\n                                var max = 20;\n\n                                if (data.phone.length > max) {\n                                    return __('registration.phone.max', max);\n                                }\n\n                                if (data.phoneInput.length < min) {\n                                    return __('registration.phone.min', min);\n                                }\n\n                                if (_.isEmpty(data.phoneSelect)) {\n                                    return validations.notEmpty('phone');\n                                }\n\n                                return null;\n                            }\n                        },\n                        filters: []\n                    },\n                    disable: false\n                },\n                birthDate: {\n                    translationKey: 'date_of_birth',\n                    // TODO - this could be moved to the date input view\n                    options: {\n                        minAge: 18,\n                        maxAge: 87,\n                        moment: Moment,\n                        splitByComma: localization.splitByComma\n                    },\n                    template: templates.dateBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('date_of_birth')\n                        },\n                        filters: []\n                    },\n                    disable: false\n                },\n                address: {\n                    translationKey: 'address',\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('address'),\n                            max_length: validations.maxLength(50, 'address')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                zipCode: {\n                    translationKey: 'zip_code',\n                    template: templates.inputBox,\n                    validation: validations.zipCode('zip_code'),\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                city: {\n                    translationKey: 'city',\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('city')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                country: {\n                    translationKey: 'country',\n                    translationGroupPrefix: 'country.name',\n                    options: countriesToOptions(this.getAllowedCountries()),\n                    template: templates.countriesSelectBox,\n                    validation: validations.countrySelectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                citizenship: {\n                    title: __('registration.field.label.citizenship'),\n                    translationKey: 'country',\n                    translationGroupPrefix: 'country.name',\n                    options: countriesToOptions(this.getAllCountries()),\n                    template: templates.countriesSelectBox,\n                    validation: validations.countrySelectNotEmpty('citizenship'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n\n                fatca: {\n                    translationKey: 'fatca',\n                    options: [{\n                        value: 'NO',\n                        text: __('no')\n                    }, {\n                        value: 'YES',\n                        text: __('yes')\n                    }, {\n                        value: __('registration.field.fatca.link.href'),\n                        text: __('registration.field.label.fatca.learn_more')\n                    }],\n                    template: templates.fatcaBox,\n                    validation: validations.radioNotEmpty('fatca'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n\n                // Second Page:\n                employment_status: {\n                    translationKey: 'employment_status',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty('employment_status'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                trading_purpose: {\n                    title: __('reg.questionary.cysec.trading_purpose'),\n                    translationKey: 'trading_purpose',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                trading_purpose_details: {\n                    title: __('reg.questionary.cysec.trading_purpose'),\n                    translationKey: 'trading_purpose',\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.industry_other')),\n                    options: {\n                        defaultValue: __('registration.field.label.industry_other')\n                    },\n                    dependent: [{\n                        name: 'trading_purpose',\n                        handler: function handler(field) {\n                            if (field.value() === 'tp_other') {\n                                // EREZ - Don't change disable state of field its changed in its handler\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n\n                                return;\n                            }\n\n                            // EREZ - Don't change disable state of field its changed in its handler\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'trading_purpose')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                anticipated_turnover: {\n                    title: __('reg.questionary.cysec.anticipated_turnover'),\n                    translationKey: 'anticipated_turnover',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                transactions_nature: {\n                    title: __('reg.questionary.cysec.transactions_nature'),\n                    translationKey: 'transactions_nature',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                transactions_nature_details: {\n                    title: __('reg.questionary.cysec.transactions_nature'),\n                    translationKey: 'transactions_nature',\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.tn_other')),\n                    options: {\n                        defaultValue: __('registration.field.label.tn_other')\n                    },\n                    dependent: [{\n                        name: 'transactions_nature',\n                        handler: function handler(field) {\n                            if (field.value() === 'tn_other') {\n                                field.disable();\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n\n                                return;\n                            }\n\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'transactions_nature')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                industry: {\n                    title: __('reg.questionary.cysec.industry'),\n                    translationKey: 'industry',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: 'employment_status',\n                        handler: dependentFieldHandlers.activateOnlyIfEmployed\n                    }],\n                    disable: 'select-disabled',\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                industry_details: {\n                    title: __('reg.questionary.cysec.industry'),\n                    translationKey: 'industry',\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.i_other')),\n                    dependent: [{\n                        name: 'industry',\n                        handler: function handler(field) {\n                            if (field.value() === 'i_other') {\n                                field.disable();\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n\n                                return;\n                            }\n\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'industry')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n\n                source_of_income: {\n                    title: __('reg.questionary.cysec.source_of_income'),\n                    translationKey: 'source_of_income',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: 'employment_status',\n                        handler: dependentFieldHandlers.activateOnlyIfNotEmployed\n                    }],\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                source_of_income_details: {\n                    title: __('reg.questionary.cysec.source_of_income'),\n                    translationKey: 'source_of_income',\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.so_other')),\n                    options: {\n                        defaultValue: __('registration.field.label.so_other')\n                    },\n                    dependent: [{\n                        name: 'source_of_income',\n                        handler: function handler(field) {\n                            if (field.value() === 'so_other') {\n                                field.disable();\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n\n                                return;\n                            }\n\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'source_of_income')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                estimated_gross_income: {\n                    title: __('reg.questionary.cysec.estimated_gross_income'),\n                    translationKey: 'estimated_gross_income',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                net_worth: {\n                    title: __('reg.questionary.cysec.net_worth'),\n                    translationKey: 'net_worth',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                orin_of_funds: {\n                    title: __('reg.questionary.cysec.orin_of_funds'),\n                    translationKey: 'orin_of_funds',\n                    translationGroupPrefix: 'reg.questionary.cysec.orin_of_funds',\n                    template: templates.multiCheckBox,\n                    validation: validations.multiCheckBoxNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n\n                // Third Page:\n                education_level: {\n                    translationKey: 'education_level',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty('education_level'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                study_field: {\n                    title: __('registration.field.label.study_field'),\n                    translationKey: 'study_field',\n                    template: templates.selectBoxOverflowWidth,\n                    validation: validations.selectNotEmpty('study_field'),\n                    dependent: [{\n                        name: 'education_level',\n                        handler: dependentHandlers.updateStudyFieldAfterChangeEducationLevel\n                    }],\n                    disable: 'select-disabled',\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                study_field_details: {\n                    title: __('registration.field.label.study_field'),\n                    translationKey: 'study_field_other',\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.study_field_other')),\n                    options: {\n                        defaultValue: __('registration.field.label.study_field_other')\n                    },\n                    dependent: [{\n                        name: 'study_field',\n                        handler: dependentHandlers.updateStudyFieldDetailsAfterChangeStudyField\n                    }, {\n                        name: 'education_level',\n                        handler: dependentHandlers.updateStudyFieldDetailsAfterChangeEducationLevel\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'study_field')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                fx_volume_experience: {\n                    title: __('reg.questionary.cysec.fx_volume_experience'),\n                    translationKey: 'fx_volume_experience',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                csb_volume_experience: {\n                    title: __('reg.questionary.cysec.csb_volume_experience'),\n                    translationKey: 'csb_volume_experience',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                fx_experience: {\n                    title: __('reg.questionary.cysec.fx_experience'),\n                    translationKey: 'fx_experience',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                csb_experience: {\n                    title: __('reg.questionary.cysec.csb_experience'),\n                    translationKey: 'csb_experience',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                trade_kind: {\n                    title: __('reg.questionary.cysec.trade_kind'),\n                    translationKey: 'trade_kind',\n                    template: templates.selectBoxOverflowWidth,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    dependent: [{\n                        name: 'csb_experience',\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }, {\n                        name: 'fx_experience',\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }, {\n                        name: 'csb_volume_experience',\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }, {\n                        name: 'fx_volume_experience',\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }],\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                low_score_disclaimer: {\n                    title: '',\n                    translationKey: '',\n                    template: lowScoreDisclaimerTemplate,\n                    validation: {},\n                    disable: false,\n                    dependent: []\n                },\n\n                // Forth Page:\n                allowMarketingEmails: {\n                    translationKey: 'allow_marketing_emails',\n                    options: {\n                        value: '',\n                        parseString: false\n                    },\n                    template: templates.checkBox,\n                    disable: false\n                },\n                termsAndConditions: {\n                    translationKey: 'terms_and_conditions',\n                    options: {\n                        value: '',\n                        text: 'TRANS_OPTION_TEXT_KEY',\n                        parseString: true\n                    },\n                    template: templates.checkBox,\n                    validation: {\n                        rules: {\n                            not_equals: ['false', __('registration.warning.this_field_is_required', __('registration.field.label.termsAndConditions'))]\n                        },\n                        filters: []\n                    },\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                quiz_1: {\n                    title: __('reg.questionary.cysec.quiz_1'),\n                    translationKey: 'quiz_1',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                quiz_2: {\n                    title: __('reg.questionary.cysec.quiz_2'),\n                    translationKey: 'quiz_2',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                quiz_3: {\n                    title: __('reg.questionary.cysec.quiz_3'),\n                    translationKey: 'quiz_3',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                quiz_4: {\n                    title: __('reg.questionary.cysec.quiz_4'),\n                    translationKey: 'quiz_4',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                quiz_5: {\n                    title: __('reg.questionary.cysec.quiz_5'),\n                    translationKey: 'quiz_5',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                }\n            };\n        }\n\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/registration.form.config.cfdglobal.js\n// module id = 2787\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/registration.form.config.cfdglobal.js?");

/***/ }),

/***/ 2788:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var BaseModel = __webpack_require__(2495);\n    var settings = __webpack_require__(12);\n\n    module.exports = BaseModel.extend({\n\n        after: function after(data) {\n            var fatca = data[\"fatca\"];\n            if (fatca) {\n                switch (fatca) {\n                    case \"NO\":\n                        data[\"us_resident\"] = \"ur_no\";break;\n                    case \"YES\":\n                        data[\"us_resident\"] = \"ur_yes\";break;\n                }\n            }\n\n            return data;\n        }\n\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/step/cfdglobal/registration.step.financial.information.cfdglobal.model.js\n// module id = 2788\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/step/cfdglobal/registration.step.financial.information.cfdglobal.model.js?");

/***/ }),

/***/ 2789:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var settings = __webpack_require__(12);\n    var templates = __webpack_require__(85);\n    var validations = __webpack_require__(458);\n    var Form = __webpack_require__(853);\n\n    var _require = __webpack_require__(2496),\n        ConfigTemplates = _require.ConfigTemplates;\n\n    var RegistrationStepFinancialInformationModel = __webpack_require__(2790);\n    var RegistrationStepPersonalInformationBaseModel = __webpack_require__(2201);\n\n    var lowScoreDisclaimerTemplate = settings.isRegistrationLowScoreDisclaimerEnabled() ? _.template('<div class=\"low-score-disclaimer\"><%=__(\"registration.step.disclaimer.financial_information\")%></div>') : _.template('');\n\n    var DEFAULT_EMPTY = 'EMPTY';\n\n    var dependentFieldHandlers = {\n\n        tradeKindNone: function tradeKindNone(field) {\n            this.$el.find('[value=tk_none]').removeAttr('disabled');\n            this.$el.find('[data-value=tk_none]').removeClass('hidden');\n\n            var formFields = field.options.form._fields;\n\n            if (Form.isFieldEquals(formFields['csb_experience'], [DEFAULT_EMPTY]) || Form.isFieldEquals(formFields['fx_experience'], [DEFAULT_EMPTY]) || Form.isFieldEquals(formFields['csb_volume_experience'], [DEFAULT_EMPTY]) || Form.isFieldEquals(formFields['fx_volume_experience'], [DEFAULT_EMPTY])) {\n\n                this.setDefaultValue();\n                this.disable();\n\n                return this.$el.addClass('select-disabled');\n            }\n\n            this.enable();\n            this.$el.removeClass('select-disabled');\n\n            if (!Form.isFieldEquals(formFields['csb_experience'], [DEFAULT_EMPTY, 'ce_none']) || !Form.isFieldEquals(formFields['fx_experience'], [DEFAULT_EMPTY, 'fe_none']) || !Form.isFieldEquals(formFields['csb_volume_experience'], [DEFAULT_EMPTY, 'cve_none']) || !Form.isFieldEquals(formFields['fx_volume_experience'], [DEFAULT_EMPTY, 'fve_none'])) {\n\n                this.$el.find('[value=tk_none]').attr('disabled', 'disabled');\n                this.$el.find('[data-value=tk_none]').addClass('hidden');\n            }\n        },\n\n        activateOnlyIfEmployed: function activateOnlyIfEmployed(field) {\n            if (Form.isFieldEquals(field, ['es_employed', 'es_self_employed'])) {\n                this.enable();\n                this.$el.removeClass('select-disabled');\n\n                return;\n            }\n\n            this.disable();\n            this.setDefaultValueWithFireChangeEvent();\n            this.$el.addClass('select-disabled');\n        },\n        activateOnlyIfNotEmployed: function activateOnlyIfNotEmployed(field) {\n            if (Form.isFieldEquals(field, ['es_retired', 'es_student', 'es_unemployed'])) {\n                this.enable();\n                this.$el.removeClass('select-disabled');\n\n                return;\n            }\n\n            this.disable();\n            this.setDefaultValueWithFireChangeEvent();\n            this.$el.addClass('select-disabled');\n        }\n\n    };\n\n    module.exports = ConfigTemplates.extend({\n\n        getAllCountryCodes: function getAllCountryCodes() {\n            return _.pluck(this.getAllCountries(), 'code');\n        },\n\n        getAllowedCountries: function getAllowedCountries() {\n            return this.get('allowedCountries');\n        },\n\n        getAllowedCountryCodes: function getAllowedCountryCodes() {\n            return _.pluck(this.getAllowedCountries(), 'code');\n        },\n\n        getSortedAllowedCountryCodes: function getSortedAllowedCountryCodes() {\n            return this.getAllowedCountryCodes().sort(function (a, b) {\n                return __('country.name.' + a).localeCompare(__('country.name.' + b));\n            });\n        },\n\n        getCountryCodes: function getCountryCodes() {\n            return this.getSortedAllowedCountryCodes().map(function (code) {\n                return code.toLowerCase();\n            });\n        },\n\n        getCountriesPhoneCodes: function getCountriesPhoneCodes() {\n            return this.get('countriesPhoneCodes');\n        },\n\n        getPhoneToCountry: function getPhoneToCountry() {\n            return this.get('phoneToCountry');\n        },\n\n        getStepModels: function getStepModels() {\n            return {\n                'personal_information': new RegistrationStepPersonalInformationBaseModel(),\n                'financial_information_cfd': new RegistrationStepFinancialInformationModel()\n            };\n        },\n\n        getFormConfig: function getFormConfig() {\n\n            return {\n                // First Page:\n                firstName: this.stringInputTemplate('first_name', { lenght: 50 }), //\n\n                lastName: this.stringInputTemplate('last_name', { lenght: 50 }),\n\n                maritalStatus: this.classicSelectBoxTemplate('marital_status'),\n\n                birthDate: this.defaultDateOfBirth('date_of_birth', 18, 87),\n\n                address: this.stringInputTemplate('address', { lenght: 50 }),\n\n                zipCode: this.zipCodeInput('zip_code'),\n\n                city: this.stringInputTemplate('city'),\n\n                country: this.countrySelectBoxTemplate('country', this.getAllowedCountries()),\n\n                citizenship: this.countrySelectBoxTemplate('citizenship', this.getAllCountries()).override({\n                    validation: validations.countrySelectNotEmpty('citizenship')\n                }),\n\n                pep: this.yesNoDetailsTemlate('pep', 'textarea', 1000),\n\n                // prof info:\n\n                education_level: this.classicSelectBoxTemplate('education_level', true),\n                study_field: this.classicSelectBoxTemplate('study_field').override({\n                    template: templates.selectBoxOverflowWidth,\n                    dependent: [{\n                        name: 'education_level',\n                        handler: function handler(field) {\n                            if (['EMPTY', 'ed_no_edu', 'ed_prim_edu'].indexOf(field.value()) >= 0) {\n                                this.setDefaultValue();\n                                this.disable();\n\n                                return this.$el.addClass('select-disabled');\n                            }\n\n                            this.enable();\n\n                            return this.$el.removeClass('select-disabled');\n                        }\n                    }],\n                    disable: 'select-disabled'\n                }),\n\n                study_field_details: this.otherFieldDetailsTemplate('study_field', 'sf_other', {\n                    name: 'education_level',\n                    handler: function handler(field) {\n                        if (this.isDisabled()) {\n                            return;\n                        }\n\n                        if (field.value() === 'ed_no_edu' || field.value() === 'ed_prim_edu') {\n                            this.disable();\n\n                            return;\n                        }\n\n                        this.enable();\n                        this.focus();\n                    }\n                }),\n\n                qualification_level: this.classicSelectBoxTemplate('qualification_level').override({\n                    template: templates.selectBoxOverflowWidth\n                }),\n\n                employment_status_detailed: this.classicSelectBoxTemplate('employment_status_detailed', true),\n\n                employment_status_detailed_details: this.stringInputTemplate('employment_status_detailed').override({\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true,\n                    dependent: [{\n                        name: 'employment_status_detailed',\n                        handler: function handler(field) {\n\n                            this.value('');\n\n                            if (field.value() === 'es_employed') {\n                                this.$el.find('label').html(__('registration.field.label.employment_status_detailed.employer_details'));\n                                this.enable();\n                                this.focus();\n\n                                return;\n                            } else if (field.value() === 'es_self_employed') {\n                                this.$el.find('label').html(__('registration.field.label.employment_status_detailed.profession_details'));\n                                this.enable();\n                                this.focus();\n\n                                return;\n                            }\n\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                }),\n\n                profession: this.classicSelectBoxTemplate('profession').override({\n                    dependent: [{\n                        name: 'employment_status_detailed',\n                        handler: dependentFieldHandlers.activateOnlyIfEmployed\n                    }],\n                    disable: 'select-disabled'\n                }),\n\n                profession_details: this.otherFieldDetailsTemplate('profession', 'i_other'),\n\n                source_of_income: this.classicSelectBoxTemplate('source_of_income').override({\n                    dependent: [{\n                        name: 'employment_status_detailed',\n                        handler: dependentFieldHandlers.activateOnlyIfNotEmployed\n                    }]\n                }),\n\n                source_of_income_details: this.otherFieldDetailsTemplate('source_of_income', 'so_other'),\n\n                // Financial information. Third page\n                annual_income: this.classicSelectBoxTemplate('annual_income'),\n\n                net_worth: this.classicSelectBoxTemplate('net_worth'),\n\n                net_worth_details: this.otherFieldDetailsTemplate('net_worth', 'nw_o_1000000'),\n\n                yearly_income: this.classicSelectBoxTemplate('yearly_income'),\n\n                yearly_income_details: this.otherFieldDetailsTemplate('yearly_income', 'ndi_o_50000'),\n\n                intend_invest: this.classicSelectBoxTemplate('intend_invest'),\n\n                intend_invest_details: this.otherFieldDetailsTemplate('intend_invest', 'at_o_10000'),\n\n                funds_source: this.classicSelectBoxTemplate('funds_source'),\n\n                funds_source_details: this.otherFieldDetailsTemplate('funds_source', 'fs_other'),\n\n                orin_of_funds: this.multiCheckBox('orin_of_funds'),\n\n                fatca: this.fatcaConfigTemplate(),\n\n                //Trading experience. Forth page\n                fx_volume_experience: this.classicSelectBoxTemplate('fx_volume_experience'),\n\n                csb_volume_experience: this.classicSelectBoxTemplate('csb_volume_experience'),\n\n                fx_experience: this.classicSelectBoxTemplate('fx_experience'),\n\n                csb_experience: this.classicSelectBoxTemplate('csb_experience'),\n\n                trade_kind: this.classicSelectBoxTemplate('trade_kind').override({\n                    template: templates.selectBoxOverflowWidth,\n                    dependent: [{\n                        name: 'csb_experience',\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }, {\n                        name: 'fx_experience',\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }, {\n                        name: 'csb_volume_experience',\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }, {\n                        name: 'fx_volume_experience',\n                        handler: dependentFieldHandlers.tradeKindNone\n                    }]\n                }),\n\n                low_score_disclaimer: {\n                    title: '',\n                    translationKey: '',\n                    template: lowScoreDisclaimerTemplate,\n                    validation: {},\n                    disable: false,\n                    dependent: []\n                },\n\n                average_leverage: this.classicSelectBoxTemplate('average_leverage'),\n\n                // Forth Page:\n                quiz_information_disclaimer: {\n                    template: _.template('<div class=\"quiz-disclaimer\"><%=__(\"registration.step.disclaimer.quiz_information\")%></div>'),\n                    disable: false\n                },\n\n                termsAndConditions: {\n                    translationKey: 'terms_and_conditions',\n                    options: {\n                        value: '',\n                        text: 'TRANS_OPTION_TEXT_KEY',\n                        parseString: true\n                    },\n                    template: templates.checkBox,\n                    validation: {\n                        rules: {\n                            not_equals: ['false', __('registration.warning.this_field_is_required', __('registration.field.label.termsAndConditions'))]\n                        },\n                        filters: []\n                    },\n                    disable: false,\n                    className: 'coLtermsAndConditions',\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n\n                quiz_1: this.classicSelectBoxTemplate('quiz_1'),\n\n                quiz_2: this.classicSelectBoxTemplate('quiz_2'),\n\n                quiz_3: this.classicSelectBoxTemplate('quiz_3'),\n\n                quiz_4: this.classicSelectBoxTemplate('quiz_4'),\n\n                quiz_5: this.classicSelectBoxTemplate('quiz_5'),\n\n                quiz_6: this.classicSelectBoxTemplate('quiz_6'),\n\n                quiz_7: this.classicSelectBoxTemplate('quiz_7')\n\n            };\n        }\n\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/registration.form.config.clicktrades.js\n// module id = 2789\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/registration.form.config.clicktrades.js?");

/***/ }),

/***/ 2790:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var Model = __webpack_require__(16);\n    var BaseModel = __webpack_require__(2495);\n    var user = __webpack_require__(10);\n\n    module.exports = BaseModel.extend({\n\n        after: function after(data) {\n\n            var fatca = data[\"fatca\"];\n            if (fatca) {\n                switch (fatca) {\n                    case \"NO\":\n                        data[\"us_resident\"] = \"ur_no\";break;\n                    case \"YES\":\n                        data[\"us_resident\"] = \"ur_yes\";break;\n                }\n            }\n\n            return data;\n        }\n\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/step/clicktrades/registration.step.financial.information.clicktrades.js\n// module id = 2790\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/step/clicktrades/registration.step.financial.information.clicktrades.js?");

/***/ }),

/***/ 2791:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var Model = __webpack_require__(16);\n    var Moment = __webpack_require__(6);\n    var localization = __webpack_require__(27);\n    var templates = __webpack_require__(85);\n    var validations = __webpack_require__(458);\n    var Form = __webpack_require__(853);\n    var RegistrationStepPersonalInformationBaseModel = __webpack_require__(2201);\n    var EMPTY = __webpack_require__(13).EMPTY;\n\n    var dependentFieldHandlers = {\n\n        showHaveSecondTinCountry: function showHaveSecondTinCountry(field) {\n            var haveTin = this.getDependentFieldByName('have_tin');\n            var haveSecondTin = this.getDependentFieldByName('have_second_tin');\n\n            if (Form.isFieldEquals(haveTin, ['have_tin_yes']) && Form.isFieldEquals(haveSecondTin, ['have_second_tin_yes'])) {\n                this.enable();\n\n                return;\n            }\n\n            this.setDefaultValueWithFireChangeEvent();\n            this.validate();\n            this.disable();\n        },\n\n        updateHaveSecondTinAfterChangeHaveTin: function updateHaveSecondTinAfterChangeHaveTin(field) {\n            var haveTin = this.getDependentFieldByName('have_tin');\n\n            if (Form.isFieldEquals(haveTin, ['have_tin_yes'])) {\n                this.enable();\n\n                return;\n            }\n\n            this.disable();\n        },\n\n        showTinAbsenceReason: function showTinAbsenceReason(field) {\n            var haveTin = this.getDependentFieldByName('have_tin');\n\n            if (Form.isFieldEquals(haveTin, ['have_tin_no'])) {\n                this.enable();\n\n                return;\n            }\n\n            this.disable();\n        },\n\n        updateTinAbsenceReasonDetailsAfterChangeTinAbsenceReason: function updateTinAbsenceReasonDetailsAfterChangeTinAbsenceReason(field) {\n            var haveTin = this.getDependentFieldByName('have_tin');\n            var tinAbsenceReason = this.getDependentFieldByName('tin_absence_reason');\n\n            if (Form.isFieldEquals(haveTin, ['have_tin_no']) && Form.isFieldEquals(tinAbsenceReason, ['tin_absence_reason_other'])) {\n                tinAbsenceReason.disable();\n                this.enable();\n                this.$el.css('display', 'block');\n                this.focus();\n\n                return;\n            }\n\n            if (Form.isFieldEquals(haveTin, ['have_tin_no'])) {\n                tinAbsenceReason.enable();\n            }\n\n            this.$el.css('display', 'none');\n        },\n\n        updateTinAbsenceReasonDetailsAfterChangeHaveTin: function updateTinAbsenceReasonDetailsAfterChangeHaveTin(field) {\n            var haveTin = this.getDependentFieldByName('have_tin');\n            var tinAbsenceReason = this.getDependentFieldByName('tin_absence_reason');\n\n            if (!Form.isFieldEquals(haveTin, ['have_tin_no'])) {\n                this.disable();\n                this.setDefaultValueWithFireChangeEvent();\n                tinAbsenceReason.setDefaultValueWithFireChangeEvent();\n                this.$el.css('display', 'none');\n\n                return;\n            }\n\n            if (Form.isFieldEquals(tinAbsenceReason, ['tin_absence_reason_other'])) {\n                tinAbsenceReason.disable();\n                this.enable();\n                this.$el.css('display', 'block');\n            }\n        },\n\n        updateHaveSecondTinCountrySource: function updateHaveSecondTinCountrySource(countryCodes, field) {\n            var _this = this;\n\n            countryCodes.forEach(function (code) {\n                _this.$el.find('[value=\"' + code + '\"]').removeAttr('disabled');\n                _this.$el.find('[data-value=\"' + code + '\"]').removeClass('hidden');\n            });\n\n            var country = field.getValue().toLowerCase();\n            var tinCountry = this.getValue();\n\n            this.$el.find('[value=\"' + country + '\"]').attr('disabled', 'disabled');\n            this.$el.find('[data-value=\"' + country + '\"]').addClass('hidden');\n\n            if (tinCountry === country) {\n                this.setDefaultValueWithFireChangeEvent();\n            }\n        }\n    };\n\n    function countriesToOptions(countries) {\n        var options = _.pluck(countries, 'code').sort(function (a, b) {\n            return __('country.name.' + a).localeCompare(__('country.name.' + b));\n        });\n\n        options.unshift(EMPTY);\n\n        return options;\n    }\n\n    function lowerCaseOptions(options) {\n        return _.map(options, function (option) {\n            if (option === EMPTY) {\n                return option;\n            }\n\n            return option.toLowerCase();\n        });\n    }\n\n    module.exports = Model.extend({\n\n        getAllCountries: function getAllCountries() {\n            return this.get('allCountries');\n        },\n\n        getAllowedCountries: function getAllowedCountries() {\n            return this.get('allowedCountries');\n        },\n\n        getAllowedCountryCodes: function getAllowedCountryCodes() {\n            return _.pluck(this.getAllowedCountries(), 'code');\n        },\n\n        getSortedAllowedCountryCodes: function getSortedAllowedCountryCodes() {\n            return this.getAllowedCountryCodes().sort(function (a, b) {\n                return __('country.name.' + a).localeCompare(__('country.name.' + b));\n            });\n        },\n\n        getCountryCodes: function getCountryCodes() {\n            return this.getSortedAllowedCountryCodes().map(function (code) {\n                return code.toLowerCase();\n            });\n        },\n\n        getCountriesPhoneCodes: function getCountriesPhoneCodes() {\n            return this.get('countriesPhoneCodes');\n        },\n\n        getPhoneToCountry: function getPhoneToCountry() {\n            return this.get('phoneToCountry');\n        },\n\n        getStepModels: function getStepModels() {\n            return {\n                'personal_information': new RegistrationStepPersonalInformationBaseModel()\n            };\n        },\n\n        getFormConfig: function getFormConfig() {\n\n            return {\n                // Personal Information Page:\n                firstName: {\n                    translationKey: 'first_name',\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('first_name'),\n                            max_length: validations.maxLength(50, 'first_name')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                lastName: {\n                    translationKey: 'last_name',\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('last_name'),\n                            max_length: validations.maxLength(50, 'last_name')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                phone: {\n                    translationKey: 'phone',\n                    options: {\n                        countries: this.getCountriesPhoneCodes(),\n                        phoneToCountry: this.getPhoneToCountry()\n                    },\n                    template: templates.phoneBox,\n                    validation: {\n                        rules: {\n                            // TODO - localize\n                            not_empty: validations.notEmpty('phone'),\n                            numeric: validations.numeric('phone'),\n                            validateLength: function validateLength(data) {\n                                var min = 6;\n                                var max = 20;\n\n                                if (data.phone.length > max) {\n                                    return __('registration.phone.max', max);\n                                }\n\n                                if (data.phoneInput.length < min) {\n                                    return __('registration.phone.min', min);\n                                }\n\n                                if (_.isEmpty(data.phoneSelect)) {\n                                    return validations.notEmpty('phone');\n                                }\n\n                                return null;\n                            }\n                        },\n                        filters: []\n                    },\n                    disable: false\n                },\n                birthDate: {\n                    translationKey: 'date_of_birth',\n                    // TODO - this could be moved to the date input view\n                    options: {\n                        minAge: 18,\n                        maxAge: 87,\n                        moment: Moment,\n                        splitByComma: localization.splitByComma\n                    },\n                    template: templates.dateBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('date_of_birth')\n                        },\n                        filters: []\n                    },\n                    disable: false\n                },\n                address: {\n                    translationKey: 'address',\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('address'),\n                            max_length: validations.maxLength(50, 'address')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                zipCode: {\n                    translationKey: 'zip_code',\n                    template: templates.inputBox,\n                    validation: validations.zipCode('zip_code'),\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                city: {\n                    translationKey: 'city',\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('city')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                country: {\n                    translationKey: 'country',\n                    translationGroupPrefix: 'country.name',\n                    options: countriesToOptions(this.getAllowedCountries()),\n                    template: templates.countriesSelectBox,\n                    validation: validations.selectNotEmpty('country'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                citizenship: {\n                    title: __('registration.field.label.citizenship'),\n                    // EREZ _ THIS IS NOT A MISTAKE\n                    translationKey: 'country',\n                    translationGroupPrefix: 'country.name',\n                    options: countriesToOptions(this.getAllCountries()),\n                    template: templates.countriesSelectBox,\n                    validation: validations.selectNotEmpty('citizenship'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n\n                // financial information\n                have_tin: {\n                    title: __('reg.questionary.fsa-sy.have_tin'),\n                    translationKey: 'have_tin',\n                    link: {\n                        href: __('reg.questionary.fsa-sy.have_tin.link.href'),\n                        text: __('reg.questionary.fsa-sy.have_tin.learn_more')\n                    },\n                    options: [{ value: 'have_tin_no', text: __('no') }, { value: 'have_tin_yes', text: __('yes') }],\n                    details: {\n                        option: 'have_tin_yes',\n                        placeholder: __('reg.questionary.fsa-sy.have_tin.tin'),\n                        max_length: 50,\n                        type: 'input'\n                    },\n                    template: templates.yesNoDetails,\n                    disable: false\n                },\n                have_second_tin: {\n                    title: __('reg.questionary.fsa-sy.have_second_tin'),\n                    translationKey: 'have_second_tin',\n                    options: [{ value: 'have_second_tin_no', text: __('no') }, { value: 'have_second_tin_yes', text: __('yes') }],\n                    details: {\n                        option: 'have_second_tin_yes',\n                        placeholder: __('reg.questionary.fsa-sy.have_second_tin.tin'),\n                        max_length: 50,\n                        type: 'input'\n                    },\n                    template: templates.yesNoDetails,\n                    dependent: [{\n                        name: 'have_tin',\n                        handler: dependentFieldHandlers.updateHaveSecondTinAfterChangeHaveTin\n                    }],\n                    disable: true\n                },\n                have_second_tin_country: {\n                    title: __('reg.questionary.fsa-sy.have_second_tin_country'),\n                    translationKey: 'have_second_tin_country',\n                    translationGroupPrefix: 'country.name',\n                    options: lowerCaseOptions(countriesToOptions(this.getAllCountries())),\n                    template: templates.countriesSelectBox,\n                    validation: validations.countrySelectNotEmpty(),\n                    dependent: [{\n                        name: 'have_second_tin',\n                        handler: dependentFieldHandlers.showHaveSecondTinCountry\n                    }, {\n                        name: 'have_tin',\n                        handler: dependentFieldHandlers.showHaveSecondTinCountry\n                    }, {\n                        name: 'country',\n                        handler: _.partial(dependentFieldHandlers.updateHaveSecondTinCountrySource, lowerCaseOptions(countriesToOptions(this.getAllCountries())))\n                    }],\n                    disable: true,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                tin_absence_reason: {\n                    title: __('reg.questionary.fsa-sy.tin_absence_reason'),\n                    translationKey: 'tin_absence_reason',\n                    translationGroupPrefix: 'reg.questionary.fsa-sy.tin_absence_reason',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: 'have_tin',\n                        handler: dependentFieldHandlers.showTinAbsenceReason\n                    }],\n                    disable: true,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                tin_absence_reason_details: {\n                    title: __('reg.questionary.fsa-sy.tin_absence_reason'),\n                    translationKey: 'tin_absence_reason',\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty()\n                        }\n                    },\n                    dependent: [{\n                        name: 'tin_absence_reason',\n                        handler: dependentFieldHandlers.updateTinAbsenceReasonDetailsAfterChangeTinAbsenceReason\n                    }, {\n                        name: 'have_tin',\n                        handler: dependentFieldHandlers.updateTinAbsenceReasonDetailsAfterChangeHaveTin\n                    }],\n                    events: {\n                        onblur: _.partial(Form.validateFieldOnChange, 'tin_absence_reason')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                us_resident: {\n                    title: __('reg.questionary.fsa-sy.us_resident'),\n                    translationKey: 'us_resident',\n                    link: {\n                        href: __('reg.questionary.fsa-sy.us_resident.link.href'),\n                        text: __('reg.questionary.fsa-sy.us_resident.learn_more')\n                    },\n                    options: [{ value: 'ur_no', text: __('no') }, { value: 'ur_yes', text: __('yes') }],\n                    details: {\n                        option: 'ur_yes',\n                        placeholder: __('reg.questionary.fsa-sy.us_resident.tin'),\n                        max_length: 50,\n                        type: 'input'\n                    },\n                    template: templates.yesNoDetails,\n                    disable: false\n                },\n                allowMarketingEmails: {\n                    translationKey: 'allow_marketing_emails',\n                    options: {\n                        value: '',\n                        parseString: true\n                    },\n                    template: templates.checkBox,\n                    disable: false\n                },\n                termsAndConditions: {\n                    translationKey: 'terms_and_conditions',\n                    options: {\n                        value: '',\n                        text: 'TRANS_OPTION_TEXT_KEY',\n                        parseString: true\n                    },\n                    template: templates.checkBox,\n                    validation: {\n                        rules: {\n                            not_equals: ['false', __('registration.warning.this_field_is_required', __('registration.field.label.termsAndConditions'))]\n                        },\n                        filters: []\n                    },\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                }\n            };\n        }\n\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/registration.form.config.finq.js\n// module id = 2791\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/registration.form.config.finq.js?");

/***/ }),

/***/ 2792:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var Moment = __webpack_require__(6);\n    var localization = __webpack_require__(27);\n    var templates = __webpack_require__(85);\n    var validations = __webpack_require__(458);\n    var tinValidations = __webpack_require__(2289);\n    var user = __webpack_require__(10);\n    var Form = __webpack_require__(853);\n\n    var _require = __webpack_require__(2496),\n        ConfigTemplates = _require.ConfigTemplates;\n\n    var RegistrationStepPersonalInformationBaseModel = __webpack_require__(2201);\n    var RegistrationStepTaxInformationMarketsModel = __webpack_require__(2474);\n\n    var DEFAULT_EMPTY = 'EMPTY';\n    var DEFAULT_FIELD_LENGTH = 50;\n\n    var dependentFieldHandlers = {\n\n        tradeKindNone: function tradeKindNone(field) {\n            this.$el.find('[value=tk_none]').removeAttr('disabled');\n            this.$el.find('[data-value=tk_none]').removeClass('hidden');\n            this.$el.find('[value=tk_my_own]').removeAttr('disabled');\n            this.$el.find('[data-value=tk_my_own]').removeClass('hidden');\n            this.$el.find('[value=tk_with_advice]').removeAttr('disabled');\n            this.$el.find('[data-value=tk_with_advice]').removeClass('hidden');\n\n            var formFields = field.options.form._fields;\n\n            if (Form.isFieldEquals(formFields['csb_experience'], [DEFAULT_EMPTY]) || Form.isFieldEquals(formFields['fx_experience'], [DEFAULT_EMPTY]) || Form.isFieldEquals(formFields['csb_volume_experience'], [DEFAULT_EMPTY]) || Form.isFieldEquals(formFields['fx_volume_experience'], [DEFAULT_EMPTY])) {\n\n                this.setDefaultValue();\n                this.disable();\n\n                return this.$el.addClass('select-disabled');\n            }\n\n            this.enable();\n            this.$el.removeClass('select-disabled');\n\n            if (!Form.isFieldEquals(formFields['csb_experience'], [DEFAULT_EMPTY, 'ce_none']) || !Form.isFieldEquals(formFields['fx_experience'], [DEFAULT_EMPTY, 'fe_none']) || !Form.isFieldEquals(formFields['csb_volume_experience'], [DEFAULT_EMPTY, 'cve_none']) || !Form.isFieldEquals(formFields['fx_volume_experience'], [DEFAULT_EMPTY, 'fve_none'])) {\n\n                this.$el.find('[value=tk_none]').attr('disabled', 'disabled');\n                this.$el.find('[data-value=tk_none]').addClass('hidden');\n            }\n\n            if (Form.isFieldEquals(formFields['fx_volume_experience'], ['fve_none']) && Form.isFieldEquals(formFields['csb_volume_experience'], ['cve_none'])) {\n                this.$el.find('[value=tk_my_own]').attr('disabled', 'disabled');\n                this.$el.find('[data-value=tk_my_own]').addClass('hidden');\n                this.$el.find('[value=tk_with_advice]').attr('disabled', 'disabled');\n                this.$el.find('[data-value=tk_with_advice]').addClass('hidden');\n            }\n        },\n\n        afterChangeTinAbsenceReason: function afterChangeTinAbsenceReason(field) {\n            if (Form.isFieldEquals(field, ['NOT_REQUIRED'])) {\n                field.setTooltipMessage(__('reg.questionary.cysec.tin_absence_reason.not_required.tooltip'));\n                field.showNotErrorTooltip();\n\n                return;\n            }\n\n            field.hideTooltip();\n        },\n\n        updatePrimaryTinAfterChangeHavePrimaryTin: function updatePrimaryTinAfterChangeHavePrimaryTin(field) {\n            if (Form.isFieldEquals(field, ['have_primary_tin_yes'])) {\n                this.enable();\n\n                return;\n            }\n\n            this.setDefaultValueWithFireChangeEvent();\n            this.disable();\n        },\n\n        updatePrimaryTinAfterChangePrimaryTinTaxJurisdiction: function updatePrimaryTinAfterChangePrimaryTinTaxJurisdiction(field) {\n            var taxJurisdiction = field.getValue().toUpperCase();\n            var tinValidationRules = tinValidations.getRulesByCountryCode(taxJurisdiction, __('registration.warning.primary_tin'));\n\n            this.setRules(tinValidationRules);\n        },\n\n        updatePrimaryTinAbsenceReasonAfterChangeHavePrimaryTin: function updatePrimaryTinAbsenceReasonAfterChangeHavePrimaryTin(field) {\n            if (Form.isFieldEquals(field, ['have_primary_tin_no'])) {\n                this.enable();\n\n                return;\n            }\n\n            this.setDefaultValueWithFireChangeEvent();\n            this.disable();\n        },\n\n        updateSecondaryTinTaxJurisdictionAfterChangeHavePrimaryTin: function updateSecondaryTinTaxJurisdictionAfterChangeHavePrimaryTin(field) {\n            if (Form.isFieldEquals(field, ['have_primary_tin_yes'])) {\n                this.enable();\n\n                return;\n            }\n\n            this.setDefaultValueWithFireChangeEvent();\n            this.disable();\n        },\n\n        updateSecondaryTinAfterChangeSecondaryTinTaxJurisdiction: function updateSecondaryTinAfterChangeSecondaryTinTaxJurisdiction(field) {\n            if (!Form.isFieldEquals(field, ['EMPTY', '00'])) {\n                var taxJurisdiction = field.getValue().toUpperCase();\n                var tinValidationRules = tinValidations.getRulesByCountryCode(taxJurisdiction, __('registration.warning.secondary_tin'));\n\n                this.setRules(tinValidationRules);\n\n                this.enable();\n                this.setDefaultState();\n\n                return;\n            }\n\n            this.setDefaultValueWithFireChangeEvent();\n            this.disable();\n        },\n\n        updateSecondaryTinTaxJurisdictionSource: function updateSecondaryTinTaxJurisdictionSource(countryCodes) {\n            var _this = this;\n\n            countryCodes.forEach(function (code) {\n                _this.$el.find('[value=\"' + code + '\"]').removeAttr('disabled');\n                _this.$el.find('[data-value=\"' + code + '\"]').removeClass('hidden');\n            });\n\n            var userCountry = user.getCountry().toUpperCase();\n\n            this.$el.find('[value=\"' + userCountry + '\"]').attr('disabled', 'disabled');\n            this.$el.find('[data-value=\"' + userCountry + '\"]').addClass('hidden');\n        },\n\n        activateOnlyIfEmployed: function activateOnlyIfEmployed(field) {\n            if (Form.isFieldEquals(field, ['es_employed', 'es_self_employed'])) {\n                this.enable();\n                this.$el.removeClass('select-disabled');\n\n                return;\n            }\n\n            this.disable();\n            this.setDefaultValueWithFireChangeEvent();\n            this.$el.addClass('select-disabled');\n        }\n\n    };\n\n    function countryCodeToOptions(countries) {\n        var options = _.pluck(countries, 'code').sort(function (a, b) {\n            return __('country.name.' + a).localeCompare(__('country.name.' + b));\n        });\n\n        options.unshift('EMPTY');\n\n        return options;\n    }\n\n    function taxJurisdictionOptions(options) {\n        return ['00'].concat(options);\n    }\n\n    module.exports = ConfigTemplates.extend({\n\n        getAllCountries: function getAllCountries() {\n            return this.get('allCountries');\n        },\n\n        getAllCountryCodes: function getAllCountryCodes() {\n            return _.pluck(this.getAllCountries(), 'code');\n        },\n\n        getAllowedCountries: function getAllowedCountries() {\n            return this.get('allowedCountries');\n        },\n\n        getCountriesPhoneCodes: function getCountriesPhoneCodes() {\n            return this.get('countriesPhoneCodes');\n        },\n\n        getPhoneToCountry: function getPhoneToCountry() {\n            return this.get('phoneToCountry');\n        },\n\n        getStepModels: function getStepModels() {\n            return {\n                'personal_information': new RegistrationStepPersonalInformationBaseModel(),\n                'tax_information': new RegistrationStepTaxInformationMarketsModel()\n            };\n        },\n\n        getFormConfig: function getFormConfig() {\n\n            return {\n                // Personal Information Page:\n                firstName: {\n                    translationKey: 'first_name',\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('first_name'),\n                            max_length: validations.maxLength(DEFAULT_FIELD_LENGTH, 'first_name')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                lastName: {\n                    translationKey: 'last_name',\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('last_name'),\n                            max_length: validations.maxLength(DEFAULT_FIELD_LENGTH, 'last_name')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                phone: {\n                    translationKey: 'phone',\n                    options: {\n                        countries: this.getCountriesPhoneCodes(),\n                        phoneToCountry: this.getPhoneToCountry()\n                    },\n                    template: templates.phoneBox,\n                    validation: {\n                        rules: {\n                            // TODO - localize\n                            not_empty: validations.notEmpty('phone'),\n                            numeric: validations.numeric('phone'),\n                            validateLength: function validateLength(data) {\n                                var min = 6;\n                                var max = 20;\n\n                                if (data.phone.length > max) {\n                                    return __('registration.phone.max', max);\n                                }\n\n                                if (data.phoneInput.length < min) {\n                                    return __('registration.phone.min', min);\n                                }\n\n                                if (_.isEmpty(data.phoneSelect)) {\n                                    return validations.notEmpty('phone');\n                                }\n\n                                return null;\n                            }\n                        },\n                        filters: []\n                    },\n                    disable: false\n                },\n                birthDate: {\n                    translationKey: 'date_of_birth',\n                    // TODO - this could be moved to the date input view\n                    options: {\n                        minAge: 18,\n                        maxAge: 87,\n                        moment: Moment,\n                        splitByComma: localization.splitByComma\n                    },\n                    template: templates.dateBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('date_of_birth')\n                        },\n                        filters: []\n                    },\n                    disable: false\n                },\n                address: {\n                    translationKey: 'address',\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('address'),\n                            max_length: validations.maxLength(DEFAULT_FIELD_LENGTH, 'address')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                zipCode: {\n                    translationKey: 'zip_code',\n                    template: templates.inputBox,\n                    validation: validations.zipCode('zip_code'),\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                city: {\n                    translationKey: 'city',\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('city'),\n                            max_length: validations.maxLength(DEFAULT_FIELD_LENGTH, 'city')\n                        },\n                        filters: ['string']\n                    },\n                    disable: false,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n                country: {\n                    translationKey: 'country',\n                    translationGroupPrefix: 'country.name',\n                    options: countryCodeToOptions(this.getAllowedCountries()),\n                    template: templates.countriesSelectBox,\n                    validation: validations.selectNotEmpty('country'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                citizenship: {\n                    title: __('registration.field.label.citizenship'),\n                    // EREZ _ THIS IS NOT A MISTAKE\n                    translationKey: 'country',\n                    translationGroupPrefix: 'country.name',\n                    options: countryCodeToOptions(this.getAllCountries()),\n                    template: templates.countriesSelectBox,\n                    validation: validations.selectNotEmpty('citizenship'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                placeOfBirth: {\n                    title: __('registration.field.label.place_of_birth'),\n                    translationKey: 'country',\n                    translationGroupPrefix: 'country.name',\n                    options: countryCodeToOptions(this.getAllCountries()),\n                    template: templates.countriesSelectBox,\n                    validation: validations.selectNotEmpty('place_of_birth'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                nationality: {\n                    title: __('registration.field.label.nationality'),\n                    translationKey: 'country',\n                    translationGroupPrefix: 'country.name',\n                    options: countryCodeToOptions(this.getAllCountries()),\n                    template: templates.countriesSelectBox,\n                    validation: validations.selectNotEmpty('nationality'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                allowMarketingEmails: {\n                    translationKey: 'allow_marketing_emails',\n                    options: {\n                        value: '',\n                        parseString: true\n                    },\n                    template: templates.checkBox,\n                    disable: false\n                },\n\n                // Tax information Page:\n                primaryTinTaxJurisdiction: {\n                    title: __('registration.field.label.primary_tin_tax_jurisdiction'),\n                    translationKey: 'primary_tin_tax_jurisdiction',\n                    translationGroupPrefix: 'tax_jurisdiction',\n                    options: countryCodeToOptions(this.getAllCountries()),\n                    template: templates.countriesSelectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: 'select-disabled',\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                have_primary_tin: {\n                    title: __('registration.field.label.have_primary_tin'),\n                    translationKey: 'have_primary_tin',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: 'tinAbsenceReason',\n                        handler: dependentFieldHandlers.afterChangeTinAbsenceReason\n                    }],\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                primaryTin: {\n                    title: __('registration.field.label.primary_tin'),\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {},\n                        filters: tinValidations.getFilters\n                    },\n                    dependent: [{\n                        name: 'have_primary_tin',\n                        handler: dependentFieldHandlers.updatePrimaryTinAfterChangeHavePrimaryTin\n                    }, {\n                        name: 'primaryTinTaxJurisdiction',\n                        handler: dependentFieldHandlers.updatePrimaryTinAfterChangePrimaryTinTaxJurisdiction\n                    }],\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    },\n                    disable: true\n                },\n                tinAbsenceReason: {\n                    title: __('registration.field.label.tin_absence_reason'),\n                    translationKey: 'tin_absence_reason',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: 'have_primary_tin',\n                        handler: dependentFieldHandlers.updatePrimaryTinAbsenceReasonAfterChangeHavePrimaryTin\n                    }],\n                    disable: true,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                secondaryTinTaxJurisdiction: {\n                    title: __('registration.field.label.secondary_tin_tax_jurisdiction'),\n                    translationKey: 'country',\n                    translationGroupPrefix: 'tax_jurisdiction',\n                    options: taxJurisdictionOptions(countryCodeToOptions(this.getAllCountries())),\n                    template: templates.countriesSelectBox,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: 'have_primary_tin',\n                        handler: dependentFieldHandlers.updateSecondaryTinTaxJurisdictionAfterChangeHavePrimaryTin\n                    }, {\n                        name: 'primaryTinTaxJurisdiction',\n                        handler: _.partial(dependentFieldHandlers.updateSecondaryTinTaxJurisdictionSource, this.getAllCountryCodes())\n                    }],\n                    disable: true,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                secondaryTin: {\n                    title: __('registration.field.label.secondary_tin'),\n                    template: templates.inputBox,\n                    validation: {\n                        rules: {},\n                        filters: tinValidations.getFilters\n                    },\n                    dependent: [{\n                        name: 'secondaryTinTaxJurisdiction',\n                        handler: dependentFieldHandlers.updateSecondaryTinAfterChangeSecondaryTinTaxJurisdiction\n                    }],\n                    disable: true,\n                    events: {\n                        onblur: Form.checkInputOnBlur\n                    }\n                },\n\n                fatca: this.fatcaConfigTemplate(),\n\n                // Financial Information Page:\n                pep: this.yesNoDetailsTemlate('pep', 'textarea', 1000),\n\n                employment_status: {\n                    translationKey: 'employment_status',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty('employment_status'),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                industry: {\n                    title: __('reg.questionary.cysec.industry'),\n                    translationKey: 'industry',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    dependent: [{\n                        name: 'employment_status',\n                        handler: dependentFieldHandlers.activateOnlyIfEmployed\n                    }],\n                    disable: 'none',\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                industry_details: {\n                    title: __('reg.questionary.cysec.industry'),\n                    translationKey: 'industry',\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.i_other')),\n                    dependent: [{\n                        name: 'industry',\n                        handler: function handler(field) {\n                            if (field.value() === 'i_other') {\n                                field.disable();\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n\n                                return;\n                            }\n\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'industry')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                employer_name: this.stringInputTemplate('employer_name', { optional: true }).override({\n                    disable: true,\n                    dependent: [{\n                        name: 'employer_name_details',\n                        handler: function handler() {\n                            this.value('-');\n                        }\n                    }]\n                }),\n                employer_name_details: this.stringInputTemplate('employer_name_details').override({\n                    title: __('registration.field.label.employer_name'),\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('employer_name'),\n                            max_length: validations.maxLength(DEFAULT_FIELD_LENGTH, 'employer_name')\n                        },\n                        filters: ['string']\n                    }\n                }),\n                occupation: this.stringInputTemplate('occupation', { optional: true }).override({\n                    disable: true,\n                    dependent: [{\n                        name: 'occupation_details',\n                        handler: function handler() {\n                            this.value('-');\n                        }\n                    }]\n                }),\n                occupation_details: this.stringInputTemplate('occupation_details').override({\n                    title: __('registration.field.label.occupation'),\n                    validation: {\n                        rules: {\n                            not_empty: validations.notEmpty('occupation'),\n                            max_length: validations.maxLength(DEFAULT_FIELD_LENGTH, 'occupation')\n                        },\n                        filters: ['string']\n                    }\n                }),\n\n                total_income: this.classicSelectBoxTemplate('total_income'),\n                net_worth: this.classicSelectBoxTemplate('net_worth'),\n                income_source: {\n                    title: __('reg.questionary.cysec.income_source'),\n                    translationKey: 'income_source',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                income_source_details: {\n                    title: __('reg.questionary.cysec.income_source'),\n                    translationKey: 'income_source',\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.soi_other')),\n                    dependent: [{\n                        name: 'income_source',\n                        handler: function handler(field) {\n                            if (field.value() === 'soi_other') {\n                                field.disable();\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n\n                                return;\n                            }\n\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'income_source')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                deposits_per_year: this.classicSelectBoxTemplate('deposits_per_year'),\n                deposit_and_withdrawal_method: this.classicSelectBoxTemplate('deposit_and_withdrawal_method'),\n                registration_reason: {\n                    title: __('reg.questionary.cysec.registration_reason'),\n                    translationKey: 'registration_reason',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                registration_reason_details: {\n                    title: __('reg.questionary.cysec.registration_reason'),\n                    translationKey: 'registration_reason',\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.rr_other')),\n                    dependent: [{\n                        name: 'registration_reason',\n                        handler: function handler(field) {\n                            if (field.value() === 'rr_other') {\n                                field.disable();\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n\n                                return;\n                            }\n\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'registration_reason')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n\n                // Trading Experience Page:\n                net_disposable_income: {\n                    title: __('reg.questionary.cysec.net_disposable_income'),\n                    translationKey: 'net_disposable_income',\n                    template: templates.selectBox,\n                    validation: validations.selectNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n                net_disposable_income_details: {\n                    title: __('reg.questionary.cysec.net_disposable_income'),\n                    translationKey: 'net_disposable_income',\n                    template: templates.inputBox,\n                    validation: validations.inputNotEqual(__('registration.field.label.ndi_o_50000')),\n                    dependent: [{\n                        name: 'net_disposable_income',\n                        handler: function handler(field) {\n                            if (field.value() === 'ndi_o_50000') {\n                                field.disable();\n                                field.$el.css('display', 'none');\n                                this.enable();\n                                this.focus();\n\n                                return;\n                            }\n\n                            field.$el.css('display', 'block');\n                            this.disable();\n                        }\n                    }],\n                    events: {\n                        onblur: _.partial(Form.checkDependentFieldOnBlur, 'net_disposable_income')\n                    },\n                    placeholder: __('registration.field.value.provide'),\n                    disable: true\n                },\n                acceptable_risk_reward: this.classicSelectBoxTemplate('acceptable_risk_reward'),\n                investment_objectives: this.classicSelectBoxTemplate('investment_objectives'),\n                trading_qualification: {\n                    translationKey: 'trading_qualification',\n                    translationGroupPrefix: 'reg.questionary.cysec.trading_qualification',\n                    template: templates.multiCheckBox,\n                    validation: validations.multiCheckBoxNotEmpty(),\n                    disable: false,\n                    events: {\n                        onchange: function onchange(e) {\n                            if (e.currentTarget.value === 'tq_none') {\n                                var tq_none = this.$el.find('input[value=tq_none]')[0];\n\n                                _.each(this.$el.find('input[type=checkbox]:not([value=tq_none])'), function (checkbox) {\n                                    if (tq_none.checked) {\n                                        checkbox.checked = false;\n                                        checkbox.disabled = true;\n                                    } else {\n                                        checkbox.disabled = false;\n                                    }\n                                });\n                            }\n\n                            this.validate();\n                        }\n                    }\n                },\n\n                // Financial Knowledge Page:\n                termsAndConditions: {\n                    translationKey: 'terms_and_conditions',\n                    options: {\n                        value: '',\n                        text: 'TRANS_OPTION_TEXT_KEY',\n                        parseString: true\n                    },\n                    template: templates.checkBox,\n                    validation: {\n                        rules: {\n                            not_equals: ['false', __('registration.warning.this_field_is_required', __('registration.field.label.termsAndConditions'))]\n                        },\n                        filters: []\n                    },\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                },\n\n                sbe_experience: this.classicSelectBoxTemplate('sbe_experience'),\n                fos_experience: this.classicSelectBoxTemplate('fos_experience'),\n                fx_experience: this.classicSelectBoxTemplate('fx_experience'),\n                average_leverage: this.classicSelectBoxTemplate('average_leverage'),\n\n                personalInformationConfirmed: {\n                    translationKey: 'personal_information_confirmation',\n                    options: {\n                        value: '',\n                        parseString: true\n                    },\n                    template: templates.checkBox,\n                    validation: {\n                        rules: {\n                            not_equals: ['false', __('registration.warning.this_field_is_required', __('registration.field.label.personal_information_confirmation'))]\n                        },\n                        filters: []\n                    },\n                    disable: false,\n                    events: {\n                        onchange: Form.validateFieldOnChange\n                    }\n                }\n            };\n        }\n\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/registration.form.config.globtrex.js\n// module id = 2792\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/registration.form.config.globtrex.js?");

/***/ }),

/***/ 2793:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var Collection = __webpack_require__(50);\n\n    var _require = __webpack_require__(13),\n        STEP_PENDING = _require.STEP_PENDING,\n        STEP_IN_PROGRESS = _require.STEP_IN_PROGRESS,\n        STEP_DONE = _require.STEP_DONE;\n\n    var FIRST_STEP_ID = 0;\n\n    module.exports = Collection.extend({\n        currentStepId: FIRST_STEP_ID,\n\n        initSteps: function initSteps(steps) {\n            var stepsWithStatus = _.map(steps, function (step) {\n                return _.extend(step, { status: STEP_PENDING });\n            });\n\n            _.extend(stepsWithStatus[FIRST_STEP_ID], { status: STEP_IN_PROGRESS });\n\n            return stepsWithStatus;\n        },\n        setData: function setData(steps) {\n            _.each(steps, this.add, this);\n        },\n        getCurrentStepId: function getCurrentStepId() {\n            return this.currentStepId;\n        },\n        getTrackStepId: function getTrackStepId() {\n            return this.getCurrentStepId() + 1;\n        },\n        getCurrentStep: function getCurrentStep() {\n            return this.at(this.currentStepId);\n        },\n        shiftStep: function shiftStep(offset) {\n            var status = this.getShiftedStepStatus(offset);\n\n            if (!status) {\n                return;\n            }\n\n            this.updateCurrentStepStatus(status);\n\n            var newStepId = this.currentStepId + offset;\n\n            if (newStepId < 0) {\n                newStepId = FIRST_STEP_ID;\n            }\n\n            if (newStepId >= this.numberOfSteps()) {\n                newStepId = this.numberOfSteps() - 1;\n            }\n\n            this.currentStepId = newStepId;\n\n            var stepToSkipWhenGoingBack = offset < 0 && !this.currentStepHasStatus(STEP_DONE);\n\n            if (stepToSkipWhenGoingBack) {\n                this.shiftStep(-1);\n            }\n\n            this.updateCurrentStepStatus(STEP_IN_PROGRESS);\n        },\n        currentStepHasStatus: function currentStepHasStatus(status) {\n            return this.getCurrentStep().get('status') === status;\n        },\n        updateCurrentStepStatus: function updateCurrentStepStatus(newStatus) {\n            this.getCurrentStep().set('status', newStatus);\n        },\n        numberOfSteps: function numberOfSteps() {\n            return this.length;\n        },\n        isLastStep: function isLastStep() {\n            return this.currentStepId + 1 === this.numberOfSteps();\n        },\n        isFirstStep: function isFirstStep() {\n            return this.currentStepId === FIRST_STEP_ID;\n        },\n        getShiftedStepStatus: function getShiftedStepStatus(offset) {\n            if (offset < 0) {\n                return !this.isFirstStep() ? STEP_PENDING : null;\n            }\n\n            if (offset > 0) {\n                return !this.isLastStep() ? STEP_DONE : null;\n            }\n        },\n        goNextStep: function goNextStep() {\n            this.shiftStep(1);\n        },\n        goPreviousStep: function goPreviousStep() {\n            this.shiftStep(-1);\n        },\n        getNumberStepsToFinish: function getNumberStepsToFinish() {\n            return this.numberOfSteps() - this.getCurrentStepId();\n        }\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/steps/registration.steps.navigation.js\n// module id = 2793\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/steps/registration.steps.navigation.js?");

/***/ }),

/***/ 2794:
/***/ (function(module, exports) {

eval("module.exports = \"{\\n  \\\"steps\\\": [\\n    {\\n      \\\"groupName\\\": \\\"personal_information\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"firstName\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"lastName\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"phone\\\",\\n            \\\"options\\\": [\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"birthDate\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"address\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"zipCode\\\"\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"city\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"country\\\",\\n            \\\"options\\\": [\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"citizenship\\\",\\n            \\\"options\\\": [\\n            ]\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"financial_information\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"education_level\\\",\\n            \\\"options\\\": [\\n              \\\"ed_university_collage\\\",\\n              \\\"ed_sec_edu\\\",\\n              \\\"ed_prim_edu\\\",\\n              \\\"ed_no_edu\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"study_field\\\",\\n            \\\"options\\\": [\\n              \\\"sf_acc_bank\\\",\\n              \\\"sf_cs_it\\\",\\n              \\\"sf_med_sci\\\",\\n              \\\"sf_art_fashion\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"study_field_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"employment_status\\\",\\n            \\\"options\\\": [\\n              \\\"es_employed\\\",\\n              \\\"es_self_employed\\\",\\n              \\\"es_retired\\\",\\n              \\\"es_student\\\",\\n              \\\"es_unemployed\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"profession\\\",\\n            \\\"options\\\": [\\n              \\\"p_property_land\\\",\\n              \\\"p_trade_sales_retail\\\",\\n              \\\"p_tourism_entertainment\\\",\\n              \\\"p_marketing\\\",\\n              \\\"p_it_pharmaceuticals\\\",\\n              \\\"p_admin\\\",\\n              \\\"p_social\\\",\\n              \\\"p_financial_services\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"annual_income\\\",\\n            \\\"options\\\": [\\n              \\\"ai_o_250000\\\",\\n              \\\"ai_100001_250000\\\",\\n              \\\"ai_25001_100000\\\",\\n              \\\"ai_u_25000\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"savings_investments\\\",\\n            \\\"options\\\": [\\n              \\\"si_o_1000001\\\",\\n              \\\"si_250001_1000000\\\",\\n              \\\"si_100001_250000\\\",\\n              \\\"si_l_100000\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"intend_invest\\\",\\n            \\\"options\\\": [\\n              \\\"ii_o_1000001\\\",\\n              \\\"ii_100001_1000000\\\",\\n              \\\"ii_25001_100000\\\",\\n              \\\"ii_l_25000\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"trading_purpose\\\",\\n            \\\"options\\\": [\\n              \\\"tp_speculative_trading\\\",\\n              \\\"tp_additional_income_earning\\\",\\n              \\\"tp_savings\\\",\\n              \\\"tp_other\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"trading_purpose_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"funds_source\\\",\\n            \\\"options\\\": [\\n              \\\"fs_employment\\\",\\n              \\\"fs_savings_investments\\\",\\n              \\\"fs_inheritance\\\",\\n              \\\"fs_gift\\\",\\n              \\\"fs_other\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"funds_source_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"fatca\\\"\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"trading_experience\\\",\\n      \\\"top\\\": [\\n        {\\n          \\\"name\\\": \\\"low_score_disclaimer\\\",\\n          \\\"options\\\": []\\n        }\\n      ],\\n      \\\"bottom\\\": [\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"fx_volume_experience\\\",\\n            \\\"options\\\": [\\n              \\\"fve_o_250000\\\",\\n              \\\"fve_50001_250000\\\",\\n              \\\"fve_5001_50000\\\",\\n              \\\"fve_l_5000\\\",\\n              \\\"fve_none\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"csb_volume_experience\\\",\\n            \\\"options\\\": [\\n              \\\"cve_o_250000\\\",\\n              \\\"cve_50001_250000\\\",\\n              \\\"cve_5001_50000\\\",\\n              \\\"cve_l_5000\\\",\\n              \\\"cve_none\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"fx_experience\\\",\\n            \\\"options\\\": [\\n              \\\"fe_m_40\\\",\\n              \\\"fe_26_40\\\",\\n              \\\"fe_11_25\\\",\\n              \\\"fe_1_10\\\",\\n              \\\"fe_none\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"csb_experience\\\",\\n            \\\"options\\\": [\\n              \\\"ce_m_40\\\",\\n              \\\"ce_26_40\\\",\\n              \\\"ce_11_25\\\",\\n              \\\"ce_1_10\\\",\\n              \\\"ce_none\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"trade_kind\\\",\\n            \\\"options\\\": [\\n              \\\"tk_my_own\\\",\\n              \\\"tk_with_advice\\\",\\n              \\\"tk_related_role\\\",\\n              \\\"tk_seminars\\\",\\n              \\\"tk_2_years\\\",\\n              \\\"tk_none\\\"\\n            ]\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"financial_knowledge\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n        {\\n          \\\"name\\\": \\\"termsAndConditions\\\"\\n        }\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"apple_drops\\\",\\n            \\\"options\\\": [\\n              \\\"ad_move_same\\\",\\n              \\\"ad_move_opposite\\\",\\n              \\\"ad_not_affected\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"facebook_buy_markets\\\",\\n            \\\"options\\\": [\\n              \\\"fbm_markets\\\",\\n              \\\"fbm_london\\\",\\n              \\\"fbm_cannot_sell\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"maximum_open_position\\\",\\n            \\\"options\\\": [\\n              \\\"mop_50000\\\",\\n              \\\"mop_5000\\\",\\n              \\\"mop_500000\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"trade_leverage\\\",\\n            \\\"options\\\": [\\n              \\\"tl_pl_magnitude\\\",\\n              \\\"tl_risk_free\\\",\\n              \\\"tl_none_above\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"cfd_trading\\\",\\n            \\\"options\\\": [\\n              \\\"ct_no_ownership\\\",\\n              \\\"ct_complex\\\",\\n              \\\"ct_all_above\\\"\\n            ]\\n          }\\n        ]\\n      ]\\n    }\\n  ]\\n}\"\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/registration.flow.base.json\n// module id = 2794\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/registration.flow.base.json?");

/***/ }),

/***/ 2795:
/***/ (function(module, exports) {

eval("module.exports = \"{\\n  \\\"steps\\\": [\\n    {\\n      \\\"groupName\\\": \\\"personal_information\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"firstName\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"lastName\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"phone\\\",\\n            \\\"options\\\": [\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"birthDate\\\"\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"address\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"zipCode\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"city\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"country\\\",\\n            \\\"options\\\": [\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"citizenship\\\",\\n            \\\"options\\\": [\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"have_tin\\\",\\n            \\\"options\\\": [\\n              \\\"have_tin_yes\\\",\\n              \\\"have_tin_no\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"tin_absence_reason\\\",\\n            \\\"options\\\": [\\n              \\\"tin_absence_reason_not_relevant\\\",\\n              \\\"tin_absence_reason_does_not_issue\\\",\\n              \\\"tin_absence_reason_unable_to_obtain\\\",\\n              \\\"tin_absence_reason_not_required\\\",\\n              \\\"tin_absence_reason_not_taxable_person\\\",\\n              \\\"tin_absence_reason_other\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"tin_absence_reason_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"have_second_tin\\\",\\n            \\\"options\\\": [\\n              \\\"have_second_tin_yes\\\",\\n              \\\"have_second_tin_no\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"have_second_tin_country\\\",\\n            \\\"options\\\": [\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"us_resident\\\",\\n            \\\"options\\\": [\\n              \\\"ur_yes\\\",\\n              \\\"ur_no\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"pep\\\",\\n            \\\"options\\\": [\\n              \\\"pep_yes\\\",\\n              \\\"pep_no\\\"\\n            ]\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"financial_information\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"anticipated_turnover\\\",\\n            \\\"options\\\": [\\n              \\\"at_u_100000\\\",\\n              \\\"at_100001_250000\\\",\\n              \\\"at_25001_100000\\\",\\n              \\\"at_o_1000000\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"anticipated_turnover_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"trading_purpose\\\",\\n            \\\"options\\\": [\\n              \\\"tp_speculative_trading\\\",\\n              \\\"tp_additional_income_earning\\\",\\n              \\\"tp_savings\\\",\\n              \\\"tp_hedging\\\",\\n              \\\"tp_other\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"trading_purpose_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"transactions_nature\\\",\\n            \\\"options\\\": [\\n              \\\"tn_short_term_investment\\\",\\n              \\\"tn_long_term_investment\\\",\\n              \\\"tn_other\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"transactions_nature_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"employment_status\\\",\\n            \\\"options\\\": [\\n              \\\"es_employed\\\",\\n              \\\"es_self_employed\\\",\\n              \\\"es_retired\\\",\\n              \\\"es_student\\\",\\n              \\\"es_unemployed\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"industry\\\",\\n            \\\"options\\\": [\\n              \\\"i_accountancy\\\",\\n              \\\"i_admin_secretarial\\\",\\n              \\\"i_agriculture\\\",\\n              \\\"i_financial_services_banking\\\",\\n              \\\"i_catering_hospitality\\\",\\n              \\\"i_creative_media\\\",\\n              \\\"i_education\\\",\\n              \\\"i_emergency_services\\\",\\n              \\\"i_engineering\\\",\\n              \\\"i_financial_services_other\\\",\\n              \\\"i_health_medicine\\\",\\n              \\\"i_hm_forces\\\",\\n              \\\"i_hr\\\",\\n              \\\"i_financial_services_insurance\\\",\\n              \\\"i_it\\\",\\n              \\\"i_legal\\\",\\n              \\\"i_leisure_entertainment_other\\\",\\n              \\\"i_manufacturing\\\",\\n              \\\"i_marketing_pr_advertising\\\",\\n              \\\"i_pharmaceuticals\\\",\\n              \\\"i_property_constructions_trades\\\",\\n              \\\"i_retail\\\",\\n              \\\"i_sales\\\",\\n              \\\"i_social_care_services\\\",\\n              \\\"i_telecommunications\\\",\\n              \\\"i_transport_logistics\\\",\\n              \\\"i_other\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"industry_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"work_countries\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"work_position\\\",\\n            \\\"options\\\": [\\n              \\\"work_position_academic\\\",\\n              \\\"work_position_secretary\\\",\\n              \\\"work_position_auditor\\\",\\n              \\\"work_position_accountant\\\",\\n              \\\"work_position_consultant\\\",\\n              \\\"work_position_lawyer\\\",\\n              \\\"work_position_manager\\\",\\n              \\\"work_position_doctor\\\",\\n              \\\"work_position_nurse\\\",\\n              \\\"work_position_sales\\\",\\n              \\\"work_position_partner\\\",\\n              \\\"work_position_teacher\\\",\\n              \\\"work_position_not_working\\\",\\n              \\\"work_position_other\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"work_position_details\\\"\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"source_of_income\\\",\\n            \\\"options\\\": [\\n              \\\"so_employment\\\",\\n              \\\"so_saving\\\",\\n              \\\"so_ppf\\\",\\n              \\\"so_bb\\\",\\n              \\\"so_private_pension\\\",\\n              \\\"so_investments\\\",\\n              \\\"so_other\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"source_of_income_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"estimated_gross_income\\\",\\n            \\\"options\\\": [\\n              \\\"egi_u_25000\\\",\\n              \\\"egi_25001_100000\\\",\\n              \\\"egi_100001_250000\\\",\\n              \\\"egi_o_250000\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"estimated_gross_income_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"net_worth\\\",\\n            \\\"options\\\": [\\n              \\\"nw_u_100000\\\",\\n              \\\"nw_100001_250000\\\",\\n              \\\"nw_25001_100000\\\",\\n              \\\"nw_o_1000000\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"net_worth_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"orin_of_funds\\\",\\n            \\\"options\\\": [\\n              \\\"origin_of_funds_credit_card_eu\\\",\\n              \\\"origin_of_funds_credit_card_non_eu\\\",\\n              \\\"of_e_wallet\\\",\\n              \\\"origin_of_funds_wire_transfer_eu\\\",\\n              \\\"origin_of_funds_wire_transfer_non_eu\\\"\\n            ]\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"trading_experience\\\",\\n      \\\"top\\\": [\\n        {\\n          \\\"name\\\": \\\"low_score_disclaimer\\\",\\n          \\\"options\\\": [\\n          ]\\n        }\\n      ],\\n      \\\"bottom\\\": [\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"education_level\\\",\\n            \\\"options\\\": [\\n              \\\"ed_prof_qualif\\\",\\n              \\\"ed_university_collage\\\",\\n              \\\"ed_sec_edu\\\",\\n              \\\"ed_prim_edu\\\",\\n              \\\"ed_no_edu\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"study_field\\\",\\n            \\\"options\\\": [\\n              \\\"sf_acc_bank\\\",\\n              \\\"sf_cs_it\\\",\\n              \\\"sf_med_sci\\\",\\n              \\\"sf_art_fashion\\\",\\n              \\\"sf_other\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"study_field_details\\\"\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"fx_experience\\\",\\n            \\\"options\\\": [\\n              \\\"fe_m_40\\\",\\n              \\\"fe_26_40\\\",\\n              \\\"fe_11_25\\\",\\n              \\\"fe_1_10\\\",\\n              \\\"fe_none\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"csb_experience\\\",\\n            \\\"options\\\": [\\n              \\\"ce_m_40\\\",\\n              \\\"ce_26_40\\\",\\n              \\\"ce_11_25\\\",\\n              \\\"ce_1_10\\\",\\n              \\\"ce_none\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"fx_volume_experience\\\",\\n            \\\"options\\\": [\\n              \\\"fve_o_250000\\\",\\n              \\\"fve_50001_250000\\\",\\n              \\\"fve_5001_50000\\\",\\n              \\\"fve_l_5000\\\",\\n              \\\"fve_none\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"csb_volume_experience\\\",\\n            \\\"options\\\": [\\n              \\\"cve_o_250000\\\",\\n              \\\"cve_50001_250000\\\",\\n              \\\"cve_5001_50000\\\",\\n              \\\"cve_l_5000\\\",\\n              \\\"cve_none\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"trade_kind\\\",\\n            \\\"options\\\": [\\n              \\\"tk_my_own\\\",\\n              \\\"tk_with_advice\\\",\\n              \\\"tk_related_role\\\",\\n              \\\"tk_seminars\\\",\\n              \\\"tk_2_years\\\",\\n              \\\"tk_none\\\"\\n            ],\\n            \\\"disable\\\": false\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"quiz\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n        {\\n          \\\"name\\\": \\\"termsAndConditions\\\"\\n        }\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"quiz_1\\\",\\n            \\\"options\\\": [\\n              \\\"q1_answer1\\\",\\n              \\\"q1_answer2\\\",\\n              \\\"q1_answer3\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"quiz_2\\\",\\n            \\\"options\\\": [\\n              \\\"q2_answer1\\\",\\n              \\\"q2_answer2\\\",\\n              \\\"q2_answer3\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"quiz_3\\\",\\n            \\\"options\\\": [\\n              \\\"q3_answer1\\\",\\n              \\\"q3_answer2\\\",\\n              \\\"q3_answer3\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"quiz_4\\\",\\n            \\\"options\\\": [\\n              \\\"q4_answer1\\\",\\n              \\\"q4_answer2\\\",\\n              \\\"q4_answer3\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"quiz_5\\\",\\n            \\\"options\\\": [\\n              \\\"q5_answer1\\\",\\n              \\\"q5_answer2\\\",\\n              \\\"q5_answer3\\\"\\n            ]\\n          }\\n        ]\\n      ]\\n    }\\n  ]\\n}\"\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/registration.flow.trade.v2.json\n// module id = 2795\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/registration.flow.trade.v2.json?");

/***/ }),

/***/ 2796:
/***/ (function(module, exports) {

eval("module.exports = \"{\\n  \\\"steps\\\": [\\n    {\\n      \\\"groupName\\\": \\\"personal_information\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"firstName\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"lastName\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"phone\\\",\\n            \\\"options\\\": [\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"birthDate\\\"\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"address\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"zipCode\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"city\\\"\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"country\\\",\\n            \\\"options\\\": [\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"citizenship\\\",\\n            \\\"options\\\": [\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"nationalCountryIdentifier\\\"\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"tax_information\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n        {\\n          \\\"name\\\": \\\"tax_information_disclaimer\\\"\\n        }\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"primaryTinTaxJurisdiction\\\",\\n            \\\"options\\\": [\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"have_primary_tin\\\",\\n            \\\"options\\\": [\\n              \\\"have_primary_tin_yes\\\",\\n              \\\"have_primary_tin_no\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"primaryTin\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"tinAbsenceReason\\\",\\n            \\\"options\\\": [\\n              \\\"DOES_NOT_ISSUE\\\",\\n              \\\"UNABLE_TO_OBTAIN\\\",\\n              \\\"NOT_REQUIRED\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"secondaryTinTaxJurisdiction\\\",\\n            \\\"options\\\": [\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"secondaryTin\\\"\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"fatca\\\"\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"financial_information\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"education_level\\\",\\n            \\\"options\\\": [\\n              \\\"ed_university_collage\\\",\\n              \\\"ed_sec_edu\\\",\\n              \\\"ed_prim_edu\\\",\\n              \\\"ed_no_edu\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"study_field\\\",\\n            \\\"options\\\": [\\n              \\\"sf_acc_bank\\\",\\n              \\\"sf_cs_it\\\",\\n              \\\"sf_med_sci\\\",\\n              \\\"sf_art_fashion\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"study_field_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"employment_status\\\",\\n            \\\"options\\\": [\\n              \\\"es_employed\\\",\\n              \\\"es_self_employed\\\",\\n              \\\"es_retired\\\",\\n              \\\"es_student\\\",\\n              \\\"es_unemployed\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"profession\\\",\\n            \\\"options\\\": [\\n              \\\"p_property_land\\\",\\n              \\\"p_trade_sales_retail\\\",\\n              \\\"p_tourism_entertainment\\\",\\n              \\\"p_marketing\\\",\\n              \\\"p_it_pharmaceuticals\\\",\\n              \\\"p_admin\\\",\\n              \\\"p_social\\\",\\n              \\\"p_financial_services\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"annual_income\\\",\\n            \\\"options\\\": [\\n              \\\"ai_o_250000\\\",\\n              \\\"ai_100001_250000\\\",\\n              \\\"ai_25001_100000\\\",\\n              \\\"ai_u_25000\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"savings_investments\\\",\\n            \\\"options\\\": [\\n              \\\"si_o_1000001\\\",\\n              \\\"si_250001_1000000\\\",\\n              \\\"si_100001_250000\\\",\\n              \\\"si_l_100000\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"intend_invest\\\",\\n            \\\"options\\\": [\\n              \\\"ii_o_1000001\\\",\\n              \\\"ii_100001_1000000\\\",\\n              \\\"ii_25001_100000\\\",\\n              \\\"ii_l_25000\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"trading_purpose\\\",\\n            \\\"options\\\": [\\n              \\\"tp_speculative_trading\\\",\\n              \\\"tp_additional_income_earning\\\",\\n              \\\"tp_savings\\\",\\n              \\\"tp_other\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"trading_purpose_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"funds_source\\\",\\n            \\\"options\\\": [\\n              \\\"fs_employment\\\",\\n              \\\"fs_savings_investments\\\",\\n              \\\"fs_inheritance\\\",\\n              \\\"fs_gift\\\",\\n              \\\"fs_other\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"funds_source_details\\\"\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"trading_experience\\\",\\n      \\\"top\\\": [\\n        {\\n          \\\"name\\\": \\\"low_score_disclaimer\\\",\\n          \\\"options\\\": []\\n        }\\n      ],\\n      \\\"bottom\\\": [\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"fx_volume_experience\\\",\\n            \\\"options\\\": [\\n              \\\"fve_o_250000\\\",\\n              \\\"fve_50001_250000\\\",\\n              \\\"fve_5001_50000\\\",\\n              \\\"fve_l_5000\\\",\\n              \\\"fve_none\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"csb_volume_experience\\\",\\n            \\\"options\\\": [\\n              \\\"cve_o_250000\\\",\\n              \\\"cve_50001_250000\\\",\\n              \\\"cve_5001_50000\\\",\\n              \\\"cve_l_5000\\\",\\n              \\\"cve_none\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"fx_experience\\\",\\n            \\\"options\\\": [\\n              \\\"fe_m_40\\\",\\n              \\\"fe_26_40\\\",\\n              \\\"fe_11_25\\\",\\n              \\\"fe_1_10\\\",\\n              \\\"fe_none\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"csb_experience\\\",\\n            \\\"options\\\": [\\n              \\\"ce_m_40\\\",\\n              \\\"ce_26_40\\\",\\n              \\\"ce_11_25\\\",\\n              \\\"ce_1_10\\\",\\n              \\\"ce_none\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"trade_kind\\\",\\n            \\\"options\\\": [\\n              \\\"tk_my_own\\\",\\n              \\\"tk_with_advice\\\",\\n              \\\"tk_related_role\\\",\\n              \\\"tk_seminars\\\",\\n              \\\"tk_2_years\\\",\\n              \\\"tk_none\\\"\\n            ]\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"financial_knowledge\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n        {\\n          \\\"name\\\": \\\"termsAndConditions\\\"\\n        }\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"apple_drops\\\",\\n            \\\"options\\\": [\\n              \\\"ad_move_same\\\",\\n              \\\"ad_move_opposite\\\",\\n              \\\"ad_not_affected\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"facebook_buy_markets\\\",\\n            \\\"options\\\": [\\n              \\\"fbm_markets\\\",\\n              \\\"fbm_london\\\",\\n              \\\"fbm_cannot_sell\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"maximum_open_position\\\",\\n            \\\"options\\\": [\\n              \\\"mop_50000\\\",\\n              \\\"mop_5000\\\",\\n              \\\"mop_500000\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"trade_leverage\\\",\\n            \\\"options\\\": [\\n              \\\"tl_pl_magnitude\\\",\\n              \\\"tl_risk_free\\\",\\n              \\\"tl_none_above\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"cfd_trading\\\",\\n            \\\"options\\\": [\\n              \\\"ct_no_ownership\\\",\\n              \\\"ct_complex\\\",\\n              \\\"ct_all_above\\\"\\n            ]\\n          }\\n        ]\\n      ]\\n    }\\n  ]\\n}\"\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/registration.flow.markets.json\n// module id = 2796\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/registration.flow.markets.json?");

/***/ }),

/***/ 2797:
/***/ (function(module, exports) {

eval("module.exports = \"{\\n  \\\"steps\\\": [\\n    {\\n      \\\"groupName\\\": \\\"personal_information\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"firstName\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"lastName\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"phone\\\",\\n            \\\"options\\\": [\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"birthDate\\\"\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"address\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"zipCode\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"city\\\"\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"country\\\",\\n            \\\"options\\\": [\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"citizenship\\\",\\n            \\\"options\\\": [\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"nationalCountryIdentifier\\\"\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"tax_information\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n        {\\n          \\\"name\\\": \\\"tax_information_disclaimer\\\"\\n        }\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"primaryTinTaxJurisdiction\\\",\\n            \\\"options\\\": [\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"have_primary_tin\\\",\\n            \\\"options\\\": [\\n              \\\"have_primary_tin_yes\\\",\\n              \\\"have_primary_tin_no\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"primaryTin\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"tinAbsenceReason\\\",\\n            \\\"options\\\": [\\n              \\\"DOES_NOT_ISSUE\\\",\\n              \\\"UNABLE_TO_OBTAIN\\\",\\n              \\\"NOT_REQUIRED\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"secondaryTinTaxJurisdiction\\\",\\n            \\\"options\\\": [\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"secondaryTin\\\"\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"fatca\\\"\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"financial_information\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"education_level\\\",\\n            \\\"options\\\": [\\n              \\\"ed_university_collage\\\",\\n              \\\"ed_sec_edu\\\",\\n              \\\"ed_prim_edu\\\",\\n              \\\"ed_no_edu\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"study_field\\\",\\n            \\\"options\\\": [\\n              \\\"sf_acc_bank\\\",\\n              \\\"sf_cs_it\\\",\\n              \\\"sf_med_sci\\\",\\n              \\\"sf_art_fashion\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"study_field_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"employment_status\\\",\\n            \\\"options\\\": [\\n              \\\"es_employed\\\",\\n              \\\"es_self_employed\\\",\\n              \\\"es_retired\\\",\\n              \\\"es_student\\\",\\n              \\\"es_unemployed\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"profession\\\",\\n            \\\"options\\\": [\\n              \\\"p_property_land\\\",\\n              \\\"p_trade_sales_retail\\\",\\n              \\\"p_tourism_entertainment\\\",\\n              \\\"p_marketing\\\",\\n              \\\"p_it_pharmaceuticals\\\",\\n              \\\"p_admin\\\",\\n              \\\"p_social\\\",\\n              \\\"p_financial_services\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"annual_income\\\",\\n            \\\"options\\\": [\\n              \\\"ai_o_250000\\\",\\n              \\\"ai_100001_250000\\\",\\n              \\\"ai_25001_100000\\\",\\n              \\\"ai_u_25000\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"savings_investments\\\",\\n            \\\"options\\\": [\\n              \\\"si_o_1000001\\\",\\n              \\\"si_250001_1000000\\\",\\n              \\\"si_100001_250000\\\",\\n              \\\"si_l_100000\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"intend_invest\\\",\\n            \\\"options\\\": [\\n              \\\"ii_o_1000001\\\",\\n              \\\"ii_100001_1000000\\\",\\n              \\\"ii_25001_100000\\\",\\n              \\\"ii_l_25000\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"trading_purpose\\\",\\n            \\\"options\\\": [\\n              \\\"tp_speculative_trading\\\",\\n              \\\"tp_additional_income_earning\\\",\\n              \\\"tp_savings\\\",\\n              \\\"tp_other\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"trading_purpose_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"funds_source\\\",\\n            \\\"options\\\": [\\n              \\\"fs_employment\\\",\\n              \\\"fs_savings_investments\\\",\\n              \\\"fs_inheritance\\\",\\n              \\\"fs_gift\\\",\\n              \\\"fs_other\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"funds_source_details\\\"\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"trading_experience\\\",\\n      \\\"top\\\": [\\n        {\\n          \\\"name\\\": \\\"low_score_disclaimer\\\",\\n          \\\"options\\\": []\\n        }\\n      ],\\n      \\\"bottom\\\": [\\n        {\\n          \\\"name\\\": \\\"termsAndConditions\\\"\\n        }\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"fx_volume_experience\\\",\\n            \\\"options\\\": [\\n              \\\"fve_o_250000\\\",\\n              \\\"fve_50001_250000\\\",\\n              \\\"fve_5001_50000\\\",\\n              \\\"fve_l_5000\\\",\\n              \\\"fve_none\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"fx_experience\\\",\\n            \\\"options\\\": [\\n              \\\"fe_m_40\\\",\\n              \\\"fe_26_40\\\",\\n              \\\"fe_11_25\\\",\\n              \\\"fe_1_10\\\",\\n              \\\"fe_none\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"trade_kind\\\",\\n            \\\"options\\\": [\\n              \\\"tk_my_own\\\",\\n              \\\"tk_with_advice\\\",\\n              \\\"tk_related_role\\\",\\n              \\\"tk_seminars\\\",\\n              \\\"tk_2_years\\\",\\n              \\\"tk_none\\\"\\n            ]\\n          }\\n        ]\\n      ]\\n    }\\n  ]\\n}\"\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/registration.flow.markets.meconex.json\n// module id = 2797\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/registration.flow.markets.meconex.json?");

/***/ }),

/***/ 2798:
/***/ (function(module, exports) {

eval("module.exports = \"{\\n  \\\"steps\\\": [\\n    {\\n      \\\"groupName\\\": \\\"personal_information\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"firstName\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"lastName\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"phone\\\",\\n            \\\"options\\\": [\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"birthDate\\\"\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"address\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"zipCode\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"city\\\"\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"country\\\",\\n            \\\"options\\\": [\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"citizenship\\\",\\n            \\\"options\\\": [\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"nationalCountryIdentifier\\\"\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"tax_information\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n        {\\n          \\\"name\\\": \\\"tax_information_disclaimer\\\"\\n        }\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"primaryTinTaxJurisdiction\\\",\\n            \\\"options\\\": [\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"have_primary_tin\\\",\\n            \\\"options\\\": [\\n              \\\"have_primary_tin_yes\\\",\\n              \\\"have_primary_tin_no\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"primaryTin\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"tinAbsenceReason\\\",\\n            \\\"options\\\": [\\n              \\\"DOES_NOT_ISSUE\\\",\\n              \\\"UNABLE_TO_OBTAIN\\\",\\n              \\\"NOT_REQUIRED\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"secondaryTinTaxJurisdiction\\\",\\n            \\\"options\\\": [\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"secondaryTin\\\"\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"fatca\\\"\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"financial_information\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"education_level\\\",\\n            \\\"options\\\": [\\n              \\\"ed_university_collage\\\",\\n              \\\"ed_sec_edu\\\",\\n              \\\"ed_prim_edu\\\",\\n              \\\"ed_no_edu\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"study_field\\\",\\n            \\\"options\\\": [\\n              \\\"sf_acc_bank\\\",\\n              \\\"sf_cs_it\\\",\\n              \\\"sf_med_sci\\\",\\n              \\\"sf_art_fashion\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"study_field_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"employment_status\\\",\\n            \\\"options\\\": [\\n              \\\"es_employed\\\",\\n              \\\"es_self_employed\\\",\\n              \\\"es_retired\\\",\\n              \\\"es_student\\\",\\n              \\\"es_unemployed\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"profession\\\",\\n            \\\"options\\\": [\\n              \\\"p_property_land\\\",\\n              \\\"p_trade_sales_retail\\\",\\n              \\\"p_tourism_entertainment\\\",\\n              \\\"p_marketing\\\",\\n              \\\"p_it_pharmaceuticals\\\",\\n              \\\"p_admin\\\",\\n              \\\"p_social\\\",\\n              \\\"p_financial_services\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"annual_income\\\",\\n            \\\"options\\\": [\\n              \\\"ai_o_250000\\\",\\n              \\\"ai_100001_250000\\\",\\n              \\\"ai_25001_100000\\\",\\n              \\\"ai_u_25000\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"savings_investments\\\",\\n            \\\"options\\\": [\\n              \\\"si_o_1000001\\\",\\n              \\\"si_250001_1000000\\\",\\n              \\\"si_100001_250000\\\",\\n              \\\"si_l_100000\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"intend_invest\\\",\\n            \\\"options\\\": [\\n              \\\"ii_o_1000001\\\",\\n              \\\"ii_100001_1000000\\\",\\n              \\\"ii_25001_100000\\\",\\n              \\\"ii_l_25000\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"trading_purpose\\\",\\n            \\\"options\\\": [\\n              \\\"tp_speculative_trading\\\",\\n              \\\"tp_additional_income_earning\\\",\\n              \\\"tp_savings\\\",\\n              \\\"tp_other\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"trading_purpose_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"funds_source\\\",\\n            \\\"options\\\": [\\n              \\\"fs_employment\\\",\\n              \\\"fs_savings_investments\\\",\\n              \\\"fs_inheritance\\\",\\n              \\\"fs_gift\\\",\\n              \\\"fs_other\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"funds_source_details\\\"\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"trading_experience\\\",\\n      \\\"top\\\": [\\n        {\\n          \\\"name\\\": \\\"low_score_disclaimer\\\",\\n          \\\"options\\\": []\\n        }\\n      ],\\n      \\\"bottom\\\": [\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"fx_volume_experience\\\",\\n            \\\"options\\\": [\\n              \\\"fve_o_250000\\\",\\n              \\\"fve_50001_250000\\\",\\n              \\\"fve_5001_50000\\\",\\n              \\\"fve_l_5000\\\",\\n              \\\"fve_none\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"fx_experience\\\",\\n            \\\"options\\\": [\\n              \\\"fe_m_40\\\",\\n              \\\"fe_26_40\\\",\\n              \\\"fe_11_25\\\",\\n              \\\"fe_1_10\\\",\\n              \\\"fe_none\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"trade_kind\\\",\\n            \\\"options\\\": [\\n              \\\"tk_my_own\\\",\\n              \\\"tk_with_advice\\\",\\n              \\\"tk_related_role\\\",\\n              \\\"tk_seminars\\\",\\n              \\\"tk_2_years\\\",\\n              \\\"tk_none\\\"\\n            ]\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"financial_knowledge\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n        {\\n          \\\"name\\\": \\\"termsAndConditions\\\"\\n        }\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"what_does_cfd_stand_for\\\",\\n            \\\"options\\\": [\\n              \\\"wdcsf_con_for_dif\\\",\\n              \\\"wdcsf_com_for_div\\\",\\n              \\\"wdcsf_con_from_deed\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"price_apple_drops\\\",\\n            \\\"options\\\": [\\n              \\\"pad_move_same_dir\\\",\\n              \\\"pad_not_aff\\\",\\n              \\\"pad_move_opp_dir\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"knowledge_of_markets\\\",\\n            \\\"options\\\": [\\n              \\\"kom_can_be_practiced\\\",\\n              \\\"kom_do_not_need_knowledge\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"max_amount_leverage\\\",\\n            \\\"options\\\": [\\n              \\\"mal_10_000\\\",\\n              \\\"mal_50_000\\\",\\n              \\\"mal_100_000\\\"\\n\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"true_about_cfd\\\",\\n            \\\"options\\\": [\\n              \\\"tac_complex_products\\\",\\n              \\\"tac_understanding_risks\\\",\\n              \\\"tac_both_of_above\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"cfd_owner_asset\\\",\\n            \\\"options\\\": [\\n              \\\"coa_next_day\\\",\\n              \\\"coa_not_entitle_asset\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"leverage_risks\\\",\\n            \\\"options\\\": [\\n              \\\"lr_true\\\",\\n              \\\"lr_false\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"margin_call\\\",\\n            \\\"options\\\": [\\n              \\\"mc_demand_additional_money\\\",\\n              \\\"mc_type_instrument\\\",\\n              \\\"mc_phone_calls\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"avoid_margin_stop\\\",\\n            \\\"options\\\": [\\n              \\\"ams_close_positions\\\",\\n              \\\"ams_open_positions\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"volatility_market_fluctuates\\\",\\n            \\\"options\\\": [\\n              \\\"vmf_true\\\",\\n              \\\"vmf_false\\\"\\n            ]\\n          }\\n        ]\\n      ]\\n    }\\n  ]\\n}\"\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/registration.flow.markets.sta_global.json\n// module id = 2798\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/registration.flow.markets.sta_global.json?");

/***/ }),

/***/ 2799:
/***/ (function(module, exports) {

eval("module.exports = \"{\\n  \\\"steps\\\": [\\n    {\\n      \\\"groupName\\\": \\\"personal_information\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"firstName\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"lastName\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"phone\\\",\\n            \\\"options\\\": [\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"birthDate\\\"\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"address\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"zipCode\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"city\\\"\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"country\\\",\\n            \\\"options\\\": [\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"citizenship\\\",\\n            \\\"options\\\": [\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"nationalCountryIdentifier\\\"\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"tax_information\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n        {\\n          \\\"name\\\": \\\"tax_information_disclaimer\\\"\\n        }\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"primaryTinTaxJurisdiction\\\",\\n            \\\"options\\\": [\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"have_primary_tin\\\",\\n            \\\"options\\\": [\\n              \\\"have_primary_tin_yes\\\",\\n              \\\"have_primary_tin_no\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"primaryTin\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"tinAbsenceReason\\\",\\n            \\\"options\\\": [\\n              \\\"DOES_NOT_ISSUE\\\",\\n              \\\"UNABLE_TO_OBTAIN\\\",\\n              \\\"NOT_REQUIRED\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"secondaryTinTaxJurisdiction\\\",\\n            \\\"options\\\": [\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"secondaryTin\\\"\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"fatca\\\"\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"financial_information\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"education_level\\\",\\n            \\\"options\\\": [\\n              \\\"ed_university_collage\\\",\\n              \\\"ed_sec_edu\\\",\\n              \\\"ed_prim_edu\\\",\\n              \\\"ed_no_edu\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"study_field\\\",\\n            \\\"options\\\": [\\n              \\\"sf_acc_bank\\\",\\n              \\\"sf_cs_it\\\",\\n              \\\"sf_med_sci\\\",\\n              \\\"sf_art_fashion\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"study_field_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"employment_status\\\",\\n            \\\"options\\\": [\\n              \\\"es_employed\\\",\\n              \\\"es_self_employed\\\",\\n              \\\"es_retired\\\",\\n              \\\"es_student\\\",\\n              \\\"es_unemployed\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"profession\\\",\\n            \\\"options\\\": [\\n              \\\"p_property_land\\\",\\n              \\\"p_trade_sales_retail\\\",\\n              \\\"p_tourism_entertainment\\\",\\n              \\\"p_marketing\\\",\\n              \\\"p_it_pharmaceuticals\\\",\\n              \\\"p_admin\\\",\\n              \\\"p_social\\\",\\n              \\\"p_financial_services\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"annual_income\\\",\\n            \\\"options\\\": [\\n              \\\"ai_o_250000\\\",\\n              \\\"ai_100001_250000\\\",\\n              \\\"ai_25001_100000\\\",\\n              \\\"ai_u_25000\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"savings_investments\\\",\\n            \\\"options\\\": [\\n              \\\"si_o_1000001\\\",\\n              \\\"si_250001_1000000\\\",\\n              \\\"si_100001_250000\\\",\\n              \\\"si_l_100000\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"intend_invest\\\",\\n            \\\"options\\\": [\\n              \\\"ii_o_1000001\\\",\\n              \\\"ii_100001_1000000\\\",\\n              \\\"ii_25001_100000\\\",\\n              \\\"ii_l_25000\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"trading_purpose\\\",\\n            \\\"options\\\": [\\n              \\\"tp_speculative_trading\\\",\\n              \\\"tp_additional_income_earning\\\",\\n              \\\"tp_savings\\\",\\n              \\\"tp_other\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"trading_purpose_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"funds_source\\\",\\n            \\\"options\\\": [\\n              \\\"fs_employment\\\",\\n              \\\"fs_savings_investments\\\",\\n              \\\"fs_inheritance\\\",\\n              \\\"fs_gift\\\",\\n              \\\"fs_other\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"funds_source_details\\\"\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"trading_experience\\\",\\n      \\\"top\\\": [\\n        {\\n          \\\"name\\\": \\\"low_score_disclaimer\\\",\\n          \\\"options\\\": []\\n        }\\n      ],\\n      \\\"bottom\\\": [\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"fx_volume_experience\\\",\\n            \\\"options\\\": [\\n              \\\"fve_o_250000\\\",\\n              \\\"fve_50001_250000\\\",\\n              \\\"fve_5001_50000\\\",\\n              \\\"fve_l_5000\\\",\\n              \\\"fve_none\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"fx_experience\\\",\\n            \\\"options\\\": [\\n              \\\"fe_m_40\\\",\\n              \\\"fe_26_40\\\",\\n              \\\"fe_11_25\\\",\\n              \\\"fe_1_10\\\",\\n              \\\"fe_none\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"trade_kind\\\",\\n            \\\"options\\\": [\\n              \\\"tk_my_own\\\",\\n              \\\"tk_with_advice\\\",\\n              \\\"tk_related_role\\\",\\n              \\\"tk_seminars\\\",\\n              \\\"tk_2_years\\\",\\n              \\\"tk_none\\\"\\n            ]\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"financial_knowledge\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n        {\\n          \\\"name\\\": \\\"termsAndConditions\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"agreeToElectronicVerification\\\"\\n        }\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"what_does_cfd_stand_for\\\",\\n            \\\"options\\\": [\\n              \\\"wdcsf_con_for_dif\\\",\\n              \\\"wdcsf_com_for_div\\\",\\n              \\\"wdcsf_con_from_deed\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"price_apple_drops\\\",\\n            \\\"options\\\": [\\n              \\\"pad_move_same_dir\\\",\\n              \\\"pad_not_aff\\\",\\n              \\\"pad_move_opp_dir\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"knowledge_of_markets\\\",\\n            \\\"options\\\": [\\n              \\\"kom_can_be_practiced\\\",\\n              \\\"kom_do_not_need_knowledge\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"max_amount_leverage\\\",\\n            \\\"options\\\": [\\n              \\\"mal_10_000\\\",\\n              \\\"mal_50_000\\\",\\n              \\\"mal_100_000\\\"\\n\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"true_about_cfd\\\",\\n            \\\"options\\\": [\\n              \\\"tac_complex_products\\\",\\n              \\\"tac_understanding_risks\\\",\\n              \\\"tac_both_of_above\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"cfd_owner_asset\\\",\\n            \\\"options\\\": [\\n              \\\"coa_next_day\\\",\\n              \\\"coa_not_entitle_asset\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"leverage_risks\\\",\\n            \\\"options\\\": [\\n              \\\"lr_true\\\",\\n              \\\"lr_false\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"margin_call\\\",\\n            \\\"options\\\": [\\n              \\\"mc_demand_additional_money\\\",\\n              \\\"mc_type_instrument\\\",\\n              \\\"mc_phone_calls\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"avoid_margin_stop\\\",\\n            \\\"options\\\": [\\n              \\\"ams_close_positions\\\",\\n              \\\"ams_open_positions\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"volatility_market_fluctuates\\\",\\n            \\\"options\\\": [\\n              \\\"vmf_true\\\",\\n              \\\"vmf_false\\\"\\n            ]\\n          }\\n        ]\\n      ]\\n    }\\n  ]\\n}\"\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/registration.flow.markets.sta_global.australia.json\n// module id = 2799\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/registration.flow.markets.sta_global.australia.json?");

/***/ }),

/***/ 2800:
/***/ (function(module, exports) {

eval("module.exports = \"{\\n  \\\"steps\\\": [\\n    {\\n      \\\"groupName\\\": \\\"personal_information\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"firstName\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"lastName\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"birthDate\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"maritalStatus\\\",\\n            \\\"options\\\": [\\n              \\\"SINGLE\\\",\\n              \\\"MARRIED\\\",\\n              \\\"ENGAGED\\\",\\n              \\\"DIVORCED\\\",\\n              \\\"SEPARATED\\\",\\n              \\\"WIDOW\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"address\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"zipCode\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"city\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"country\\\",\\n            \\\"options\\\": [\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"citizenship\\\",\\n            \\\"options\\\": [\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"pep\\\",\\n            \\\"options\\\": [\\n              \\\"pep_yes\\\",\\n              \\\"pep_no\\\"\\n            ]\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"tax_information\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"primaryTinTaxJurisdiction\\\",\\n            \\\"options\\\": [\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"have_primary_tin\\\",\\n            \\\"options\\\": [\\n              \\\"have_primary_tin_yes\\\",\\n              \\\"have_primary_tin_no\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"primaryTin\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"tinAbsenceReason\\\",\\n            \\\"options\\\": [\\n              \\\"DOES_NOT_ISSUE\\\",\\n              \\\"UNABLE_TO_OBTAIN\\\",\\n              \\\"NOT_REQUIRED\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"secondaryTinTaxJurisdiction\\\",\\n            \\\"options\\\": [\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"secondaryTin\\\"\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"fatca\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"us_resident\\\"\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"professional_information\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"education_level\\\",\\n            \\\"options\\\": [\\n              \\\"ed_university_collage\\\",\\n              \\\"ed_sec_edu\\\",\\n              \\\"ed_prim_edu\\\",\\n              \\\"ed_no_edu\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"study_field\\\",\\n            \\\"options\\\": [\\n              \\\"sf_acc_bank\\\",\\n              \\\"sf_cs_it\\\",\\n              \\\"sf_med_sci\\\",\\n              \\\"sf_art_fashion\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"study_field_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"qualification_level\\\",\\n            \\\"options\\\": [\\n              \\\"ql_professional\\\",\\n              \\\"ql_training\\\",\\n              \\\"ql_worked\\\",\\n              \\\"ql_none\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"employment_status_detailed\\\",\\n            \\\"options\\\": [\\n              \\\"es_employed\\\",\\n              \\\"es_self_employed\\\",\\n              \\\"es_retired\\\",\\n              \\\"es_student\\\",\\n              \\\"es_unemployed\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"employment_status_detailed_details\\\"\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"profession\\\",\\n            \\\"options\\\": [\\n              \\\"i_accountancy\\\",\\n              \\\"i_admin_secretarial\\\",\\n              \\\"i_agriculture\\\",\\n              \\\"i_financial_services_banking\\\",\\n              \\\"i_catering_hospitality\\\",\\n              \\\"i_creative_media\\\",\\n              \\\"i_education\\\",\\n              \\\"i_emergency_services\\\",\\n              \\\"i_engineering\\\",\\n              \\\"i_financial_services_other\\\",\\n              \\\"i_health_medicine\\\",\\n              \\\"i_hm_forces\\\",\\n              \\\"i_hr\\\",\\n              \\\"i_financial_services_insurance\\\",\\n              \\\"i_it\\\",\\n              \\\"i_legal\\\",\\n              \\\"i_leisure_entertainment_other\\\",\\n              \\\"i_manufacturing\\\",\\n              \\\"i_marketing_pr_advertising\\\",\\n              \\\"i_pharmaceuticals\\\",\\n              \\\"i_property_constructions_trades\\\",\\n              \\\"i_retail\\\",\\n              \\\"i_sales\\\",\\n              \\\"i_social_care_services\\\",\\n              \\\"i_telecommunications\\\",\\n              \\\"i_transport_logistics\\\",\\n              \\\"i_other\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"profession_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"source_of_income\\\",\\n            \\\"options\\\": [\\n              \\\"so_employment\\\",\\n              \\\"so_business\\\",\\n              \\\"so_saving\\\",\\n              \\\"so_ppf\\\",\\n              \\\"so_bb\\\",\\n              \\\"so_private_pension\\\",\\n              \\\"so_investments\\\",\\n              \\\"so_other\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"source_of_income_details\\\"\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"financial_information_cfd\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"annual_income\\\",\\n            \\\"options\\\": [\\n              \\\"ai_u_25000\\\",\\n              \\\"ai_25001_50000\\\",\\n              \\\"ai_50001_100000\\\",\\n              \\\"ai_100001_250000\\\",\\n              \\\"ai_o_250000\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"yearly_income\\\",\\n            \\\"options\\\": [\\n              \\\"ndi_b_10000\\\",\\n              \\\"ndi_10001_20000\\\",\\n              \\\"ndi_20001_50000\\\",\\n              \\\"ndi_o_50000\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"yearly_income_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"net_worth\\\",\\n            \\\"options\\\": [\\n              \\\"nw_u_100000\\\",\\n              \\\"nw_100001_250000\\\",\\n              \\\"nw_25001_100000\\\",\\n              \\\"nw_o_1000000\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"net_worth_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"intend_invest\\\",\\n            \\\"options\\\": [\\n              \\\"at_u_1000\\\",\\n              \\\"at_1001_5000\\\",\\n              \\\"at_5001_10000\\\",\\n              \\\"at_o_10000\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"intend_invest_details\\\"\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"funds_source\\\",\\n            \\\"options\\\": [\\n              \\\"fs_employment\\\",\\n              \\\"fs_savings_investments\\\",\\n              \\\"fs_inheritance\\\",\\n              \\\"fs_gift\\\",\\n              \\\"fs_other\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"funds_source_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"orin_of_funds\\\",\\n            \\\"options\\\": [\\n              \\\"origin_of_funds_wire_transfer_eu\\\",\\n              \\\"origin_of_funds_wire_transfer_non_eu\\\",\\n              \\\"origin_of_funds_credit_card_eu\\\",\\n              \\\"origin_of_funds_credit_card_non_eu\\\",\\n              \\\"of_e_wallet\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"funds_source_bank\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"funds_source_bank_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"funds_source_country\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"funds_source_country_details\\\",\\n            \\\"options\\\": [\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"different_withdrawals_dest\\\",\\n            \\\"options\\\": [\\n              \\\"yes\\\",\\n              \\\"no\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"withdrawals_dest_bank\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"withdrawals_dest_bank_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"withdrawals_dest_country\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"withdrawals_dest_country_details\\\",\\n            \\\"options\\\": [\\n            ]\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"trading_experience\\\",\\n      \\\"top\\\": [\\n        {\\n          \\\"name\\\": \\\"low_score_disclaimer\\\",\\n          \\\"options\\\": [\\n          ]\\n        }\\n      ],\\n      \\\"bottom\\\": [\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"fx_volume_experience\\\",\\n            \\\"options\\\": [\\n              \\\"fve_none\\\",\\n              \\\"fve_l_500\\\",\\n              \\\"fve_501_2500\\\",\\n              \\\"fve_2501_10000\\\",\\n              \\\"fve_o_10000\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"csb_volume_experience\\\",\\n            \\\"options\\\": [\\n              \\\"cve_none\\\",\\n              \\\"cve_l_500\\\",\\n              \\\"cve_501_2500\\\",\\n              \\\"cve_2501_10000\\\",\\n              \\\"cve_o_10000\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"fx_experience\\\",\\n            \\\"options\\\": [\\n              \\\"fe_none\\\",\\n              \\\"fe_1_25\\\",\\n              \\\"fe_26_100\\\",\\n              \\\"fe_m_100\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"csb_experience\\\",\\n            \\\"options\\\": [\\n              \\\"ce_none\\\",\\n              \\\"ce_1_25\\\",\\n              \\\"ce_26_100\\\",\\n              \\\"ce_m_100\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"trade_kind\\\",\\n            \\\"options\\\": [\\n              \\\"tk_my_own\\\",\\n              \\\"tk_with_advice\\\",\\n              \\\"tk_related_role\\\",\\n              \\\"tk_seminars\\\",\\n              \\\"tk_none\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"average_leverage\\\",\\n            \\\"options\\\": [\\n              \\\"avel_never\\\",\\n              \\\"avel_u_10\\\",\\n              \\\"avel_10_25\\\",\\n              \\\"avel_25_50\\\",\\n              \\\"avel_50_100\\\",\\n              \\\"avel_m_100\\\"\\n            ]\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"quiz\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"quiz_1\\\",\\n            \\\"options\\\": [\\n              \\\"q1_answer1\\\",\\n              \\\"q1_answer2\\\",\\n              \\\"q1_answer3\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"quiz_2\\\",\\n            \\\"options\\\": [\\n              \\\"q2_answer1\\\",\\n              \\\"q2_answer2\\\",\\n              \\\"q2_answer3\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"quiz_3\\\",\\n            \\\"options\\\": [\\n              \\\"q3_answer1\\\",\\n              \\\"q3_answer2\\\",\\n              \\\"q3_answer3\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"quiz_4\\\",\\n            \\\"options\\\": [\\n              \\\"q4_answer1\\\",\\n              \\\"q4_answer2\\\",\\n              \\\"q4_answer3\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"quiz_5\\\",\\n            \\\"options\\\": [\\n              \\\"q5_answer1\\\",\\n              \\\"q5_answer2\\\",\\n              \\\"q5_answer3\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"quiz_6\\\",\\n            \\\"options\\\": [\\n              \\\"answer1\\\",\\n              \\\"answer2\\\",\\n              \\\"answer3\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"quiz_7\\\",\\n            \\\"options\\\": [\\n              \\\"answer1\\\",\\n              \\\"answer2\\\",\\n              \\\"answer3\\\",\\n              \\\"answer4\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"termsAndConditions\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"quiz_information_disclaimer\\\"\\n          }\\n        ]\\n      ]\\n    }\\n  ]\\n}\"\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/registration.flow.cfdglobal.v2.json\n// module id = 2800\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/registration.flow.cfdglobal.v2.json?");

/***/ }),

/***/ 2801:
/***/ (function(module, exports) {

eval("module.exports = \"{\\n  \\\"steps\\\": [\\n    {\\n      \\\"groupName\\\": \\\"personal_information\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"firstName\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"lastName\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"phone\\\",\\n            \\\"options\\\": [\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"birthDate\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"address\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"zipCode\\\"\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"city\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"country\\\",\\n            \\\"options\\\": [\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"citizenship\\\",\\n            \\\"options\\\": [\\n            ]\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"financial_information\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"anticipated_turnover\\\",\\n            \\\"options\\\": [\\n              \\\"at_u_100000\\\",\\n              \\\"at_100001_250000\\\",\\n              \\\"at_25001_100000\\\",\\n              \\\"at_o_1000000\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"trading_purpose\\\",\\n            \\\"options\\\": [\\n              \\\"tp_speculative_trading\\\",\\n              \\\"tp_additional_income_earning\\\",\\n              \\\"tp_savings\\\",\\n              \\\"tp_hedging\\\",\\n              \\\"tp_other\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"trading_purpose_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"transactions_nature\\\",\\n            \\\"options\\\": [\\n              \\\"tn_short_term_investment\\\",\\n              \\\"tn_long_term_investment\\\",\\n              \\\"tn_other\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"transactions_nature_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"employment_status\\\",\\n            \\\"options\\\": [\\n              \\\"es_employed\\\",\\n              \\\"es_self_employed\\\",\\n              \\\"es_retired\\\",\\n              \\\"es_student\\\",\\n              \\\"es_unemployed\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"industry\\\",\\n            \\\"options\\\": [\\n              \\\"i_accountancy\\\",\\n              \\\"i_admin_secretarial\\\",\\n              \\\"i_agriculture\\\",\\n              \\\"i_financial_services_banking\\\",\\n              \\\"i_catering_hospitality\\\",\\n              \\\"i_creative_media\\\",\\n              \\\"i_education\\\",\\n              \\\"i_emergency_services\\\",\\n              \\\"i_engineering\\\",\\n              \\\"i_financial_services_other\\\",\\n              \\\"i_health_medicine\\\",\\n              \\\"i_hm_forces\\\",\\n              \\\"i_hr\\\",\\n              \\\"i_financial_services_insurance\\\",\\n              \\\"i_it\\\",\\n              \\\"i_legal\\\",\\n              \\\"i_leisure_entertainment_other\\\",\\n              \\\"i_manufacturing\\\",\\n              \\\"i_marketing_pr_advertising\\\",\\n              \\\"i_pharmaceuticals\\\",\\n              \\\"i_property_constructions_trades\\\",\\n              \\\"i_retail\\\",\\n              \\\"i_sales\\\",\\n              \\\"i_social_care_services\\\",\\n              \\\"i_telecommunications\\\",\\n              \\\"i_transport_logistics\\\",\\n              \\\"i_other\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"industry_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"source_of_income\\\",\\n            \\\"options\\\": [\\n              \\\"so_employment\\\",\\n              \\\"so_saving\\\",\\n              \\\"so_ppf\\\",\\n              \\\"so_bb\\\",\\n              \\\"so_private_pension\\\",\\n              \\\"so_investments\\\",\\n              \\\"so_other\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"source_of_income_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"estimated_gross_income\\\",\\n            \\\"options\\\": [\\n              \\\"egi_u_25000\\\",\\n              \\\"egi_25001_100000\\\",\\n              \\\"egi_100001_250000\\\",\\n              \\\"egi_o_250000\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"net_worth\\\",\\n            \\\"options\\\": [\\n              \\\"nw_u_100000\\\",\\n              \\\"nw_100001_250000\\\",\\n              \\\"nw_25001_100000\\\",\\n              \\\"nw_o_1000000\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"orin_of_funds\\\",\\n            \\\"options\\\": [\\n              \\\"of_credit_card\\\",\\n              \\\"of_e_wallet\\\",\\n              \\\"of_wire_transfer\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"fatca\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"us_resident\\\"\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"trading_experience\\\",\\n      \\\"top\\\": [\\n        {\\n          \\\"name\\\": \\\"low_score_disclaimer\\\",\\n          \\\"options\\\": [\\n          ]\\n        }\\n      ],\\n      \\\"bottom\\\": [\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"education_level\\\",\\n            \\\"options\\\": [\\n              \\\"ed_prof_qualif\\\",\\n              \\\"ed_university_collage\\\",\\n              \\\"ed_sec_edu\\\",\\n              \\\"ed_prim_edu\\\",\\n              \\\"ed_no_edu\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"study_field\\\",\\n            \\\"options\\\": [\\n              \\\"sf_acc_bank\\\",\\n              \\\"sf_cs_it\\\",\\n              \\\"sf_med_sci\\\",\\n              \\\"sf_art_fashion\\\",\\n              \\\"sf_other\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"study_field_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"fx_experience\\\",\\n            \\\"options\\\": [\\n              \\\"fe_m_40\\\",\\n              \\\"fe_26_40\\\",\\n              \\\"fe_11_25\\\",\\n              \\\"fe_1_10\\\",\\n              \\\"fe_none\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"csb_experience\\\",\\n            \\\"options\\\": [\\n              \\\"ce_m_40\\\",\\n              \\\"ce_26_40\\\",\\n              \\\"ce_11_25\\\",\\n              \\\"ce_1_10\\\",\\n              \\\"ce_none\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"fx_volume_experience\\\",\\n            \\\"options\\\": [\\n              \\\"fve_o_250000\\\",\\n              \\\"fve_50001_250000\\\",\\n              \\\"fve_5001_50000\\\",\\n              \\\"fve_l_5000\\\",\\n              \\\"fve_none\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"csb_volume_experience\\\",\\n            \\\"options\\\": [\\n              \\\"cve_o_250000\\\",\\n              \\\"cve_50001_250000\\\",\\n              \\\"cve_5001_50000\\\",\\n              \\\"cve_l_5000\\\",\\n              \\\"cve_none\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"trade_kind\\\",\\n            \\\"options\\\": [\\n              \\\"tk_my_own\\\",\\n              \\\"tk_with_advice\\\",\\n              \\\"tk_related_role\\\",\\n              \\\"tk_seminars\\\",\\n              \\\"tk_2_years\\\",\\n              \\\"tk_none\\\"\\n            ],\\n            \\\"disable\\\": false\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"quiz\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n        {\\n          \\\"name\\\": \\\"allowMarketingEmails\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"termsAndConditions\\\"\\n        }\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"quiz_1\\\",\\n            \\\"options\\\": [\\n              \\\"q1_answer1\\\",\\n              \\\"q1_answer2\\\",\\n              \\\"q1_answer3\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"quiz_2\\\",\\n            \\\"options\\\": [\\n              \\\"q2_answer1\\\",\\n              \\\"q2_answer2\\\",\\n              \\\"q2_answer3\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"quiz_3\\\",\\n            \\\"options\\\": [\\n              \\\"q3_answer1\\\",\\n              \\\"q3_answer2\\\",\\n              \\\"q3_answer3\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"quiz_4\\\",\\n            \\\"options\\\": [\\n              \\\"q4_answer1\\\",\\n              \\\"q4_answer2\\\",\\n              \\\"q4_answer3\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"quiz_5\\\",\\n            \\\"options\\\": [\\n              \\\"q5_answer1\\\",\\n              \\\"q5_answer2\\\",\\n              \\\"q5_answer3\\\"\\n            ]\\n          }\\n        ]\\n      ]\\n    }\\n  ]\\n}\"\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/registration.flow.cfdglobal.json\n// module id = 2801\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/registration.flow.cfdglobal.json?");

/***/ }),

/***/ 2802:
/***/ (function(module, exports) {

eval("module.exports = \"{\\n  \\\"steps\\\": [\\n    {\\n      \\\"groupName\\\": \\\"personal_information\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"firstName\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"lastName\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"birthDate\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"maritalStatus\\\",\\n            \\\"options\\\": [\\n              \\\"SINGLE\\\",\\n              \\\"MARRIED\\\",\\n              \\\"ENGAGED\\\",\\n              \\\"DIVORCED\\\",\\n              \\\"SEPARATED\\\",\\n              \\\"WIDOW\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"address\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"zipCode\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"city\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"country\\\",\\n            \\\"options\\\": [\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"citizenship\\\",\\n            \\\"options\\\": [\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"pep\\\",\\n            \\\"options\\\": [\\n              \\\"pep_yes\\\",\\n              \\\"pep_no\\\"\\n            ]\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"professional_information\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"education_level\\\",\\n            \\\"options\\\": [\\n              \\\"ed_university_collage\\\",\\n              \\\"ed_sec_edu\\\",\\n              \\\"ed_prim_edu\\\",\\n              \\\"ed_no_edu\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"study_field\\\",\\n            \\\"options\\\": [\\n              \\\"sf_acc_bank\\\",\\n              \\\"sf_cs_it\\\",\\n              \\\"sf_med_sci\\\",\\n              \\\"sf_art_fashion\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"study_field_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"qualification_level\\\",\\n            \\\"options\\\": [\\n              \\\"ql_professional\\\",\\n              \\\"ql_training\\\",\\n              \\\"ql_worked\\\",\\n              \\\"ql_none\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"employment_status_detailed\\\",\\n            \\\"options\\\": [\\n              \\\"es_employed\\\",\\n              \\\"es_self_employed\\\",\\n              \\\"es_retired\\\",\\n              \\\"es_student\\\",\\n              \\\"es_unemployed\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"employment_status_detailed_details\\\"\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"profession\\\",\\n            \\\"options\\\": [\\n              \\\"i_accountancy\\\",\\n              \\\"i_admin_secretarial\\\",\\n              \\\"i_agriculture\\\",\\n              \\\"i_financial_services_banking\\\",\\n              \\\"i_catering_hospitality\\\",\\n              \\\"i_creative_media\\\",\\n              \\\"i_education\\\",\\n              \\\"i_emergency_services\\\",\\n              \\\"i_engineering\\\",\\n              \\\"i_financial_services_other\\\",\\n              \\\"i_health_medicine\\\",\\n              \\\"i_hm_forces\\\",\\n              \\\"i_hr\\\",\\n              \\\"i_financial_services_insurance\\\",\\n              \\\"i_it\\\",\\n              \\\"i_legal\\\",\\n              \\\"i_leisure_entertainment_other\\\",\\n              \\\"i_manufacturing\\\",\\n              \\\"i_marketing_pr_advertising\\\",\\n              \\\"i_pharmaceuticals\\\",\\n              \\\"i_property_constructions_trades\\\",\\n              \\\"i_retail\\\",\\n              \\\"i_sales\\\",\\n              \\\"i_social_care_services\\\",\\n              \\\"i_telecommunications\\\",\\n              \\\"i_transport_logistics\\\",\\n              \\\"i_other\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"profession_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"source_of_income\\\",\\n            \\\"options\\\": [\\n              \\\"so_employment\\\",\\n              \\\"so_business\\\",\\n              \\\"so_saving\\\",\\n              \\\"so_ppf\\\",\\n              \\\"so_bb\\\",\\n              \\\"so_private_pension\\\",\\n              \\\"so_investments\\\",\\n              \\\"so_other\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"source_of_income_details\\\"\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"financial_information_cfd\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"annual_income\\\",\\n            \\\"options\\\": [\\n              \\\"ai_u_25000\\\",\\n              \\\"ai_25001_50000\\\",\\n              \\\"ai_50001_100000\\\",\\n              \\\"ai_100001_250000\\\",\\n              \\\"ai_o_250000\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"yearly_income\\\",\\n            \\\"options\\\": [\\n              \\\"ndi_b_10000\\\",\\n              \\\"ndi_10001_20000\\\",\\n              \\\"ndi_20001_50000\\\",\\n              \\\"ndi_o_50000\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"yearly_income_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"net_worth\\\",\\n            \\\"options\\\": [\\n              \\\"nw_u_100000\\\",\\n              \\\"nw_100001_250000\\\",\\n              \\\"nw_25001_100000\\\",\\n              \\\"nw_o_1000000\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"net_worth_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"intend_invest\\\",\\n            \\\"options\\\": [\\n              \\\"at_u_1000\\\",\\n              \\\"at_1001_5000\\\",\\n              \\\"at_5001_10000\\\",\\n              \\\"at_o_10000\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"intend_invest_details\\\"\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"funds_source\\\",\\n            \\\"options\\\": [\\n              \\\"fs_employment\\\",\\n              \\\"fs_savings_investments\\\",\\n              \\\"fs_inheritance\\\",\\n              \\\"fs_gift\\\",\\n              \\\"fs_other\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"funds_source_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"orin_of_funds\\\",\\n            \\\"options\\\": [\\n              \\\"origin_of_funds_wire_transfer_eu\\\",\\n              \\\"origin_of_funds_wire_transfer_non_eu\\\",\\n              \\\"origin_of_funds_credit_card_eu\\\",\\n              \\\"origin_of_funds_credit_card_non_eu\\\",\\n              \\\"of_e_wallet\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"fatca\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"us_resident\\\"\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"trading_experience\\\",\\n      \\\"top\\\": [\\n        {\\n          \\\"name\\\": \\\"low_score_disclaimer\\\",\\n          \\\"options\\\": [\\n          ]\\n        }\\n      ],\\n      \\\"bottom\\\": [\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"fx_volume_experience\\\",\\n            \\\"options\\\": [\\n              \\\"fve_none\\\",\\n              \\\"fve_l_500\\\",\\n              \\\"fve_501_2500\\\",\\n              \\\"fve_2501_10000\\\",\\n              \\\"fve_o_10000\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"csb_volume_experience\\\",\\n            \\\"options\\\": [\\n              \\\"cve_none\\\",\\n              \\\"cve_l_500\\\",\\n              \\\"cve_501_2500\\\",\\n              \\\"cve_2501_10000\\\",\\n              \\\"cve_o_10000\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"fx_experience\\\",\\n            \\\"options\\\": [\\n              \\\"fe_none\\\",\\n              \\\"fe_1_25\\\",\\n              \\\"fe_26_100\\\",\\n              \\\"fe_m_100\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"csb_experience\\\",\\n            \\\"options\\\": [\\n              \\\"ce_none\\\",\\n              \\\"ce_1_25\\\",\\n              \\\"ce_26_100\\\",\\n              \\\"ce_m_100\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"trade_kind\\\",\\n            \\\"options\\\": [\\n              \\\"tk_my_own\\\",\\n              \\\"tk_with_advice\\\",\\n              \\\"tk_related_role\\\",\\n              \\\"tk_seminars\\\",\\n              \\\"tk_none\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"average_leverage\\\",\\n            \\\"options\\\": [\\n              \\\"avel_never\\\",\\n              \\\"avel_u_10\\\",\\n              \\\"avel_10_25\\\",\\n              \\\"avel_25_50\\\",\\n              \\\"avel_50_100\\\",\\n              \\\"avel_m_100\\\"\\n            ]\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"quiz\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"quiz_1\\\",\\n            \\\"options\\\": [\\n              \\\"q1_answer1\\\",\\n              \\\"q1_answer2\\\",\\n              \\\"q1_answer3\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"quiz_2\\\",\\n            \\\"options\\\": [\\n              \\\"q2_answer1\\\",\\n              \\\"q2_answer2\\\",\\n              \\\"q2_answer3\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"quiz_3\\\",\\n            \\\"options\\\": [\\n              \\\"q3_answer1\\\",\\n              \\\"q3_answer2\\\",\\n              \\\"q3_answer3\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"quiz_4\\\",\\n            \\\"options\\\": [\\n              \\\"q4_answer1\\\",\\n              \\\"q4_answer2\\\",\\n              \\\"q4_answer3\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"quiz_5\\\",\\n            \\\"options\\\": [\\n              \\\"q5_answer1\\\",\\n              \\\"q5_answer2\\\",\\n              \\\"q5_answer3\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"quiz_6\\\",\\n            \\\"options\\\": [\\n              \\\"answer1\\\",\\n              \\\"answer2\\\",\\n              \\\"answer3\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"quiz_7\\\",\\n            \\\"options\\\": [\\n              \\\"answer1\\\",\\n              \\\"answer2\\\",\\n              \\\"answer3\\\",\\n              \\\"answer4\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"termsAndConditions\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"quiz_information_disclaimer\\\"\\n          }\\n        ]\\n      ]\\n    }\\n  ]\\n}\"\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/registration.flow.clicktrades.json\n// module id = 2802\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/registration.flow.clicktrades.json?");

/***/ }),

/***/ 2803:
/***/ (function(module, exports) {

eval("module.exports = \"{\\n  \\\"steps\\\": [\\n    {\\n      \\\"groupName\\\": \\\"personal_information\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"firstName\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"lastName\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"phone\\\",\\n            \\\"options\\\": [\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"birthDate\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"address\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"zipCode\\\"\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"city\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"country\\\",\\n            \\\"options\\\": [\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"citizenship\\\",\\n            \\\"options\\\": [\\n            ]\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"additional_information\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n        {\\n          \\\"name\\\": \\\"allowMarketingEmails\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"termsAndConditions\\\"\\n        }\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"have_tin\\\",\\n            \\\"options\\\": [\\n              \\\"have_tin_yes\\\",\\n              \\\"have_tin_no\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"tin_absence_reason\\\",\\n            \\\"options\\\": [\\n              \\\"tin_absence_reason_not_relevant\\\",\\n              \\\"tin_absence_reason_does_not_issue\\\",\\n              \\\"tin_absence_reason_unable_to_obtain\\\",\\n              \\\"tin_absence_reason_not_required\\\",\\n              \\\"tin_absence_reason_not_taxable_person\\\",\\n              \\\"tin_absence_reason_other\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"tin_absence_reason_details\\\"\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"have_second_tin\\\",\\n            \\\"options\\\": [\\n              \\\"have_second_tin_yes\\\",\\n              \\\"have_second_tin_no\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"have_second_tin_country\\\",\\n            \\\"options\\\": [\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"us_resident\\\",\\n            \\\"options\\\": [\\n              \\\"ur_yes\\\",\\n              \\\"ur_no\\\"\\n            ]\\n          }\\n        ]\\n      ]\\n    }\\n  ]\\n}\\n\"\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/registration.flow.finq.json\n// module id = 2803\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/registration.flow.finq.json?");

/***/ }),

/***/ 2804:
/***/ (function(module, exports) {

eval("module.exports = \"{\\n  \\\"steps\\\": [\\n    {\\n      \\\"groupName\\\": \\\"personal_information\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n        {\\n          \\\"name\\\": \\\"allowMarketingEmails\\\"\\n        }\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"firstName\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"lastName\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"phone\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"birthDate\\\"\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"address\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"zipCode\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"city\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"country\\\"\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"citizenship\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"placeOfBirth\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"nationality\\\"\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"tax_information\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"primaryTinTaxJurisdiction\\\",\\n            \\\"options\\\": [\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"have_primary_tin\\\",\\n            \\\"options\\\": [\\n              \\\"have_primary_tin_yes\\\",\\n              \\\"have_primary_tin_no\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"primaryTin\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"tinAbsenceReason\\\",\\n            \\\"options\\\": [\\n              \\\"DOES_NOT_ISSUE\\\",\\n              \\\"UNABLE_TO_OBTAIN\\\",\\n              \\\"NOT_REQUIRED\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"secondaryTinTaxJurisdiction\\\",\\n            \\\"options\\\": [\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"secondaryTin\\\"\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"fatca\\\"\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"financial_information\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"employment_status\\\",\\n            \\\"options\\\": [\\n              \\\"es_employed\\\",\\n              \\\"es_self_employed\\\",\\n              \\\"es_retired\\\",\\n              \\\"es_student\\\",\\n              \\\"es_unemployed\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"industry\\\",\\n            \\\"options\\\": [\\n              \\\"i_accountancy\\\",\\n              \\\"i_admin_secretarial\\\",\\n              \\\"i_agriculture\\\",\\n              \\\"i_financial_services_banking\\\",\\n              \\\"i_catering_hospitality\\\",\\n              \\\"i_creative_media\\\",\\n              \\\"i_education\\\",\\n              \\\"i_emergency_services\\\",\\n              \\\"i_engineering\\\",\\n              \\\"i_financial_services_other\\\",\\n              \\\"i_health_medicine\\\",\\n              \\\"i_hm_forces\\\",\\n              \\\"i_hr\\\",\\n              \\\"i_financial_services_insurance\\\",\\n              \\\"i_it\\\",\\n              \\\"i_legal\\\",\\n              \\\"i_leisure_entertainment_other\\\",\\n              \\\"i_manufacturing\\\",\\n              \\\"i_marketing_pr_advertising\\\",\\n              \\\"i_pharmaceuticals\\\",\\n              \\\"i_property_constructions_trades\\\",\\n              \\\"i_retail\\\",\\n              \\\"i_sales\\\",\\n              \\\"i_social_care_services\\\",\\n              \\\"i_telecommunications\\\",\\n              \\\"i_transport_logistics\\\",\\n              \\\"i_other\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"industry_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"employer_name\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"employer_name_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"occupation\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"occupation_details\\\"\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"total_income\\\",\\n            \\\"options\\\": [\\n              \\\"ti_lt_10000\\\",\\n              \\\"ti_10001_20000\\\",\\n              \\\"ti_20001_50000\\\",\\n              \\\"ti_o_50001\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"net_worth\\\",\\n            \\\"options\\\": [\\n              \\\"nw_lt_10000\\\",\\n              \\\"nw_10000_50000\\\",\\n              \\\"nw_50000_100000\\\",\\n              \\\"nw_100000_250000\\\",\\n              \\\"nw_o_1000000\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"income_source\\\",\\n            \\\"options\\\": [\\n              \\\"soi_employment\\\",\\n              \\\"soi_business\\\",\\n              \\\"soi_savings\\\",\\n              \\\"soi_partner\\\",\\n              \\\"soi_loan\\\",\\n              \\\"soi_pension\\\",\\n              \\\"soi_inheritance\\\",\\n              \\\"soi_other\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"income_source_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"deposits_per_year\\\",\\n            \\\"options\\\": [\\n              \\\"dpy_lt_5000\\\",\\n              \\\"dpy_5001_25000\\\",\\n              \\\"dpy_25001_100000\\\",\\n              \\\"dpy_100001_250000\\\",\\n              \\\"dpy_250001_500000\\\",\\n              \\\"dpy_o_500001\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"deposit_and_withdrawal_method\\\",\\n            \\\"options\\\": [\\n              \\\"dwm_cc\\\",\\n              \\\"dwm_cc_oc\\\",\\n              \\\"dwm_bank\\\",\\n              \\\"dwm_bank_oc\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"registration_reason\\\",\\n            \\\"options\\\": [\\n              \\\"rr_speculative\\\",\\n              \\\"rr_earning\\\",\\n              \\\"rr_savings\\\",\\n              \\\"rr_hedging\\\",\\n              \\\"rr_other\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"registration_reason_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"pep\\\",\\n            \\\"options\\\": [\\n              \\\"pep_yes\\\",\\n              \\\"pep_no\\\"\\n            ]\\n          }\\n        ]\\n      ]\\n    },\\n    {\\n      \\\"groupName\\\": \\\"trading_experience\\\",\\n      \\\"top\\\": [\\n      ],\\n      \\\"bottom\\\": [\\n        {\\n          \\\"name\\\": \\\"termsAndConditions\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"personalInformationConfirmed\\\"\\n        }\\n      ],\\n      \\\"form\\\": [\\n        [\\n          {\\n            \\\"name\\\": \\\"net_disposable_income\\\",\\n            \\\"options\\\": [\\n              \\\"ndi_ut_10000\\\",\\n              \\\"ndi_10000_20000\\\",\\n              \\\"ndi_20000-50000\\\",\\n              \\\"ndi_o_50000\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"net_disposable_income_details\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"acceptable_risk_reward\\\",\\n            \\\"options\\\": [\\n              \\\"arr_lt_5\\\",\\n              \\\"arr_10_50\\\",\\n              \\\"arr_100\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"investment_objectives\\\",\\n            \\\"options\\\": [\\n              \\\"io_short_term\\\",\\n              \\\"io_medium_term\\\",\\n              \\\"io_long_term\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"trading_qualification\\\",\\n            \\\"options\\\": [\\n              \\\"tq_prof\\\",\\n              \\\"tq_higher\\\",\\n              \\\"tq_worked\\\",\\n              \\\"tq_none\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"sbe_experience\\\",\\n            \\\"options\\\": [\\n              \\\"sbee_never\\\",\\n              \\\"sbee_occasionally\\\",\\n              \\\"sbee_regularly\\\",\\n              \\\"sbee_frequently\\\"\\n            ]\\n          }\\n        ],\\n        [\\n          {\\n            \\\"name\\\": \\\"fos_experience\\\",\\n            \\\"options\\\": [\\n              \\\"fose_never\\\",\\n              \\\"fose_occasionally\\\",\\n              \\\"fose_regularly\\\",\\n              \\\"fose_frequently\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"fx_experience\\\",\\n            \\\"options\\\": [\\n              \\\"fxe_never\\\",\\n              \\\"fxe_occasionally\\\",\\n              \\\"fxe_regularly\\\",\\n              \\\"fxe_frequently\\\"\\n            ]\\n          },\\n          {\\n            \\\"name\\\": \\\"average_leverage\\\",\\n            \\\"options\\\": [\\n              \\\"al_never\\\",\\n              \\\"al_lt_50\\\",\\n              \\\"al_50_200\\\"\\n            ]\\n          }\\n        ]\\n      ]\\n    }\\n  ]\\n}\\n\"\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/strategy/registration.flow.globtrex.json\n// module id = 2804\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/strategy/registration.flow.globtrex.json?");

/***/ }),

/***/ 2805:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var View = __webpack_require__(15);\n    var user = __webpack_require__(10);\n\n    var template = _.template(__webpack_require__(2806));\n\n    var _require = __webpack_require__(13),\n        PERCENTS_100 = _require.PERCENTS_100;\n\n    var MIN_PROGRESS_BAR_WIDTH = 15;\n    var MAX_PROGRESS_BAR_WIDTH = 100;\n\n    var registrationBonusStepsContainer = '.registration-bonus-steps-to-go';\n\n    module.exports = View.extend({\n        className: 'registration-steps',\n\n        drawRegistrationProgress: function drawRegistrationProgress() {\n            this.render();\n\n            this.$el.html(template({\n                steps: this.collection,\n                progress: this.getProgressBarWidth()\n            }));\n\n            this.renderFullRegistrationBonus();\n        },\n        renderFullRegistrationBonus: function renderFullRegistrationBonus() {\n            this.options.bonusStepsContainer.find(registrationBonusStepsContainer).addClass('hidden');\n\n            if (user.getUserAwardsModel().hasFullRegistrationBonus(user.getUserCurrency())) {\n                this.options.bonusStepsContainer.find(registrationBonusStepsContainer).removeClass('hidden');\n\n                var message = __('registration.gift.general.format', this.collection.getNumberStepsToFinish(), user.getUserCurrencySymbol() + user.getUserAwardsModel().getFullRegistrationBonus(user.getUserCurrency()));\n\n                this.options.bonusStepsContainer.find(registrationBonusStepsContainer + ' .steps-to-go-message').html(message);\n            }\n        },\n        getProgressBarWidth: function getProgressBarWidth() {\n            if (this.collection.isFirstStep()) {\n                return MIN_PROGRESS_BAR_WIDTH;\n            }\n\n            if (this.collection.isLastStep()) {\n                return MAX_PROGRESS_BAR_WIDTH;\n            }\n\n            return (MIN_PROGRESS_BAR_WIDTH + this.collection.getCurrentStepId() * (PERCENTS_100 / this.collection.numberOfSteps())) % PERCENTS_100;\n        }\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/steps/registration.steps.progress.view.js\n// module id = 2805\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/steps/registration.steps.progress.view.js?");

/***/ }),

/***/ 2806:
/***/ (function(module, exports) {

eval("module.exports = \"<% steps.each(function (step, i) { %>\\n<div class=\\\"step hidden-xs\\\">\\n    <% if (step.get('status') === 'in-progress') { %>\\n    <i class=\\\"icon-registration-step\\\">\\n        <span style=\\\"color:#ffffff;\\\"><%= i + 1 %></span>\\n    </i>\\n    <% } else if (step.get('status') === 'pending') { %>\\n    <i class=\\\"icon-registration-step-gray\\\">\\n        <span style=\\\"color:#aaafb4;\\\"><%= i + 1 %></span>\\n    </i>\\n    <% } else { %>\\n    <i class=\\\"icon-registration-step\\\">\\n        <i class=\\\"icon-registration-step-complete\\\"></i>\\n    </i>\\n    <% } %>\\n\\n    <span style=\\\"<%= step.get('status') === 'pending' ? 'color:#979797' : '' %>\\\">\\n        <%= __('registration.step.title.' + step.get('title')) %>\\n    </span>\\n\\n    <% if (i+1 !== steps.length) { %>\\n    <i class=\\\"icon-registration-next-arrow\\\"></i>\\n    <% } %>\\n</div>\\n<% }) %>\\n\\n<div class=\\\"container progress-container hidden-sm hidden-md hidden-lg\\\">\\n    <div class=\\\"progress no-color\\\">\\n        <div class=\\\"steps-container\\\">\\n            <% steps.each(function (step, i) { %>\\n            <div class=\\\"step <%=step.get('status') === 'pending' ? 'no-color' : 'primary-color'%>\\\">\\n                <label><%= i+1 %></label>\\n            </div>\\n            <% }) %>\\n        </div>\\n        <div class=\\\"progress-bar primary-color\\\" style=\\\"width:<%= progress %>%\\\"></div>\\n    </div>\\n</div>\\n\";\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/steps/templates/registration.steps.progress.html\n// module id = 2806\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/steps/templates/registration.steps.progress.html?");

/***/ }),

/***/ 2807:
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"registration-container\\\">\\n    <div class=\\\"registration\\\">\\n        <div class=\\\"header\\\"></div>\\n        <div class=\\\"content\\\"></div>\\n\\n        <div class=\\\"separator hidden-xs\\\"><span></span></div>\\n\\n        <div class=\\\"footer hidden-xs\\\">\\n            <div class=\\\"left\\\">\\n                <% if (isLiveChatEnabled) { %>\\n                <span><%=__('help.need_help')%></span>\\n                <a class=\\\"fn-help-live-chat-link\\\">\\n                <span>\\n                    <%=__('help.right_here')%>\\n                </span>\\n                </a>\\n                <% } %>\\n            </div>\\n            <div class=\\\"right allow-personal-information\\\">\\n                <a url=\\\"#\\\" class=\\\"back allow-back fn-back hidden\\\"><%= __('actions.back') %></a>\\n                <button class=\\\"btn btn-primary fn-personal-information\\\"><%= __('actions.next') %></button>\\n            </div>\\n            <div class=\\\"right allow-next hidden\\\">\\n                <a url=\\\"#\\\" class=\\\"back allow-back fn-back hidden\\\"><%=__('actions.back')%></a>\\n                <button class=\\\"btn btn-primary fn-next\\\"><%=__('actions.next')%></button>\\n            </div>\\n            <div class=\\\"right allow-finish hidden\\\">\\n                <a url=\\\"#\\\" class=\\\"back allow-back fn-back hidden\\\"><%=__('actions.back')%></a>\\n                <button class=\\\"btn btn-primary fn-finish\\\"><%=__('actions.finish')%></button>\\n            </div>\\n        </div>\\n\\n        <div class=\\\"footer hidden-sm hidden-md hidden-lg\\\">\\n            <div class=\\\"allow-personal-information\\\">\\n                <div class=\\\"form-actions\\\">\\n                    <button class=\\\"btn btn-link back allow-back fn-back col hidden\\\">&larr;\\n                        <%= __('registration.button.previous') %>\\n                    </button>\\n                    <button class=\\\"btn btn-primary fn-personal-information col\\\"><%= __('registration.button.next') %> &rarr;</button>\\n                </div>\\n            </div>\\n            <div class=\\\"allow-next hidden\\\">\\n                <div class=\\\"form-actions\\\">\\n                    <button class=\\\"btn btn-link back allow-back fn-back col hidden\\\">&larr;\\n                        <%=__('registration.button.previous')%>\\n                    </button>\\n                    <button class=\\\"btn btn-primary fn-next col\\\"><%=__('registration.button.next')%> &rarr;</button>\\n                </div>\\n            </div>\\n            <div class=\\\"allow-finish hidden\\\">\\n                <div class=\\\"form-actions\\\">\\n                    <button class=\\\"btn btn-link back allow-back fn-back col hidden\\\">&larr;\\n                        <%=__('registration.button.previous')%>\\n                    </button>\\n                    <button class=\\\"btn btn-primary fn-finish col\\\"><%=__('actions.finish')%></button>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\";\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/templates/registration.html\n// module id = 2807\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/templates/registration.html?");

/***/ }),

/***/ 2808:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var core = __webpack_require__(5);\n    var PopupView = __webpack_require__(86);\n    var settings = __webpack_require__(12);\n    var CompleteRegistrationTemplate = _.template(__webpack_require__(2809));\n    var LoadingView = __webpack_require__(35);\n\n    var _require = __webpack_require__(2761),\n        EMPTY = _require.EMPTY,\n        LOADING = _require.LOADING,\n        SUCCESS = _require.SUCCESS,\n        ERROR = _require.ERROR;\n\n    var AfterSelectLeveragePopupView = PopupView.extend({\n        className: 'complete-registration',\n        name: 'complete-registration',\n\n        events: function events() {\n            return _.extend({}, _.result(PopupView.prototype, 'events'), {\n                'click .fn-finish': 'onFinish'\n            });\n        },\n\n        initialize: function initialize() {\n            PopupView.prototype.initialize.apply(this, arguments);\n            this.listenTo(this.model, 'change:statusOfLeverages', this.onStatusOfLeveragesChanged);\n            this.render();\n            this.onStatusOfLeveragesChanged();\n        },\n        render: function render() {\n            PopupView.prototype.render.call(this);\n            this.renderContent();\n        },\n        renderContent: function renderContent() {\n            this.setContent(CompleteRegistrationTemplate({\n                leverage: this.model.getCurrentLeverageValue()\n            }));\n        },\n        onFinish: function onFinish(event) {\n            event.preventDefault();\n            this.close();\n        },\n        onStatusOfLeveragesChanged: function onStatusOfLeveragesChanged() {\n            var status = this.model.get('statusOfLeverages');\n            var uiContent = '.popup-body';\n\n            switch (status) {\n                case EMPTY:\n                case LOADING:\n                    this.hideContent();\n                    this.addChildView(uiContent, LoadingView, { parent: this.$el });\n                    break;\n                case SUCCESS:\n                    this.removeChildView(uiContent);\n                    this.renderContent();\n                    break;\n                case ERROR:\n                    this.removeChildView(uiContent);\n                    core.trigger('ui:message-box', { text: __('indigo.generic.error.message') });\n                    break;\n            }\n        },\n        hideContent: function hideContent() {\n            this.$('.leverage').css('visibility', 'hidden');\n            this.$('.leverage-mobile').css('visibility', 'hidden');\n        },\n        showContent: function showContent() {\n            this.$('.leverage').css('visibility', 'visible');\n            this.$('.leverage-mobile').css('visibility', 'visible');\n        }\n    });\n\n    module.exports = AfterSelectLeveragePopupView;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/after.select_leverage.popup.view.js\n// module id = 2808\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/after.select_leverage.popup.view.js?");

/***/ }),

/***/ 2809:
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"leverage hidden-xs\\\">\\n    <div class=\\\"leverage-top finished\\\">\\n        <div class=\\\"bold\\\">\\n            <div class=\\\"completed-msg\\\"></div>\\n            <%= __('leverage.popup.set.message',leverage)%>\\n        </div>\\n    </div>\\n    <div class=\\\"leverage-content finished\\\">\\n        <%=__('leverage.popup.set.notes')%>\\n    </div>\\n    <div class=\\\"line\\\"></div>\\n    <div class=\\\"leverage-bottom leverage-finish\\\">\\n        <a class=\\\"btn btn-primary btn-block fn-finish\\\" href=\\\"#\\\">\\n            <div class=\\\"button-container\\\">\\n                <span>\\n                    <%=__('actions.finish')%>\\n                </span>\\n            </div>\\n        </a>\\n    </div>\\n    <div class=\\\"leverage-bottom leverage-description\\\">\\n        <%=__('leverage.popup.footer.description')%><br />\\n        <%=__('leverage.popup.footer.description.notes')%><br />\\n        <%=__('leverage.popup.footer.description.links')%><br />\\n    </div>\\n</div>\\n\\n<!-- MOBILE -->\\n<div class=\\\"leverage-mobile hidden-sm hidden-md hidden-lg\\\">\\n    <div class=\\\"mobile-content\\\">\\n        <div class=\\\"leverage-mobile-finished\\\">\\n            <span class=\\\"icon-complete-reg\\\"></span>\\n            <div class=\\\"text\\\"><%= __('leverage.popup.set.title.no_bonus')%></div>\\n        </div>\\n        <div class=\\\"line\\\"></div>\\n        <div class=\\\"leverage-top\\\">\\n            <div class=\\\"completed-msg\\\"></div>\\n            <%= __('leverage.popup.set.message',leverage)%>\\n        </div>\\n        <div class=\\\"leverage-content\\\">\\n            <%=__('leverage.popup.set.notes')%>\\n        </div>\\n        <div class=\\\"leverage-bottom leverage-description\\\">\\n            <%=__('leverage.popup.footer.description')%><br />\\n            <%=__('leverage.popup.footer.description.notes')%><br />\\n            <%=__('leverage.popup.footer.description.links')%><br />\\n        </div>\\n    </div>\\n    <div class=\\\"mobile-actions\\\">\\n        <a class=\\\"btn btn-primary btn-block fn-finish\\\" href=\\\"#\\\">\\n            <%=__('actions.finish')%>\\n        </a>\\n    </div>\\n</div>\";\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/templates/complete.registration.html\n// module id = 2809\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/templates/complete.registration.html?");

/***/ }),

/***/ 2810:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(0);\n    var LeverageModel = __webpack_require__(874);\n\n    var _require = __webpack_require__(2761),\n        EMPTY = _require.EMPTY,\n        LOADING = _require.LOADING,\n        SUCCESS = _require.SUCCESS,\n        ERROR = _require.ERROR;\n\n    var AfterSelectLeveragePopupModel = LeverageModel.extend({\n        defaults: function defaults() {\n            return {\n                statusOfLeverages: EMPTY\n            };\n        },\n        initialize: function initialize() {\n            this.loadLeverages();\n        },\n        loadLeverages: function loadLeverages() {\n            var status = this.control('statusOfLeverages');\n\n            status(LOADING);\n\n            this.load().then(function (res) {\n                return status(SUCCESS);\n            }).catch(function (err) {\n                return status(ERROR);\n            });\n        }\n    });\n\n    module.exports = AfterSelectLeveragePopupModel;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/modules/registration/after.select_leverage.popup.model.js\n// module id = 2810\n// module chunks = 11\n\n//# sourceURL=webpack:///./src/js/modules/registration/after.select_leverage.popup.model.js?");

/***/ })

});